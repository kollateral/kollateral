{
  "address": "0x574003c34A281119c090dA7b05A9433Ea3832107",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metadataManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_supplyManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_firstSupplyChangeAllowed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "AuthorizationUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "MetadataManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldMintCap",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newMintCap",
          "type": "uint32"
        }
      ],
      "name": "MintCapChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldWaitingPeriod",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newWaitingPeriod",
          "type": "uint32"
        }
      ],
      "name": "SupplyChangeWaitingPeriodChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "SupplyManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "TokenMetaUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECEIVE_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "authorizationState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCap",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "receiveWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMetadataManager",
          "type": "address"
        }
      ],
      "name": "setMetadataManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newCap",
          "type": "uint32"
        }
      ],
      "name": "setMintCap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "period",
          "type": "uint32"
        }
      ],
      "name": "setSupplyChangeWaitingPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSupplyManager",
          "type": "address"
        }
      ],
      "name": "setSupplyManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyChangeAllowedAfter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyChangeWaitingPeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyChangeWaitingPeriodMinimum",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "transferWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        }
      ],
      "name": "updateTokenMetadata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x60ef38d8f8e948e538a9294d14e14db820d061086020d48fd4b41209e7acd3b1",
  "receipt": {
    "to": null,
    "from": "0xfEeDc0DE1EBE0A72f52590Df786101e1c3944545",
    "contractAddress": "0x574003c34A281119c090dA7b05A9433Ea3832107",
    "transactionIndex": 1,
    "gasUsed": "4305661",
    "logsBloom": "0x
    "blockHash": "0x0a661c9d1cdc594793c62f3617355208f0f4ff97c58071dc177e0e40c00ec6a9",
    "transactionHash": "0x60ef38d8f8e948e538a9294d14e14db820d061086020d48fd4b41209e7acd3b1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 23896365,
        "transactionHash": "0x60ef38d8f8e948e538a9294d14e14db820d061086020d48fd4b41209e7acd3b1",
        "address": "0x574003c34A281119c090dA7b05A9433Ea3832107",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000feedc0de1ebe0a72f52590df786101e1c3944545"
        ],
        "data": "0x00000000000000000000000000000000000000000000130ee8e7179044400000",
        "logIndex": 1,
        "blockHash": "0x0a661c9d1cdc594793c62f3617355208f0f4ff97c58071dc177e0e40c00ec6a9"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 23896365,
        "transactionHash": "0x60ef38d8f8e948e538a9294d14e14db820d061086020d48fd4b41209e7acd3b1",
        "address": "0x574003c34A281119c090dA7b05A9433Ea3832107",
        "topics": [
          "0x0cff5c8e2b1e51135595ff4ebaefab9ef5b26373c3b84cbdc4677bb41468843b",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000a26a1ebca217c8090f9a7759ef82f19a1e19ea1"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x0a661c9d1cdc594793c62f3617355208f0f4ff97c58071dc177e0e40c00ec6a9"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 23896365,
        "transactionHash": "0x60ef38d8f8e948e538a9294d14e14db820d061086020d48fd4b41209e7acd3b1",
        "address": "0x574003c34A281119c090dA7b05A9433Ea3832107",
        "topics": [
          "0x65e484da94d3a093b70b54f45dda42146a4e7f7f6507a09e39f67ca388987d3e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000a26a1ebca217c8090f9a7759ef82f19a1e19ea1"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x0a661c9d1cdc594793c62f3617355208f0f4ff97c58071dc177e0e40c00ec6a9"
      }
    ],
    "blockNumber": 23896365,
    "cumulativeGasUsed": "4346782",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0A26a1eBca217c8090f9a7759Ef82f19a1E19ea1",
    "0x0A26a1eBca217c8090f9a7759Ef82f19a1E19ea1",
    1640995199
  ],
  "solcInputHash": "8d60dc970cf01e541997544cfcbd925e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.92b52cbf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metadataManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplyManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_firstSupplyChangeAllowed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"MetadataManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldMintCap\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newMintCap\",\"type\":\"uint32\"}],\"name\":\"MintCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldWaitingPeriod\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newWaitingPeriod\",\"type\":\"uint32\"}],\"name\":\"SupplyChangeWaitingPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"SupplyManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"TokenMetaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECEIVE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"authorizationState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCap\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"receiveWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMetadataManager\",\"type\":\"address\"}],\"name\":\"setMetadataManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newCap\",\"type\":\"uint32\"}],\"name\":\"setMintCap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"}],\"name\":\"setSupplyChangeWaitingPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSupplyManager\",\"type\":\"address\"}],\"name\":\"setSupplyManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyChangeAllowedAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyChangeWaitingPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyChangeWaitingPeriodMinimum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"updateTokenMetadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The governance token for the Kingmaker protocol\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"burn(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to be burned\",\"src\":\"The account that will burn tokens\"},\"returns\":{\"_0\":\"Boolean indicating success of burn\"}},\"constructor\":{\"params\":{\"_firstSupplyChangeAllowed\":\"The timestamp after which the first supply change may occur\",\"_metadataManager\":\"The address with the ability to alter the token metadata\",\"_supplyManager\":\"The address with the ability to mint more tokens\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"spender\":\"Spender's address\",\"subtractedValue\":\"Amount of decrease in allowance\"},\"returns\":{\"_0\":\"True if successful\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"addedValue\":\"Amount of increase in allowance\",\"spender\":\"Spender's address\"},\"returns\":{\"_0\":\"True if successful\"}},\"mint(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to be minted\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Boolean indicating success of mint\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"details\":\"This has an additional check to ensure that the payee's address matches the caller of this function to prevent front-running attacks.\",\"params\":{\"from\":\"Payer's address (Authorizer)\",\"nonce\":\"Unique nonce\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"to\":\"Payee's address\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount to be transferred\"}},\"setMetadataManager(address)\":{\"params\":{\"newMetadataManager\":\"The address of the new metadata manager\"},\"returns\":{\"_0\":\"true if successful\"}},\"setMintCap(uint32)\":{\"params\":{\"newCap\":\"The new mint cap in bips (10,000 bips = 1% of totalSupply)\"},\"returns\":{\"_0\":\"true if successful\"}},\"setSupplyChangeWaitingPeriod(uint32)\":{\"params\":{\"period\":\"The new supply change waiting period\"},\"returns\":{\"_0\":\"true if succssful\"}},\"setSupplyManager(address)\":{\"params\":{\"newSupplyManager\":\"The address of the new supply manager\"},\"returns\":{\"_0\":\"true if successful\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"from\":\"Payer's address (Authorizer)\",\"nonce\":\"Unique nonce\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"to\":\"Payee's address\",\"v\":\"The recovery byte of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount to be transferred\"}},\"updateTokenMetadata(string,string)\":{\"params\":{\"tokenName\":\"The new name for the token\",\"tokenSymbol\":\"The new symbol for the token\"},\"returns\":{\"_0\":\"true if successful\"}}},\"stateVariables\":{\"allowances\":{\"details\":\"Allowance amounts on behalf of others\"},\"authorizationState\":{\"details\":\"authorizer address > nonce > state (true = used / false = unused)\"},\"balances\":{\"details\":\"Official record of token balances for each account\"}},\"title\":\"KING\",\"version\":1},\"userdoc\":{\"events\":{\"AuthorizationUsed(address,bytes32)\":{\"notice\":\"An event that's emitted whenever an authorized transfer occurs\"},\"MetadataManagerChanged(address,address)\":{\"notice\":\"An event that's emitted when the metadataManager address is changed\"},\"MintCapChanged(uint32,uint32)\":{\"notice\":\"An event that's emitted when the mintCap is changed\"},\"SupplyChangeWaitingPeriodChanged(uint32,uint32)\":{\"notice\":\"An event that's emitted when the supplyChangeWaitingPeriod is changed\"},\"SupplyManagerChanged(address,address)\":{\"notice\":\"An event that's emitted when the supplyManager address is changed\"},\"TokenMetaUpdated(string,string)\":{\"notice\":\"An event that's emitted when the token name and symbol are changed\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The EIP-712 typehash for the contract's domain keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for permit (EIP-2612) keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\"},\"RECEIVE_WITH_AUTHORIZATION_TYPEHASH()\":{\"notice\":\"keccak256(\\\"ReceiveWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\"},\"TRANSFER_WITH_AUTHORIZATION_TYPEHASH()\":{\"notice\":\"keccak256(\\\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\");\"},\"VERSION_HASH()\":{\"notice\":\"The EIP-712 version hash keccak256(\\\"1\\\");\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"burn(address,uint256)\":{\"notice\":\"Burn tokens\"},\"constructor\":{\"notice\":\"Construct a new KING token\"},\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decrease the allowance by a given amount\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increase the allowance by a given amount\"},\"metadataManager()\":{\"notice\":\"Address which may change token metadata\"},\"mint(address,uint256)\":{\"notice\":\"Mint new tokens\"},\"mintCap()\":{\"notice\":\"Cap on the total amount that can be minted at each mint (measured in bips: 10,000 bips = 1% of current totalSupply)\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Receive a transfer with a signed authorization from the payer\"},\"setMetadataManager(address)\":{\"notice\":\"Change the metadataManager address\"},\"setMintCap(uint32)\":{\"notice\":\"Set the maximum amount of tokens that can be minted at once\"},\"setSupplyChangeWaitingPeriod(uint32)\":{\"notice\":\"Set the minimum time between supply changes\"},\"setSupplyManager(address)\":{\"notice\":\"Change the supplyManager address\"},\"supplyChangeAllowedAfter()\":{\"notice\":\"The timestamp after which a supply change may occur\"},\"supplyChangeWaitingPeriod()\":{\"notice\":\"The initial minimum waiting time for changing the token supply\"},\"supplyChangeWaitingPeriodMinimum()\":{\"notice\":\"Hard cap on the minimum waiting time for changing the token supply\"},\"supplyManager()\":{\"notice\":\"Address which may mint/burn tokens\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"totalSupply()\":{\"notice\":\"Total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Transfer tokens with a signed authorization\"},\"updateTokenMetadata(string,string)\":{\"notice\":\"Update the token name and symbol\"}},\"notice\":\"ERC-20 with supply controls + add-ons to allow for offchain signing (see EIP-712, EIP-2612, and EIP-3009)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/KING.sol\":\"KING\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x44300341eb97e8790e56e0823e8c3d09695fc2ee80555a83a9585f307381f324\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x752ac2a89da774de5c98f8ca1adcad306ce00d0ebb547ad7be8ba7e95468aa73\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/governance/KING.sol\":{\"content\":\"/* solhint-disable max-line-length */\\n/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n                                                                                    \\u2591\\u2591\\n                                                                                  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                                                                                \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\n                                                                            \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\n                                                                            \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n                                                                              \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                                                                      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                                                                    \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592  \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\n                                                                  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                                                                    \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\n                                                                      \\u2593\\u2593\\u2592\\u2592    \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592    \\u2592\\u2592\\u2593\\u2593\\n                                                                        \\u2593\\u2593\\u2591\\u2591  \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592  \\u2592\\u2592\\u2593\\u2593\\n                                                                        \\u2591\\u2591  \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2588\\u2588\\u2591\\u2591\\u2591\\u2591\\n                                            \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591                      \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593                      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                                        \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591                  \\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592                  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                              \\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591            \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591              \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\n                        \\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591          \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593          \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\n                      \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n                \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2588\\u2588\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2588\\u2588\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2588\\u2588\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n            \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n            \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n          \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n        \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593    \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n        \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593      \\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591  \\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\n        \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593      \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592  \\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n      \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593    \\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591  \\u2588\\u2588\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n      \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593      \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\n        \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593    \\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592  \\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592    \\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n        \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n        \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n            \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\n            \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n              \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592  \\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2591\\u2591\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591  \\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\n                    \\u2592\\u2592  \\u2591\\u2591  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592  \\u2591\\u2591\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592  \\u2592\\u2592  \\u2592\\u2592\\n                  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592  \\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591      \\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\n                  \\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592    \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592    \\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n                  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2588\\u2588    \\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592    \\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\n                    \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592      \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2588\\u2588\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593      \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\n                    \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591    \\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593    \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\n                      \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591  \\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2588\\u2588\\u2593\\u2593\\u2591\\u2591\\u2593\\u2593\\u2591\\u2591\\u2593\\u2593\\u2591\\u2591\\u2593\\u2593\\u2588\\u2588\\u2588\\u2588\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\n                        \\u2592\\u2592\\u2592\\u2592\\u2591\\u2591    \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2593\\u2593\\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\n                          \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592  \\u2588\\u2588\\u2591\\u2591\\u2592\\u2592\\u2588\\u2588\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2588\\u2588\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\n                            \\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2593\\u2593\\u2588\\u2588\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\n                            \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2593\\u2593\\u2591\\u2591\\u2588\\u2588  \\u2588\\u2588\\u2591\\u2591\\u2593\\u2593\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\n                            \\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2593\\u2593  \\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2588\\u2588\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2593\\u2593\\u2588\\u2588\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2593\\u2593\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2591\\u2591\\u2593\\u2593\\u2588\\u2588\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\n                              \\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2593\\u2593\\u2593\\u2593\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\n                              \\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\n                              \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\n                              \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591          \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\n                                \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\n                                \\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592  \\u2593\\u2593\\u2591\\u2591\\n                                \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\n                                \\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592\\n                                  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\n                              \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591                                    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\n                              \\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\n                                  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\n                                                  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n\\n*/\\n/* solhint-enable max-line-length */\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/governance/ICrownGovernanceToken.sol\\\";\\n\\n/**\\n * @title KING\\n * @dev The governance token for the Kingmaker protocol\\n * @notice ERC-20 with supply controls + add-ons to allow for offchain signing (see EIP-712, EIP-2612, and EIP-3009)\\n */\\ncontract KING is ICrownGovernanceToken {\\n\\tusing ECDSA for *;\\n\\tusing SafeMath for uint256;\\n\\n\\t/// @notice EIP-20 token name for this token\\n\\tstring public override name = \\\"Kingmaker Crown Governance Token\\\";\\n\\n\\t/// @notice EIP-20 token symbol for this token\\n\\tstring public override symbol = \\\"KING\\\"; // or unicode\\\"\\u265a\\\" ?\\n\\n\\t/// @notice EIP-20 token decimals for this token\\n\\tuint8 public constant override decimals = 18;\\n\\n\\t/// @notice Total number of tokens in circulation\\n\\tuint256 public override totalSupply = 90000e18; // 90 thousands units\\n\\n\\t/// @notice Address which may mint/burn tokens\\n\\taddress public override supplyManager;\\n\\n\\t/// @notice Address which may change token metadata\\n\\taddress public override metadataManager;\\n\\n\\t/// @notice The timestamp after which a supply change may occur\\n\\tuint256 public override supplyChangeAllowedAfter;\\n\\n\\t/// @notice The initial minimum waiting time for changing the token supply\\n\\tuint32 public override supplyChangeWaitingPeriod = 1 days * 365; // 1 year\\n\\n\\t/// @notice Hard cap on the minimum waiting time for changing the token supply\\n\\tuint32 public constant override supplyChangeWaitingPeriodMinimum = 1 days * 90;\\n\\t// solhint-disable-next-line max-line-length\\n\\t/// @notice Cap on the total amount that can be minted at each mint (measured in bips: 10,000 bips = 1% of current totalSupply)\\n\\tuint32 public override mintCap = 900000;\\n\\n\\t/// @dev Allowance amounts on behalf of others\\n\\tmapping(address => mapping(address => uint256)) internal allowances;\\n\\n\\t/// @dev Official record of token balances for each account\\n\\tmapping(address => uint256) internal balances;\\n\\n\\t/// @notice The EIP-712 typehash for the contract's domain\\n\\t/// keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n\\tbytes32 public constant override DOMAIN_SEPARATOR =\\n\\t\\t0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n\\t/// @notice The EIP-712 version hash\\n\\t/// keccak256(\\\"1\\\");\\n\\tbytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n\\t/// @notice The EIP-712 typehash for permit (EIP-2612)\\n\\t/// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\tbytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n\\t/// @notice The EIP-712 typehash for transferWithAuthorization (EIP-3009)\\n\\t// solhint-disable-next-line max-line-length\\n\\t/// keccak256(\\\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\");\\n\\tbytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH =\\n\\t\\t0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\\n\\n\\t/// @notice The EIP-712 typehash for receiveWithAuthorization (EIP-3009)\\n\\t// solhint-disable-next-line max-line-length\\n\\t/// keccak256(\\\"ReceiveWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n\\tbytes32 public constant RECEIVE_WITH_AUTHORIZATION_TYPEHASH =\\n\\t\\t0xd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8;\\n\\n\\t/// @notice A record of states for signing / validating signatures\\n\\tmapping(address => uint256) public override nonces;\\n\\n\\t/// @dev authorizer address > nonce > state (true = used / false = unused)\\n\\tmapping(address => mapping(bytes32 => bool)) public authorizationState;\\n\\n\\t/**\\n\\t * @notice Construct a new KING token\\n\\t * @param _metadataManager The address with the ability to alter the token metadata\\n\\t * @param _supplyManager The address with the ability to mint more tokens\\n\\t * @param _firstSupplyChangeAllowed The timestamp after which the first supply change may occur\\n\\t */\\n\\tconstructor(\\n\\t\\taddress _metadataManager,\\n\\t\\taddress _supplyManager,\\n\\t\\tuint256 _firstSupplyChangeAllowed\\n\\t) {\\n\\t\\trequire(\\n\\t\\t\\t_firstSupplyChangeAllowed >= block.timestamp,\\n\\t\\t\\t\\\"KING::constructor: minting can only begin after deployment\\\"\\n\\t\\t);\\n\\n\\t\\tbalances[msg.sender] = totalSupply;\\n\\t\\temit Transfer(address(0), msg.sender, totalSupply);\\n\\n\\t\\tsupplyChangeAllowedAfter = _firstSupplyChangeAllowed;\\n\\t\\tsupplyManager = _supplyManager;\\n\\t\\temit SupplyManagerChanged(address(0), _supplyManager);\\n\\n\\t\\tmetadataManager = _metadataManager;\\n\\t\\temit MetadataManagerChanged(address(0), metadataManager);\\n\\n\\t\\t// gasless method to prevent tokens transfers to the token address\\n\\t\\tbalances[address(this)] = type(uint256).max;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Change the supplyManager address\\n\\t * @param newSupplyManager The address of the new supply manager\\n\\t * @return true if successful\\n\\t */\\n\\tfunction setSupplyManager(address newSupplyManager) external override returns (bool) {\\n\\t\\trequire(msg.sender == supplyManager, \\\"KING::setSupplyManager: only SM can change SM\\\");\\n\\t\\temit SupplyManagerChanged(supplyManager, newSupplyManager);\\n\\t\\tsupplyManager = newSupplyManager;\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Change the metadataManager address\\n\\t * @param newMetadataManager The address of the new metadata manager\\n\\t * @return true if successful\\n\\t */\\n\\tfunction setMetadataManager(address newMetadataManager) external override returns (bool) {\\n\\t\\trequire(msg.sender == metadataManager, \\\"KING::setMetadataManager: only MM can change MM\\\");\\n\\t\\temit MetadataManagerChanged(metadataManager, newMetadataManager);\\n\\t\\tmetadataManager = newMetadataManager;\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Mint new tokens\\n\\t * @param dst The address of the destination account\\n\\t * @param amount The number of tokens to be minted\\n\\t * @return Boolean indicating success of mint\\n\\t */\\n\\tfunction mint(address dst, uint256 amount) external override returns (bool) {\\n\\t\\trequire(msg.sender == supplyManager, \\\"KING::mint: only the supplyManager can mint\\\");\\n\\t\\trequire(dst != address(0), \\\"KING::mint: cannot transfer to the zero address\\\");\\n\\t\\trequire(amount <= (totalSupply * (mintCap)) / (1000000), \\\"KING::mint: exceeded mint cap\\\");\\n\\t\\trequire(block.timestamp >= supplyChangeAllowedAfter, \\\"KING::mint: minting not allowed yet\\\");\\n\\n\\t\\t// update the next supply change allowed timestamp\\n\\t\\tsupplyChangeAllowedAfter = block.timestamp + supplyChangeWaitingPeriod;\\n\\n\\t\\t// mint the amount\\n\\t\\t_mint(dst, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Burn tokens\\n\\t * @param src The account that will burn tokens\\n\\t * @param amount The number of tokens to be burned\\n\\t * @return Boolean indicating success of burn\\n\\t */\\n\\tfunction burn(address src, uint256 amount) external override returns (bool) {\\n\\t\\taddress spender = msg.sender;\\n\\t\\trequire(spender == supplyManager, \\\"KING::burn: only the supplyManager can burn\\\");\\n\\t\\trequire(src != address(0), \\\"KING::burn: cannot transfer from the zero address\\\");\\n\\t\\trequire(block.timestamp >= supplyChangeAllowedAfter, \\\"KING::burn: burning not allowed yet\\\");\\n\\n\\t\\tuint256 spenderAllowance = allowances[src][spender];\\n\\t\\t// check allowance and reduce by amount\\n\\t\\tif (spender != src && spenderAllowance != type(uint256).max) {\\n\\t\\t\\tuint256 newAllowance = spenderAllowance.sub(amount, \\\"KING::burn: burn amount exceeds allowance\\\");\\n\\t\\t\\tallowances[src][spender] = newAllowance;\\n\\n\\t\\t\\temit Approval(src, spender, newAllowance);\\n\\t\\t}\\n\\n\\t\\t// update the next supply change allowed timestamp\\n\\t\\tsupplyChangeAllowedAfter = block.timestamp + supplyChangeWaitingPeriod;\\n\\n\\t\\t// burn the amount\\n\\t\\t_burn(src, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set the maximum amount of tokens that can be minted at once\\n\\t * @param newCap The new mint cap in bips (10,000 bips = 1% of totalSupply)\\n\\t * @return true if successful\\n\\t */\\n\\tfunction setMintCap(uint32 newCap) external override returns (bool) {\\n\\t\\trequire(msg.sender == supplyManager, \\\"KING::setMintCap: only SM can change mint cap\\\");\\n\\t\\temit MintCapChanged(mintCap, newCap);\\n\\t\\tmintCap = newCap;\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set the minimum time between supply changes\\n\\t * @param period The new supply change waiting period\\n\\t * @return true if succssful\\n\\t */\\n\\tfunction setSupplyChangeWaitingPeriod(uint32 period) external override returns (bool) {\\n\\t\\trequire(msg.sender == supplyManager, \\\"KING::setSupplyChangeWaitingPeriod: only SM can change waiting period\\\");\\n\\t\\trequire(\\n\\t\\t\\tperiod >= supplyChangeWaitingPeriodMinimum,\\n\\t\\t\\t\\\"KING::setSupplyChangeWaitingPeriod: waiting period must be > minimum\\\"\\n\\t\\t);\\n\\t\\temit SupplyChangeWaitingPeriodChanged(supplyChangeWaitingPeriod, period);\\n\\t\\tsupplyChangeWaitingPeriod = period;\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update the token name and symbol\\n\\t * @param tokenName The new name for the token\\n\\t * @param tokenSymbol The new symbol for the token\\n\\t * @return true if successful\\n\\t */\\n\\tfunction updateTokenMetadata(string memory tokenName, string memory tokenSymbol) external override returns (bool) {\\n\\t\\trequire(msg.sender == metadataManager, \\\"KING::updateTokenMeta: only MM can update token metadata\\\");\\n\\t\\tname = tokenName;\\n\\t\\tsymbol = tokenSymbol;\\n\\t\\temit TokenMetaUpdated(name, symbol);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n\\t * @param account The address of the account holding the funds\\n\\t * @param spender The address of the account spending the funds\\n\\t * @return The number of tokens approved\\n\\t */\\n\\tfunction allowance(address account, address spender) external view override returns (uint256) {\\n\\t\\treturn allowances[account][spender];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Approve `spender` to transfer up to `amount` from `src`\\n\\t * @dev This will overwrite the approval amount for `spender`\\n\\t * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n\\t * It is recommended to use increaseAllowance and decreaseAllowance instead\\n\\t * @param spender The address of the account which may transfer tokens\\n\\t * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n\\t * @return Whether or not the approval succeeded\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external override returns (bool) {\\n\\t\\t_approve(msg.sender, spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Increase the allowance by a given amount\\n\\t * @param spender Spender's address\\n\\t * @param addedValue Amount of increase in allowance\\n\\t * @return True if successful\\n\\t */\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n\\t\\t_increaseAllowance(msg.sender, spender, addedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Decrease the allowance by a given amount\\n\\t * @param spender Spender's address\\n\\t * @param subtractedValue Amount of decrease in allowance\\n\\t * @return True if successful\\n\\t */\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n\\t\\t_decreaseAllowance(msg.sender, spender, subtractedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Triggers an approval from owner to spender\\n\\t * @param owner The address to approve from\\n\\t * @param spender The address to be approved\\n\\t * @param value The number of tokens that are approved (2^256-1 means infinite)\\n\\t * @param deadline The time at which to expire the signature\\n\\t * @param v The recovery byte of the signature\\n\\t * @param r Half of the ECDSA signature pair\\n\\t * @param s Half of the ECDSA signature pair\\n\\t */\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external override {\\n\\t\\trequire(deadline >= block.timestamp, \\\"KING::permit: signature expired\\\");\\n\\n\\t\\tbytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n\\t\\t_validateSignedData(owner, encodeData, v, r, s);\\n\\n\\t\\t_approve(owner, spender, value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get the number of tokens held by the `account`\\n\\t * @param account The address of the account to get the balance of\\n\\t * @return The number of tokens held\\n\\t */\\n\\tfunction balanceOf(address account) external view override returns (uint256) {\\n\\t\\treturn balances[account];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n\\t * @param dst The address of the destination account\\n\\t * @param amount The number of tokens to transfer\\n\\t * @return Whether or not the transfer succeeded\\n\\t */\\n\\tfunction transfer(address dst, uint256 amount) external override returns (bool) {\\n\\t\\t_transferTokens(msg.sender, dst, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfer `amount` tokens from `src` to `dst`\\n\\t * @param src The address of the source account\\n\\t * @param dst The address of the destination account\\n\\t * @param amount The number of tokens to transfer\\n\\t * @return Whether or not the transfer succeeded\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 amount\\n\\t) external override returns (bool) {\\n\\t\\taddress spender = msg.sender;\\n\\t\\tuint256 spenderAllowance = allowances[src][spender];\\n\\n\\t\\tif (spender != src && spenderAllowance != type(uint256).max) {\\n\\t\\t\\tuint256 newAllowance = spenderAllowance.sub(amount, \\\"KING::transferFrom: transfer amount exceeds allowance\\\");\\n\\t\\t\\tallowances[src][spender] = newAllowance;\\n\\n\\t\\t\\temit Approval(src, spender, newAllowance);\\n\\t\\t}\\n\\n\\t\\t_transferTokens(src, dst, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfer tokens with a signed authorization\\n\\t * @param from Payer's address (Authorizer)\\n\\t * @param to Payee's address\\n\\t * @param value Amount to be transferred\\n\\t * @param validAfter The time after which this is valid (unix time)\\n\\t * @param validBefore The time before which this is valid (unix time)\\n\\t * @param nonce Unique nonce\\n\\t * @param v The recovery byte of the signature\\n\\t * @param r Half of the ECDSA signature pair\\n\\t * @param s Half of the ECDSA signature pair\\n\\t */\\n\\tfunction transferWithAuthorization(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value,\\n\\t\\tuint256 validAfter,\\n\\t\\tuint256 validBefore,\\n\\t\\tbytes32 nonce,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external {\\n\\t\\trequire(block.timestamp > validAfter, \\\"KING::transferWithAuth: auth not yet valid\\\");\\n\\t\\trequire(block.timestamp < validBefore, \\\"KING::transferWithAuth: auth expired\\\");\\n\\t\\trequire(!authorizationState[from][nonce], \\\"KING::transferWithAuth: auth already used\\\");\\n\\n\\t\\tbytes32 encodeData =\\n\\t\\t\\tkeccak256(abi.encode(TRANSFER_WITH_AUTHORIZATION_TYPEHASH, from, to, value, validAfter, validBefore, nonce));\\n\\t\\t_validateSignedData(from, encodeData, v, r, s);\\n\\n\\t\\tauthorizationState[from][nonce] = true;\\n\\t\\temit AuthorizationUsed(from, nonce);\\n\\n\\t\\t_transferTokens(from, to, value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Receive a transfer with a signed authorization from the payer\\n\\t * @dev This has an additional check to ensure that the payee's address matches\\n\\t * the caller of this function to prevent front-running attacks.\\n\\t * @param from Payer's address (Authorizer)\\n\\t * @param to Payee's address\\n\\t * @param value Amount to be transferred\\n\\t * @param validAfter The time after which this is valid (unix time)\\n\\t * @param validBefore The time before which this is valid (unix time)\\n\\t * @param nonce Unique nonce\\n\\t * @param v v of the signature\\n\\t * @param r r of the signature\\n\\t * @param s s of the signature\\n\\t */\\n\\tfunction receiveWithAuthorization(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value,\\n\\t\\tuint256 validAfter,\\n\\t\\tuint256 validBefore,\\n\\t\\tbytes32 nonce,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external {\\n\\t\\trequire(to == msg.sender, \\\"KING::receiveWithAuth: caller must be the payee\\\");\\n\\t\\trequire(block.timestamp > validAfter, \\\"KING::receiveWithAuth: auth not yet valid\\\");\\n\\t\\trequire(block.timestamp < validBefore, \\\"KING::receiveWithAuth: auth expired\\\");\\n\\t\\trequire(!authorizationState[from][nonce], \\\"KING::receiveWithAuth: auth already used\\\");\\n\\n\\t\\tbytes32 encodeData =\\n\\t\\t\\tkeccak256(abi.encode(RECEIVE_WITH_AUTHORIZATION_TYPEHASH, from, to, value, validAfter, validBefore, nonce));\\n\\t\\t_validateSignedData(from, encodeData, v, r, s);\\n\\n\\t\\tauthorizationState[from][nonce] = true;\\n\\t\\temit AuthorizationUsed(from, nonce);\\n\\n\\t\\t_transferTokens(from, to, value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice EIP-712 Domain separator\\n\\t * @return Separator\\n\\t */\\n\\tfunction getDomainSeparator() public view returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(abi.encode(DOMAIN_SEPARATOR, keccak256(bytes(name)), VERSION_HASH, _getChainId(), address(this)));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Recovers address from signed data and validates the signature\\n\\t * @param signer Address that signed the data\\n\\t * @param encodeData Data signed by the address\\n\\t * @param v The recovery byte of the signature\\n\\t * @param r Half of the ECDSA signature pair\\n\\t * @param s Half of the ECDSA signature pair\\n\\t */\\n\\tfunction _validateSignedData(\\n\\t\\taddress signer,\\n\\t\\tbytes32 encodeData,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) internal view {\\n\\t\\tbytes32 dataHash = ECDSA.toTypedDataHash(getDomainSeparator(), encodeData);\\n\\t\\taddress recoveredAddress = ECDSA.recover(dataHash, v, r, s);\\n\\n\\t\\t// Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n\\t\\trequire(recoveredAddress != address(0) && recoveredAddress == signer, \\\"KING::validateSig: invalid signature\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @notice Approval implementation\\n\\t * @param owner The address of the account which owns tokens\\n\\t * @param spender The address of the account which may transfer tokens\\n\\t * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n\\t */\\n\\tfunction _approve(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\trequire(owner != address(0), \\\"KING::_approve: approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"KING::_approve: approve to the zero address\\\");\\n\\t\\tallowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\tfunction _increaseAllowance(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 addedValue\\n\\t) internal {\\n\\t\\t_approve(owner, spender, allowances[owner][spender] + addedValue);\\n\\t}\\n\\n\\tfunction _decreaseAllowance(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 subtractedValue\\n\\t) internal {\\n\\t\\t_approve(\\n\\t\\t\\towner,\\n\\t\\t\\tspender,\\n\\t\\t\\tallowances[owner][spender].sub(subtractedValue, \\\"KING::_decreaseAllowance: decreased allowance below zero\\\")\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfer implementation\\n\\t * @param from The address of the account which owns tokens\\n\\t * @param to The address of the account which is receiving tokens\\n\\t * @param value The number of tokens that are being transferred\\n\\t */\\n\\tfunction _transferTokens(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) internal {\\n\\t\\trequire(to != address(0), \\\"KING::_transferTokens: cannot transfer to the zero address\\\");\\n\\n\\t\\tbalances[from] = balances[from].sub(value, \\\"KING::_transferTokens: transfer exceeds from balance\\\");\\n\\t\\tbalances[to] = balances[to] + value;\\n\\t\\temit Transfer(from, to, value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Mint implementation\\n\\t * @param to The address of the account which is receiving tokens\\n\\t * @param value The number of tokens that are being minted\\n\\t */\\n\\tfunction _mint(address to, uint256 value) internal {\\n\\t\\ttotalSupply = totalSupply + value;\\n\\t\\tbalances[to] = balances[to] + value;\\n\\t\\temit Transfer(address(0), to, value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Burn implementation\\n\\t * @param from The address of the account which owns tokens\\n\\t * @param value The number of tokens that are being burned\\n\\t */\\n\\tfunction _burn(address from, uint256 value) internal {\\n\\t\\tbalances[from] = balances[from].sub(value, \\\"KING::_burn: burn amount exceeds from balance\\\");\\n\\t\\ttotalSupply = totalSupply.sub(value, \\\"KING::_burn: burn amount exceeds total supply\\\");\\n\\t\\temit Transfer(from, address(0), value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Current id of the chain where this contract is deployed\\n\\t * @return Chain id\\n\\t */\\n\\tfunction _getChainId() internal view returns (uint256) {\\n\\t\\tuint256 chainId;\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\t\\treturn chainId;\\n\\t}\\n}\\n\",\"keccak256\":\"0x690e71002b1f2d07881b5cf9ccaa771f40fd7c6a6685781d3ef91c64a52a6032\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/ICrownGovernanceToken.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\ninterface ICrownGovernanceToken is IERC20, IERC20Permit {\\n\\t/// @notice An event that's emitted when the mintCap is changed\\n\\tevent MintCapChanged(uint32 indexed oldMintCap, uint32 indexed newMintCap);\\n\\t/// @notice An event that's emitted when the supplyManager address is changed\\n\\tevent SupplyManagerChanged(address indexed oldManager, address indexed newManager);\\n\\t/// @notice An event that's emitted when the supplyChangeWaitingPeriod is changed\\n\\tevent SupplyChangeWaitingPeriodChanged(uint32 indexed oldWaitingPeriod, uint32 indexed newWaitingPeriod);\\n\\t/// @notice An event that's emitted when the metadataManager address is changed\\n\\tevent MetadataManagerChanged(address indexed oldManager, address indexed newManager);\\n\\t/// @notice An event that's emitted when the token name and symbol are changed\\n\\tevent TokenMetaUpdated(string indexed name, string indexed symbol);\\n\\t/// @notice An event that's emitted whenever an authorized transfer occurs\\n\\tevent AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n\\n\\tfunction name() external view returns (string memory);\\n\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction mint(address dst, uint256 amount) external returns (bool);\\n\\n\\tfunction burn(address src, uint256 amount) external returns (bool);\\n\\n\\tfunction updateTokenMetadata(string memory tokenName, string memory tokenSymbol) external returns (bool);\\n\\n\\tfunction supplyManager() external view returns (address);\\n\\n\\tfunction metadataManager() external view returns (address);\\n\\n\\tfunction supplyChangeAllowedAfter() external view returns (uint256);\\n\\n\\tfunction supplyChangeWaitingPeriod() external view returns (uint32);\\n\\n\\tfunction supplyChangeWaitingPeriodMinimum() external view returns (uint32);\\n\\n\\tfunction mintCap() external view returns (uint32);\\n\\n\\tfunction setSupplyManager(address newSupplyManager) external returns (bool);\\n\\n\\tfunction setMetadataManager(address newMetadataManager) external returns (bool);\\n\\n\\tfunction setSupplyChangeWaitingPeriod(uint32 period) external returns (bool);\\n\\n\\tfunction setMintCap(uint32 newCap) external returns (bool);\\n}\\n\",\"keccak256\":\"0x73a898a087796b408d2e6a686a8ab0680bab932f048e4825c67e8c89da88c3d7\",\"license\":\"Apache-2.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060400160405280602081526020017f4b696e676d616b65722043726f776e20476f7665726e616e636520546f6b656e8152506000908051906020019062000051929190620003ee565b506040518060400160405280600481526020017f4b494e4700000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620003ee565b5069130ee8e71790444000006002556301e13380600660006101000a81548163ffffffff021916908363ffffffff160217905550620dbba0600660046101000a81548163ffffffff021916908363ffffffff1602179055503480156200010457600080fd5b5060405162004fc138038062004fc183398181016040528101906200012a9190620004cc565b4281101562000170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000167906200055a565b60405180910390fd5b600254600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6002546040516200021891906200057c565b60405180910390a38060058190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f0cff5c8e2b1e51135595ff4ebaefab9ef5b26373c3b84cbdc4677bb41468843b60405160405180910390a382600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f65e484da94d3a093b70b54f45dda42146a4e7f7f6507a09e39f67ca388987d3e60405160405180910390a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050620006d0565b828054620003fc90620005e8565b90600052602060002090601f0160209004810192826200042057600085556200046c565b82601f106200043b57805160ff19168380011785556200046c565b828001600101855582156200046c579182015b828111156200046b5782518255916020019190600101906200044e565b5b5090506200047b91906200047f565b5090565b5b808211156200049a57600081600090555060010162000480565b5090565b600081519050620004af816200069c565b92915050565b600081519050620004c681620006b6565b92915050565b600080600060608486031215620004e257600080fd5b6000620004f2868287016200049e565b935050602062000505868287016200049e565b92505060406200051886828701620004b5565b9150509250925092565b600062000531603a8362000599565b91506200053e826200064d565b604082019050919050565b6200055481620005de565b82525050565b60006020820190508181036000830152620005758162000522565b9050919050565b600060208201905062000593600083018462000549565b92915050565b600082825260208201905092915050565b6000620005b782620005be565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060028204905060018216806200060157607f821691505b602082108114156200061857620006176200061e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4b494e473a3a636f6e7374727563746f723a206d696e74696e672063616e206f60008201527f6e6c7920626567696e206166746572206465706c6f796d656e74000000000000602082015250565b620006a781620005aa565b8114620006b357600080fd5b50565b620006c181620005de565b8114620006cd57600080fd5b50565b6148e180620006e06000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c80637ecebe0011610145578063a9059cbb116100bd578063e54420261161008c578063ed24911d11610071578063ed24911d14610722578063ef55bec614610740578063f147389f1461075c57610241565b8063e5442026146106c2578063e94a0102146106f257610241565b8063a9059cbb1461062a578063d505accf1461065a578063dd62ed3e14610676578063e3ee160e146106a657610241565b806395d89b41116101145780639e4e7318116100f95780639e4e7318146105be578063a0cc6a68146105dc578063a457c2d7146105fa57610241565b806395d89b41146105705780639dc29fac1461058e57610241565b80637ecebe00146104e65780637f2eecc314610516578063892b0edf14610534578063941acc491461055257610241565b806330adf81f116101d85780633dae1a3a116101a75780634c9e91a41161018c5780634c9e91a41461047a57806370a082311461049857806376c71ca1146104c857610241565b80633dae1a3a1461041a57806340c10f191461044a57610241565b806330adf81f14610390578063313ce567146103ae5780633644e515146103cc57806339509351146103ea57610241565b806318160ddd1161021457806318160ddd146102e2578063191250d7146103005780631d4f80721461033057806323b872dd1461036057610241565b8063055c6e191461024657806306fdde0314610264578063095ea7b314610282578063124cc077146102b2575b600080fd5b61024e61077a565b60405161025b9190613a70565b60405180910390f35b61026c610781565b60405161027991906136b3565b60405180910390f35b61029c60048036038101906102979190612e25565b61080f565b6040516102a99190613515565b60405180910390f35b6102cc60048036038101906102c79190612bd1565b610826565b6040516102d99190613515565b60405180910390f35b6102ea61097e565b6040516102f79190613a55565b60405180910390f35b61031a60048036038101906103159190612bd1565b610984565b6040516103279190613515565b60405180910390f35b61034a60048036038101906103459190612ecd565b610adc565b6040516103579190613515565b60405180910390f35b61037a60048036038101906103759190612c36565b610c36565b6040516103879190613515565b60405180910390f35b610398610e4f565b6040516103a59190613530565b60405180910390f35b6103b6610e76565b6040516103c39190613a8b565b60405180910390f35b6103d4610e7b565b6040516103e19190613530565b60405180910390f35b61040460048036038101906103ff9190612e25565b610ea2565b6040516104119190613515565b60405180910390f35b610434600480360381019061042f9190612ecd565b610eb9565b6040516104419190613515565b60405180910390f35b610464600480360381019061045f9190612e25565b610fc1565b6040516104719190613515565b60405180910390f35b6104826111bc565b60405161048f91906134fa565b60405180910390f35b6104b260048036038101906104ad9190612bd1565b6111e2565b6040516104bf9190613a55565b60405180910390f35b6104d061122b565b6040516104dd9190613a70565b60405180910390f35b61050060048036038101906104fb9190612bd1565b611241565b60405161050d9190613a55565b60405180910390f35b61051e611259565b60405161052b9190613530565b60405180910390f35b61053c611280565b6040516105499190613a55565b60405180910390f35b61055a611286565b6040516105679190613a70565b60405180910390f35b61057861129c565b60405161058591906136b3565b60405180910390f35b6105a860048036038101906105a39190612e25565b61132a565b6040516105b59190613515565b60405180910390f35b6105c66116b0565b6040516105d39190613530565b60405180910390f35b6105e46116d7565b6040516105f19190613530565b60405180910390f35b610614600480360381019061060f9190612e25565b6116fe565b6040516106219190613515565b60405180910390f35b610644600480360381019061063f9190612e25565b611715565b6040516106519190613515565b60405180910390f35b610674600480360381019061066f9190612d4b565b61172c565b005b610690600480360381019061068b9190612bfa565b61183c565b60405161069d9190613a55565b60405180910390f35b6106c060048036038101906106bb9190612c85565b6118c3565b005b6106dc60048036038101906106d79190612e61565b611b10565b6040516106e99190613515565b60405180910390f35b61070c60048036038101906107079190612de9565b611c34565b6040516107199190613515565b60405180910390f35b61072a611c63565b6040516107379190613530565b60405180910390f35b61075a60048036038101906107559190612c85565b611cfc565b005b610764611fb7565b60405161077191906134fa565b60405180910390f35b6276a70081565b6000805461078e90613cea565b80601f01602080910402602001604051908101604052809291908181526020018280546107ba90613cea565b80156108075780601f106107dc57610100808354040283529160200191610807565b820191906000526020600020905b8154815290600101906020018083116107ea57829003601f168201915b505050505081565b600061081c338484611fdd565b6001905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108af90613975565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f65e484da94d3a093b70b54f45dda42146a4e7f7f6507a09e39f67ca388987d3e60405160405180910390a381600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60025481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0d906137d5565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f0cff5c8e2b1e51135595ff4ebaefab9ef5b26373c3b84cbdc4677bb41468843b60405160405180910390a381600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6590613715565b60405180910390fd5b6276a70063ffffffff168263ffffffff161015610bc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb7906139d5565b60405180910390fd5b8163ffffffff16600660009054906101000a900463ffffffff1663ffffffff167f769f3176a8ee46ae63681a1a630bec4772f7af23a4eeec90eaff41a0e8f1ac6960405160405180910390a381600660006101000a81548163ffffffff021916908363ffffffff16021790555060019050919050565b6000803390506000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610d1957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610e37576000610d4d8560405180606001604052806035815260200161481660359139846121a89092919063ffffffff16565b905080600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610e2d9190613a55565b60405180910390a3505b610e428686866121fd565b6001925050509392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b81565b6000610eaf338484612414565b6001905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4290613875565b60405180910390fd5b8163ffffffff16600660049054906101000a900463ffffffff1663ffffffff167f07eb9b533f3e24039e5e8ce76234bdd34aefc224c0d4e44662ac75aa9b0f5c0160405160405180910390a381600660046101000a81548163ffffffff021916908363ffffffff16021790555060019050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104a90613995565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156110c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ba906139f5565b60405180910390fd5b620f4240600660049054906101000a900463ffffffff1663ffffffff166002546110ed9190613bdf565b6110f79190613bae565b821115611139576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611130906139b5565b60405180910390fd5b60055442101561117e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611175906137b5565b60405180910390fd5b600660009054906101000a900463ffffffff1663ffffffff16426111a29190613b58565b6005819055506111b283836124ab565b6001905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660049054906101000a900463ffffffff1681565b60096020528060005260406000206000915090505481565b7fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de860001b81565b60055481565b600660009054906101000a900463ffffffff1681565b600180546112a990613cea565b80601f01602080910402602001604051908101604052809291908181526020018280546112d590613cea565b80156113225780601f106112f757610100808354040283529160200191611322565b820191906000526020600020905b81548152906001019060200180831161130557829003601f168201915b505050505081565b600080339050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146113c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b790613a15565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611430576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611427906138f5565b60405180910390fd5b600554421015611475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146c90613755565b60405180910390fd5b6000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415801561155257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15611670576000611586856040518060600160405280602981526020016147b560299139846121a89092919063ffffffff16565b905080600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516116669190613a55565b60405180910390a3505b600660009054906101000a900463ffffffff1663ffffffff16426116949190613b58565b6005819055506116a485856125b7565b60019250505092915050565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b81565b7f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226760001b81565b600061170b338484612705565b6001905092915050565b60006117223384846121fd565b6001905092915050565b4284101561176f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176690613795565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b888888600960008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906117e890613d4d565b91905055896040516020016118029695949392919061354b565b60405160208183030381529060405280519060200120905061182788828686866127bd565b611832888888611fdd565b5050505050505050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b854211611905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fc90613895565b60405180910390fd5b844210611947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193e906138b5565b60405180910390fd5b600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff16156119e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119dc90613955565b60405180910390fd5b60007f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226760001b8a8a8a8a8a8a604051602001611a2797969594939291906135ac565b604051602081830303815290604052805190602001209050611a4c8a828686866127bd565b6001600a60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548160ff021916908315150217905550848a73ffffffffffffffffffffffffffffffffffffffff167f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a560405160405180910390a3611b048a8a8a6121fd565b50505050505050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ba2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9990613775565b60405180910390fd5b8260009080519060200190611bb8929190612a5d565b508160019080519060200190611bcf929190612a5d565b506001604051611bdf91906134ac565b60405180910390206000604051611bf691906134ac565b60405180910390207febb95b1e6f8658c3f6a1f6f59a9bea23721d47f22a69339010082475f7db6b2c60405160405180910390a36001905092915050565b600a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051611c989190613495565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b611ccc612892565b30604051602001611ce195949392919061361b565b60405160208183030381529060405280519060200120905090565b3373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614611d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6190613935565b60405180910390fd5b854211611dac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da3906137f5565b60405180910390fd5b844210611dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de5906138d5565b60405180910390fd5b600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff1615611e8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8390613815565b60405180910390fd5b60007fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de860001b8a8a8a8a8a8a604051602001611ece97969594939291906135ac565b604051602081830303815290604052805190602001209050611ef38a828686866127bd565b6001600a60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548160ff021916908315150217905550848a73ffffffffffffffffffffffffffffffffffffffff167f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a560405160405180910390a3611fab8a8a8a6121fd565b50505050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561204d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612044906136f5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156120bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b490613a35565b60405180910390fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161219b9190613a55565b60405180910390a3505050565b60008383111582906121f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e791906136b3565b60405180910390fd5b5082840390509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561226d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226490613735565b60405180910390fd5b6122d98160405180606001604052806034815260200161484b60349139600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121a89092919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123679190613b58565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516124079190613a55565b60405180910390a3505050565b6124a6838383600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124a19190613b58565b611fdd565b505050565b806002546124b99190613b58565b60028190555080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461250a9190613b58565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516125ab9190613a55565b60405180910390a35050565b612623816040518060600160405280602d815260200161487f602d9139600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121a89092919063ffffffff16565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612695816040518060600160405280602d8152602001614788602d91396002546121a89092919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516126f99190613a55565b60405180910390a35050565b6127b883836127b3846040518060600160405280603881526020016147de60389139600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121a89092919063ffffffff16565b611fdd565b505050565b60006127d06127ca611c63565b8661289f565b905060006127e0828686866128d2565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561284a57508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288090613855565b60405180910390fd5b50505050505050565b6000804690508091505090565b600082826040516020016128b49291906134c3565b60405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c111561293a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293190613835565b60405180910390fd5b601b8460ff16148061294f5750601c8460ff16145b61298e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298590613915565b60405180910390fd5b6000600186868686604051600081526020016040526040516129b3949392919061366e565b6020604051602081039080840390855afa1580156129d5573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a48906136d5565b60405180910390fd5b80915050949350505050565b828054612a6990613cea565b90600052602060002090601f016020900481019282612a8b5760008555612ad2565b82601f10612aa457805160ff1916838001178555612ad2565b82800160010185558215612ad2579182015b82811115612ad1578251825591602001919060010190612ab6565b5b509050612adf9190612ae3565b5090565b5b80821115612afc576000816000905550600101612ae4565b5090565b6000612b13612b0e84613acb565b613aa6565b905082815260208101848484011115612b2b57600080fd5b612b36848285613ca8565b509392505050565b600081359050612b4d81614714565b92915050565b600081359050612b628161472b565b92915050565b600082601f830112612b7957600080fd5b8135612b89848260208601612b00565b91505092915050565b600081359050612ba181614742565b92915050565b600081359050612bb681614759565b92915050565b600081359050612bcb81614770565b92915050565b600060208284031215612be357600080fd5b6000612bf184828501612b3e565b91505092915050565b60008060408385031215612c0d57600080fd5b6000612c1b85828601612b3e565b9250506020612c2c85828601612b3e565b9150509250929050565b600080600060608486031215612c4b57600080fd5b6000612c5986828701612b3e565b9350506020612c6a86828701612b3e565b9250506040612c7b86828701612b92565b9150509250925092565b60008060008060008060008060006101208a8c031215612ca457600080fd5b6000612cb28c828d01612b3e565b9950506020612cc38c828d01612b3e565b9850506040612cd48c828d01612b92565b9750506060612ce58c828d01612b92565b9650506080612cf68c828d01612b92565b95505060a0612d078c828d01612b53565b94505060c0612d188c828d01612bbc565b93505060e0612d298c828d01612b53565b925050610100612d3b8c828d01612b53565b9150509295985092959850929598565b600080600080600080600060e0888a031215612d6657600080fd5b6000612d748a828b01612b3e565b9750506020612d858a828b01612b3e565b9650506040612d968a828b01612b92565b9550506060612da78a828b01612b92565b9450506080612db88a828b01612bbc565b93505060a0612dc98a828b01612b53565b92505060c0612dda8a828b01612b53565b91505092959891949750929550565b60008060408385031215612dfc57600080fd5b6000612e0a85828601612b3e565b9250506020612e1b85828601612b53565b9150509250929050565b60008060408385031215612e3857600080fd5b6000612e4685828601612b3e565b9250506020612e5785828601612b92565b9150509250929050565b60008060408385031215612e7457600080fd5b600083013567ffffffffffffffff811115612e8e57600080fd5b612e9a85828601612b68565b925050602083013567ffffffffffffffff811115612eb757600080fd5b612ec385828601612b68565b9150509250929050565b600060208284031215612edf57600080fd5b6000612eed84828501612ba7565b91505092915050565b612eff81613c39565b82525050565b612f0e81613c4b565b82525050565b612f1d81613c57565b82525050565b612f34612f2f82613c57565b613d96565b82525050565b60008154612f4781613cea565b612f518186613b31565b94506001821660008114612f6c5760018114612f7d57612fb0565b60ff19831686528186019350612fb0565b612f8685613afc565b60005b83811015612fa857815481890152600182019150602081019050612f89565b838801955050505b50505092915050565b6000612fc482613b26565b612fce8185613b3c565b9350612fde818560208601613cb7565b612fe781613e5c565b840191505092915050565b60008154612fff81613cea565b6130098186613b4d565b94506001821660008114613024576001811461303557613068565b60ff19831686528186019350613068565b61303e85613b11565b60005b8381101561306057815481890152600182019150602081019050613041565b838801955050505b50505092915050565b600061307e601883613b3c565b915061308982613e6d565b602082019050919050565b60006130a1602d83613b3c565b91506130ac82613e96565b604082019050919050565b60006130c4604583613b3c565b91506130cf82613ee5565b606082019050919050565b60006130e7603a83613b3c565b91506130f282613f5a565b604082019050919050565b600061310a602383613b3c565b915061311582613fa9565b604082019050919050565b600061312d603883613b3c565b915061313882613ff8565b604082019050919050565b6000613150601f83613b3c565b915061315b82614047565b602082019050919050565b6000613173600283613b4d565b915061317e82614070565b600282019050919050565b6000613196602383613b3c565b91506131a182614099565b604082019050919050565b60006131b9602d83613b3c565b91506131c4826140e8565b604082019050919050565b60006131dc602983613b3c565b91506131e782614137565b604082019050919050565b60006131ff602883613b3c565b915061320a82614186565b604082019050919050565b6000613222602283613b3c565b915061322d826141d5565b604082019050919050565b6000613245602483613b3c565b915061325082614224565b604082019050919050565b6000613268602d83613b3c565b915061327382614273565b604082019050919050565b600061328b602a83613b3c565b9150613296826142c2565b604082019050919050565b60006132ae602483613b3c565b91506132b982614311565b604082019050919050565b60006132d1602383613b3c565b91506132dc82614360565b604082019050919050565b60006132f4603183613b3c565b91506132ff826143af565b604082019050919050565b6000613317602283613b3c565b9150613322826143fe565b604082019050919050565b600061333a602f83613b3c565b91506133458261444d565b604082019050919050565b600061335d602983613b3c565b91506133688261449c565b604082019050919050565b6000613380602f83613b3c565b915061338b826144eb565b604082019050919050565b60006133a3602b83613b3c565b91506133ae8261453a565b604082019050919050565b60006133c6601d83613b3c565b91506133d182614589565b602082019050919050565b60006133e9604483613b3c565b91506133f4826145b2565b606082019050919050565b600061340c602f83613b3c565b915061341782614627565b604082019050919050565b600061342f602b83613b3c565b915061343a82614676565b604082019050919050565b6000613452602b83613b3c565b915061345d826146c5565b604082019050919050565b61347181613c81565b82525050565b61348081613c8b565b82525050565b61348f81613c9b565b82525050565b60006134a18284612f3a565b915081905092915050565b60006134b88284612ff2565b915081905092915050565b60006134ce82613166565b91506134da8285612f23565b6020820191506134ea8284612f23565b6020820191508190509392505050565b600060208201905061350f6000830184612ef6565b92915050565b600060208201905061352a6000830184612f05565b92915050565b60006020820190506135456000830184612f14565b92915050565b600060c0820190506135606000830189612f14565b61356d6020830188612ef6565b61357a6040830187612ef6565b6135876060830186613468565b6135946080830185613468565b6135a160a0830184613468565b979650505050505050565b600060e0820190506135c1600083018a612f14565b6135ce6020830189612ef6565b6135db6040830188612ef6565b6135e86060830187613468565b6135f56080830186613468565b61360260a0830185613468565b61360f60c0830184612f14565b98975050505050505050565b600060a0820190506136306000830188612f14565b61363d6020830187612f14565b61364a6040830186612f14565b6136576060830185613468565b6136646080830184612ef6565b9695505050505050565b60006080820190506136836000830187612f14565b6136906020830186613486565b61369d6040830185612f14565b6136aa6060830184612f14565b95945050505050565b600060208201905081810360008301526136cd8184612fb9565b905092915050565b600060208201905081810360008301526136ee81613071565b9050919050565b6000602082019050818103600083015261370e81613094565b9050919050565b6000602082019050818103600083015261372e816130b7565b9050919050565b6000602082019050818103600083015261374e816130da565b9050919050565b6000602082019050818103600083015261376e816130fd565b9050919050565b6000602082019050818103600083015261378e81613120565b9050919050565b600060208201905081810360008301526137ae81613143565b9050919050565b600060208201905081810360008301526137ce81613189565b9050919050565b600060208201905081810360008301526137ee816131ac565b9050919050565b6000602082019050818103600083015261380e816131cf565b9050919050565b6000602082019050818103600083015261382e816131f2565b9050919050565b6000602082019050818103600083015261384e81613215565b9050919050565b6000602082019050818103600083015261386e81613238565b9050919050565b6000602082019050818103600083015261388e8161325b565b9050919050565b600060208201905081810360008301526138ae8161327e565b9050919050565b600060208201905081810360008301526138ce816132a1565b9050919050565b600060208201905081810360008301526138ee816132c4565b9050919050565b6000602082019050818103600083015261390e816132e7565b9050919050565b6000602082019050818103600083015261392e8161330a565b9050919050565b6000602082019050818103600083015261394e8161332d565b9050919050565b6000602082019050818103600083015261396e81613350565b9050919050565b6000602082019050818103600083015261398e81613373565b9050919050565b600060208201905081810360008301526139ae81613396565b9050919050565b600060208201905081810360008301526139ce816133b9565b9050919050565b600060208201905081810360008301526139ee816133dc565b9050919050565b60006020820190508181036000830152613a0e816133ff565b9050919050565b60006020820190508181036000830152613a2e81613422565b9050919050565b60006020820190508181036000830152613a4e81613445565b9050919050565b6000602082019050613a6a6000830184613468565b92915050565b6000602082019050613a856000830184613477565b92915050565b6000602082019050613aa06000830184613486565b92915050565b6000613ab0613ac1565b9050613abc8282613d1c565b919050565b6000604051905090565b600067ffffffffffffffff821115613ae657613ae5613e2d565b5b613aef82613e5c565b9050602081019050919050565b60008190508160005260206000209050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000613b6382613c81565b9150613b6e83613c81565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ba357613ba2613da0565b5b828201905092915050565b6000613bb982613c81565b9150613bc483613c81565b925082613bd457613bd3613dcf565b5b828204905092915050565b6000613bea82613c81565b9150613bf583613c81565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613c2e57613c2d613da0565b5b828202905092915050565b6000613c4482613c61565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613cd5578082015181840152602081019050613cba565b83811115613ce4576000848401525b50505050565b60006002820490506001821680613d0257607f821691505b60208210811415613d1657613d15613dfe565b5b50919050565b613d2582613e5c565b810181811067ffffffffffffffff82111715613d4457613d43613e2d565b5b80604052505050565b6000613d5882613c81565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d8b57613d8a613da0565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f4b494e473a3a5f617070726f76653a20617070726f76652066726f6d2074686560008201527f207a65726f206164647265737300000000000000000000000000000000000000602082015250565b7f4b494e473a3a736574537570706c794368616e676557616974696e675065726960008201527f6f643a206f6e6c7920534d2063616e206368616e67652077616974696e67207060208201527f6572696f64000000000000000000000000000000000000000000000000000000604082015250565b7f4b494e473a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747260008201527f616e7366657220746f20746865207a65726f2061646472657373000000000000602082015250565b7f4b494e473a3a6275726e3a206275726e696e67206e6f7420616c6c6f7765642060008201527f7965740000000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a757064617465546f6b656e4d6574613a206f6e6c79204d4d206360008201527f616e2075706461746520746f6b656e206d657461646174610000000000000000602082015250565b7f4b494e473a3a7065726d69743a207369676e6174757265206578706972656400600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f4b494e473a3a6d696e743a206d696e74696e67206e6f7420616c6c6f7765642060008201527f7965740000000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a736574537570706c794d616e616765723a206f6e6c7920534d2060008201527f63616e206368616e676520534d00000000000000000000000000000000000000602082015250565b7f4b494e473a3a7265636569766557697468417574683a2061757468206e6f742060008201527f7965742076616c69640000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7265636569766557697468417574683a206175746820616c726560008201527f6164792075736564000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a76616c69646174655369673a20696e76616c6964207369676e6160008201527f7475726500000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7365744d696e744361703a206f6e6c7920534d2063616e20636860008201527f616e6765206d696e742063617000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7472616e7366657257697468417574683a2061757468206e6f7460008201527f207965742076616c696400000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7472616e7366657257697468417574683a20617574682065787060008201527f6972656400000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7265636569766557697468417574683a2061757468206578706960008201527f7265640000000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a6275726e3a2063616e6e6f74207472616e736665722066726f6d60008201527f20746865207a65726f2061646472657373000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7265636569766557697468417574683a2063616c6c6572206d7560008201527f7374206265207468652070617965650000000000000000000000000000000000602082015250565b7f4b494e473a3a7472616e7366657257697468417574683a206175746820616c7260008201527f6561647920757365640000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7365744d657461646174614d616e616765723a206f6e6c79204d60008201527f4d2063616e206368616e6765204d4d0000000000000000000000000000000000602082015250565b7f4b494e473a3a6d696e743a206f6e6c792074686520737570706c794d616e616760008201527f65722063616e206d696e74000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a6d696e743a206578636565646564206d696e7420636170000000600082015250565b7f4b494e473a3a736574537570706c794368616e676557616974696e675065726960008201527f6f643a2077616974696e6720706572696f64206d757374206265203e206d696e60208201527f696d756d00000000000000000000000000000000000000000000000000000000604082015250565b7f4b494e473a3a6d696e743a2063616e6e6f74207472616e7366657220746f207460008201527f6865207a65726f20616464726573730000000000000000000000000000000000602082015250565b7f4b494e473a3a6275726e3a206f6e6c792074686520737570706c794d616e616760008201527f65722063616e206275726e000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a5f617070726f76653a20617070726f766520746f20746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b61471d81613c39565b811461472857600080fd5b50565b61473481613c57565b811461473f57600080fd5b50565b61474b81613c81565b811461475657600080fd5b50565b61476281613c8b565b811461476d57600080fd5b50565b61477981613c9b565b811461478457600080fd5b5056fe4b494e473a3a5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c794b494e473a3a6275726e3a206275726e20616d6f756e74206578636565647320616c6c6f77616e63654b494e473a3a5f6465637265617365416c6c6f77616e63653a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f4b494e473a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654b494e473a3a5f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e63654b494e473a3a5f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e6365a2646970667358221220ab89d75d54bd72ea159c39356463d73a778d139178fd092d6cf839b0ba417c3264736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102415760003560e01c80637ecebe0011610145578063a9059cbb116100bd578063e54420261161008c578063ed24911d11610071578063ed24911d14610722578063ef55bec614610740578063f147389f1461075c57610241565b8063e5442026146106c2578063e94a0102146106f257610241565b8063a9059cbb1461062a578063d505accf1461065a578063dd62ed3e14610676578063e3ee160e146106a657610241565b806395d89b41116101145780639e4e7318116100f95780639e4e7318146105be578063a0cc6a68146105dc578063a457c2d7146105fa57610241565b806395d89b41146105705780639dc29fac1461058e57610241565b80637ecebe00146104e65780637f2eecc314610516578063892b0edf14610534578063941acc491461055257610241565b806330adf81f116101d85780633dae1a3a116101a75780634c9e91a41161018c5780634c9e91a41461047a57806370a082311461049857806376c71ca1146104c857610241565b80633dae1a3a1461041a57806340c10f191461044a57610241565b806330adf81f14610390578063313ce567146103ae5780633644e515146103cc57806339509351146103ea57610241565b806318160ddd1161021457806318160ddd146102e2578063191250d7146103005780631d4f80721461033057806323b872dd1461036057610241565b8063055c6e191461024657806306fdde0314610264578063095ea7b314610282578063124cc077146102b2575b600080fd5b61024e61077a565b60405161025b9190613a70565b60405180910390f35b61026c610781565b60405161027991906136b3565b60405180910390f35b61029c60048036038101906102979190612e25565b61080f565b6040516102a99190613515565b60405180910390f35b6102cc60048036038101906102c79190612bd1565b610826565b6040516102d99190613515565b60405180910390f35b6102ea61097e565b6040516102f79190613a55565b60405180910390f35b61031a60048036038101906103159190612bd1565b610984565b6040516103279190613515565b60405180910390f35b61034a60048036038101906103459190612ecd565b610adc565b6040516103579190613515565b60405180910390f35b61037a60048036038101906103759190612c36565b610c36565b6040516103879190613515565b60405180910390f35b610398610e4f565b6040516103a59190613530565b60405180910390f35b6103b6610e76565b6040516103c39190613a8b565b60405180910390f35b6103d4610e7b565b6040516103e19190613530565b60405180910390f35b61040460048036038101906103ff9190612e25565b610ea2565b6040516104119190613515565b60405180910390f35b610434600480360381019061042f9190612ecd565b610eb9565b6040516104419190613515565b60405180910390f35b610464600480360381019061045f9190612e25565b610fc1565b6040516104719190613515565b60405180910390f35b6104826111bc565b60405161048f91906134fa565b60405180910390f35b6104b260048036038101906104ad9190612bd1565b6111e2565b6040516104bf9190613a55565b60405180910390f35b6104d061122b565b6040516104dd9190613a70565b60405180910390f35b61050060048036038101906104fb9190612bd1565b611241565b60405161050d9190613a55565b60405180910390f35b61051e611259565b60405161052b9190613530565b60405180910390f35b61053c611280565b6040516105499190613a55565b60405180910390f35b61055a611286565b6040516105679190613a70565b60405180910390f35b61057861129c565b60405161058591906136b3565b60405180910390f35b6105a860048036038101906105a39190612e25565b61132a565b6040516105b59190613515565b60405180910390f35b6105c66116b0565b6040516105d39190613530565b60405180910390f35b6105e46116d7565b6040516105f19190613530565b60405180910390f35b610614600480360381019061060f9190612e25565b6116fe565b6040516106219190613515565b60405180910390f35b610644600480360381019061063f9190612e25565b611715565b6040516106519190613515565b60405180910390f35b610674600480360381019061066f9190612d4b565b61172c565b005b610690600480360381019061068b9190612bfa565b61183c565b60405161069d9190613a55565b60405180910390f35b6106c060048036038101906106bb9190612c85565b6118c3565b005b6106dc60048036038101906106d79190612e61565b611b10565b6040516106e99190613515565b60405180910390f35b61070c60048036038101906107079190612de9565b611c34565b6040516107199190613515565b60405180910390f35b61072a611c63565b6040516107379190613530565b60405180910390f35b61075a60048036038101906107559190612c85565b611cfc565b005b610764611fb7565b60405161077191906134fa565b60405180910390f35b6276a70081565b6000805461078e90613cea565b80601f01602080910402602001604051908101604052809291908181526020018280546107ba90613cea565b80156108075780601f106107dc57610100808354040283529160200191610807565b820191906000526020600020905b8154815290600101906020018083116107ea57829003601f168201915b505050505081565b600061081c338484611fdd565b6001905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108af90613975565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f65e484da94d3a093b70b54f45dda42146a4e7f7f6507a09e39f67ca388987d3e60405160405180910390a381600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60025481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0d906137d5565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f0cff5c8e2b1e51135595ff4ebaefab9ef5b26373c3b84cbdc4677bb41468843b60405160405180910390a381600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6590613715565b60405180910390fd5b6276a70063ffffffff168263ffffffff161015610bc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb7906139d5565b60405180910390fd5b8163ffffffff16600660009054906101000a900463ffffffff1663ffffffff167f769f3176a8ee46ae63681a1a630bec4772f7af23a4eeec90eaff41a0e8f1ac6960405160405180910390a381600660006101000a81548163ffffffff021916908363ffffffff16021790555060019050919050565b6000803390506000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610d1957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610e37576000610d4d8560405180606001604052806035815260200161481660359139846121a89092919063ffffffff16565b905080600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610e2d9190613a55565b60405180910390a3505b610e428686866121fd565b6001925050509392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b81565b6000610eaf338484612414565b6001905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4290613875565b60405180910390fd5b8163ffffffff16600660049054906101000a900463ffffffff1663ffffffff167f07eb9b533f3e24039e5e8ce76234bdd34aefc224c0d4e44662ac75aa9b0f5c0160405160405180910390a381600660046101000a81548163ffffffff021916908363ffffffff16021790555060019050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104a90613995565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156110c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ba906139f5565b60405180910390fd5b620f4240600660049054906101000a900463ffffffff1663ffffffff166002546110ed9190613bdf565b6110f79190613bae565b821115611139576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611130906139b5565b60405180910390fd5b60055442101561117e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611175906137b5565b60405180910390fd5b600660009054906101000a900463ffffffff1663ffffffff16426111a29190613b58565b6005819055506111b283836124ab565b6001905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660049054906101000a900463ffffffff1681565b60096020528060005260406000206000915090505481565b7fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de860001b81565b60055481565b600660009054906101000a900463ffffffff1681565b600180546112a990613cea565b80601f01602080910402602001604051908101604052809291908181526020018280546112d590613cea565b80156113225780601f106112f757610100808354040283529160200191611322565b820191906000526020600020905b81548152906001019060200180831161130557829003601f168201915b505050505081565b600080339050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146113c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b790613a15565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611430576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611427906138f5565b60405180910390fd5b600554421015611475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146c90613755565b60405180910390fd5b6000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415801561155257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15611670576000611586856040518060600160405280602981526020016147b560299139846121a89092919063ffffffff16565b905080600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516116669190613a55565b60405180910390a3505b600660009054906101000a900463ffffffff1663ffffffff16426116949190613b58565b6005819055506116a485856125b7565b60019250505092915050565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b81565b7f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226760001b81565b600061170b338484612705565b6001905092915050565b60006117223384846121fd565b6001905092915050565b4284101561176f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176690613795565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b888888600960008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906117e890613d4d565b91905055896040516020016118029695949392919061354b565b60405160208183030381529060405280519060200120905061182788828686866127bd565b611832888888611fdd565b5050505050505050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b854211611905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fc90613895565b60405180910390fd5b844210611947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193e906138b5565b60405180910390fd5b600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff16156119e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119dc90613955565b60405180910390fd5b60007f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226760001b8a8a8a8a8a8a604051602001611a2797969594939291906135ac565b604051602081830303815290604052805190602001209050611a4c8a828686866127bd565b6001600a60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548160ff021916908315150217905550848a73ffffffffffffffffffffffffffffffffffffffff167f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a560405160405180910390a3611b048a8a8a6121fd565b50505050505050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ba2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9990613775565b60405180910390fd5b8260009080519060200190611bb8929190612a5d565b508160019080519060200190611bcf929190612a5d565b506001604051611bdf91906134ac565b60405180910390206000604051611bf691906134ac565b60405180910390207febb95b1e6f8658c3f6a1f6f59a9bea23721d47f22a69339010082475f7db6b2c60405160405180910390a36001905092915050565b600a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051611c989190613495565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b611ccc612892565b30604051602001611ce195949392919061361b565b60405160208183030381529060405280519060200120905090565b3373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614611d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6190613935565b60405180910390fd5b854211611dac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da3906137f5565b60405180910390fd5b844210611dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de5906138d5565b60405180910390fd5b600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff1615611e8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8390613815565b60405180910390fd5b60007fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de860001b8a8a8a8a8a8a604051602001611ece97969594939291906135ac565b604051602081830303815290604052805190602001209050611ef38a828686866127bd565b6001600a60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548160ff021916908315150217905550848a73ffffffffffffffffffffffffffffffffffffffff167f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a560405160405180910390a3611fab8a8a8a6121fd565b50505050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561204d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612044906136f5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156120bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b490613a35565b60405180910390fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161219b9190613a55565b60405180910390a3505050565b60008383111582906121f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e791906136b3565b60405180910390fd5b5082840390509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561226d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226490613735565b60405180910390fd5b6122d98160405180606001604052806034815260200161484b60349139600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121a89092919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123679190613b58565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516124079190613a55565b60405180910390a3505050565b6124a6838383600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124a19190613b58565b611fdd565b505050565b806002546124b99190613b58565b60028190555080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461250a9190613b58565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516125ab9190613a55565b60405180910390a35050565b612623816040518060600160405280602d815260200161487f602d9139600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121a89092919063ffffffff16565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612695816040518060600160405280602d8152602001614788602d91396002546121a89092919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516126f99190613a55565b60405180910390a35050565b6127b883836127b3846040518060600160405280603881526020016147de60389139600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121a89092919063ffffffff16565b611fdd565b505050565b60006127d06127ca611c63565b8661289f565b905060006127e0828686866128d2565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561284a57508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288090613855565b60405180910390fd5b50505050505050565b6000804690508091505090565b600082826040516020016128b49291906134c3565b60405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c111561293a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293190613835565b60405180910390fd5b601b8460ff16148061294f5750601c8460ff16145b61298e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298590613915565b60405180910390fd5b6000600186868686604051600081526020016040526040516129b3949392919061366e565b6020604051602081039080840390855afa1580156129d5573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a48906136d5565b60405180910390fd5b80915050949350505050565b828054612a6990613cea565b90600052602060002090601f016020900481019282612a8b5760008555612ad2565b82601f10612aa457805160ff1916838001178555612ad2565b82800160010185558215612ad2579182015b82811115612ad1578251825591602001919060010190612ab6565b5b509050612adf9190612ae3565b5090565b5b80821115612afc576000816000905550600101612ae4565b5090565b6000612b13612b0e84613acb565b613aa6565b905082815260208101848484011115612b2b57600080fd5b612b36848285613ca8565b509392505050565b600081359050612b4d81614714565b92915050565b600081359050612b628161472b565b92915050565b600082601f830112612b7957600080fd5b8135612b89848260208601612b00565b91505092915050565b600081359050612ba181614742565b92915050565b600081359050612bb681614759565b92915050565b600081359050612bcb81614770565b92915050565b600060208284031215612be357600080fd5b6000612bf184828501612b3e565b91505092915050565b60008060408385031215612c0d57600080fd5b6000612c1b85828601612b3e565b9250506020612c2c85828601612b3e565b9150509250929050565b600080600060608486031215612c4b57600080fd5b6000612c5986828701612b3e565b9350506020612c6a86828701612b3e565b9250506040612c7b86828701612b92565b9150509250925092565b60008060008060008060008060006101208a8c031215612ca457600080fd5b6000612cb28c828d01612b3e565b9950506020612cc38c828d01612b3e565b9850506040612cd48c828d01612b92565b9750506060612ce58c828d01612b92565b9650506080612cf68c828d01612b92565b95505060a0612d078c828d01612b53565b94505060c0612d188c828d01612bbc565b93505060e0612d298c828d01612b53565b925050610100612d3b8c828d01612b53565b9150509295985092959850929598565b600080600080600080600060e0888a031215612d6657600080fd5b6000612d748a828b01612b3e565b9750506020612d858a828b01612b3e565b9650506040612d968a828b01612b92565b9550506060612da78a828b01612b92565b9450506080612db88a828b01612bbc565b93505060a0612dc98a828b01612b53565b92505060c0612dda8a828b01612b53565b91505092959891949750929550565b60008060408385031215612dfc57600080fd5b6000612e0a85828601612b3e565b9250506020612e1b85828601612b53565b9150509250929050565b60008060408385031215612e3857600080fd5b6000612e4685828601612b3e565b9250506020612e5785828601612b92565b9150509250929050565b60008060408385031215612e7457600080fd5b600083013567ffffffffffffffff811115612e8e57600080fd5b612e9a85828601612b68565b925050602083013567ffffffffffffffff811115612eb757600080fd5b612ec385828601612b68565b9150509250929050565b600060208284031215612edf57600080fd5b6000612eed84828501612ba7565b91505092915050565b612eff81613c39565b82525050565b612f0e81613c4b565b82525050565b612f1d81613c57565b82525050565b612f34612f2f82613c57565b613d96565b82525050565b60008154612f4781613cea565b612f518186613b31565b94506001821660008114612f6c5760018114612f7d57612fb0565b60ff19831686528186019350612fb0565b612f8685613afc565b60005b83811015612fa857815481890152600182019150602081019050612f89565b838801955050505b50505092915050565b6000612fc482613b26565b612fce8185613b3c565b9350612fde818560208601613cb7565b612fe781613e5c565b840191505092915050565b60008154612fff81613cea565b6130098186613b4d565b94506001821660008114613024576001811461303557613068565b60ff19831686528186019350613068565b61303e85613b11565b60005b8381101561306057815481890152600182019150602081019050613041565b838801955050505b50505092915050565b600061307e601883613b3c565b915061308982613e6d565b602082019050919050565b60006130a1602d83613b3c565b91506130ac82613e96565b604082019050919050565b60006130c4604583613b3c565b91506130cf82613ee5565b606082019050919050565b60006130e7603a83613b3c565b91506130f282613f5a565b604082019050919050565b600061310a602383613b3c565b915061311582613fa9565b604082019050919050565b600061312d603883613b3c565b915061313882613ff8565b604082019050919050565b6000613150601f83613b3c565b915061315b82614047565b602082019050919050565b6000613173600283613b4d565b915061317e82614070565b600282019050919050565b6000613196602383613b3c565b91506131a182614099565b604082019050919050565b60006131b9602d83613b3c565b91506131c4826140e8565b604082019050919050565b60006131dc602983613b3c565b91506131e782614137565b604082019050919050565b60006131ff602883613b3c565b915061320a82614186565b604082019050919050565b6000613222602283613b3c565b915061322d826141d5565b604082019050919050565b6000613245602483613b3c565b915061325082614224565b604082019050919050565b6000613268602d83613b3c565b915061327382614273565b604082019050919050565b600061328b602a83613b3c565b9150613296826142c2565b604082019050919050565b60006132ae602483613b3c565b91506132b982614311565b604082019050919050565b60006132d1602383613b3c565b91506132dc82614360565b604082019050919050565b60006132f4603183613b3c565b91506132ff826143af565b604082019050919050565b6000613317602283613b3c565b9150613322826143fe565b604082019050919050565b600061333a602f83613b3c565b91506133458261444d565b604082019050919050565b600061335d602983613b3c565b91506133688261449c565b604082019050919050565b6000613380602f83613b3c565b915061338b826144eb565b604082019050919050565b60006133a3602b83613b3c565b91506133ae8261453a565b604082019050919050565b60006133c6601d83613b3c565b91506133d182614589565b602082019050919050565b60006133e9604483613b3c565b91506133f4826145b2565b606082019050919050565b600061340c602f83613b3c565b915061341782614627565b604082019050919050565b600061342f602b83613b3c565b915061343a82614676565b604082019050919050565b6000613452602b83613b3c565b915061345d826146c5565b604082019050919050565b61347181613c81565b82525050565b61348081613c8b565b82525050565b61348f81613c9b565b82525050565b60006134a18284612f3a565b915081905092915050565b60006134b88284612ff2565b915081905092915050565b60006134ce82613166565b91506134da8285612f23565b6020820191506134ea8284612f23565b6020820191508190509392505050565b600060208201905061350f6000830184612ef6565b92915050565b600060208201905061352a6000830184612f05565b92915050565b60006020820190506135456000830184612f14565b92915050565b600060c0820190506135606000830189612f14565b61356d6020830188612ef6565b61357a6040830187612ef6565b6135876060830186613468565b6135946080830185613468565b6135a160a0830184613468565b979650505050505050565b600060e0820190506135c1600083018a612f14565b6135ce6020830189612ef6565b6135db6040830188612ef6565b6135e86060830187613468565b6135f56080830186613468565b61360260a0830185613468565b61360f60c0830184612f14565b98975050505050505050565b600060a0820190506136306000830188612f14565b61363d6020830187612f14565b61364a6040830186612f14565b6136576060830185613468565b6136646080830184612ef6565b9695505050505050565b60006080820190506136836000830187612f14565b6136906020830186613486565b61369d6040830185612f14565b6136aa6060830184612f14565b95945050505050565b600060208201905081810360008301526136cd8184612fb9565b905092915050565b600060208201905081810360008301526136ee81613071565b9050919050565b6000602082019050818103600083015261370e81613094565b9050919050565b6000602082019050818103600083015261372e816130b7565b9050919050565b6000602082019050818103600083015261374e816130da565b9050919050565b6000602082019050818103600083015261376e816130fd565b9050919050565b6000602082019050818103600083015261378e81613120565b9050919050565b600060208201905081810360008301526137ae81613143565b9050919050565b600060208201905081810360008301526137ce81613189565b9050919050565b600060208201905081810360008301526137ee816131ac565b9050919050565b6000602082019050818103600083015261380e816131cf565b9050919050565b6000602082019050818103600083015261382e816131f2565b9050919050565b6000602082019050818103600083015261384e81613215565b9050919050565b6000602082019050818103600083015261386e81613238565b9050919050565b6000602082019050818103600083015261388e8161325b565b9050919050565b600060208201905081810360008301526138ae8161327e565b9050919050565b600060208201905081810360008301526138ce816132a1565b9050919050565b600060208201905081810360008301526138ee816132c4565b9050919050565b6000602082019050818103600083015261390e816132e7565b9050919050565b6000602082019050818103600083015261392e8161330a565b9050919050565b6000602082019050818103600083015261394e8161332d565b9050919050565b6000602082019050818103600083015261396e81613350565b9050919050565b6000602082019050818103600083015261398e81613373565b9050919050565b600060208201905081810360008301526139ae81613396565b9050919050565b600060208201905081810360008301526139ce816133b9565b9050919050565b600060208201905081810360008301526139ee816133dc565b9050919050565b60006020820190508181036000830152613a0e816133ff565b9050919050565b60006020820190508181036000830152613a2e81613422565b9050919050565b60006020820190508181036000830152613a4e81613445565b9050919050565b6000602082019050613a6a6000830184613468565b92915050565b6000602082019050613a856000830184613477565b92915050565b6000602082019050613aa06000830184613486565b92915050565b6000613ab0613ac1565b9050613abc8282613d1c565b919050565b6000604051905090565b600067ffffffffffffffff821115613ae657613ae5613e2d565b5b613aef82613e5c565b9050602081019050919050565b60008190508160005260206000209050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000613b6382613c81565b9150613b6e83613c81565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ba357613ba2613da0565b5b828201905092915050565b6000613bb982613c81565b9150613bc483613c81565b925082613bd457613bd3613dcf565b5b828204905092915050565b6000613bea82613c81565b9150613bf583613c81565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613c2e57613c2d613da0565b5b828202905092915050565b6000613c4482613c61565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613cd5578082015181840152602081019050613cba565b83811115613ce4576000848401525b50505050565b60006002820490506001821680613d0257607f821691505b60208210811415613d1657613d15613dfe565b5b50919050565b613d2582613e5c565b810181811067ffffffffffffffff82111715613d4457613d43613e2d565b5b80604052505050565b6000613d5882613c81565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d8b57613d8a613da0565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f4b494e473a3a5f617070726f76653a20617070726f76652066726f6d2074686560008201527f207a65726f206164647265737300000000000000000000000000000000000000602082015250565b7f4b494e473a3a736574537570706c794368616e676557616974696e675065726960008201527f6f643a206f6e6c7920534d2063616e206368616e67652077616974696e67207060208201527f6572696f64000000000000000000000000000000000000000000000000000000604082015250565b7f4b494e473a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747260008201527f616e7366657220746f20746865207a65726f2061646472657373000000000000602082015250565b7f4b494e473a3a6275726e3a206275726e696e67206e6f7420616c6c6f7765642060008201527f7965740000000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a757064617465546f6b656e4d6574613a206f6e6c79204d4d206360008201527f616e2075706461746520746f6b656e206d657461646174610000000000000000602082015250565b7f4b494e473a3a7065726d69743a207369676e6174757265206578706972656400600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f4b494e473a3a6d696e743a206d696e74696e67206e6f7420616c6c6f7765642060008201527f7965740000000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a736574537570706c794d616e616765723a206f6e6c7920534d2060008201527f63616e206368616e676520534d00000000000000000000000000000000000000602082015250565b7f4b494e473a3a7265636569766557697468417574683a2061757468206e6f742060008201527f7965742076616c69640000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7265636569766557697468417574683a206175746820616c726560008201527f6164792075736564000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a76616c69646174655369673a20696e76616c6964207369676e6160008201527f7475726500000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7365744d696e744361703a206f6e6c7920534d2063616e20636860008201527f616e6765206d696e742063617000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7472616e7366657257697468417574683a2061757468206e6f7460008201527f207965742076616c696400000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7472616e7366657257697468417574683a20617574682065787060008201527f6972656400000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7265636569766557697468417574683a2061757468206578706960008201527f7265640000000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a6275726e3a2063616e6e6f74207472616e736665722066726f6d60008201527f20746865207a65726f2061646472657373000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7265636569766557697468417574683a2063616c6c6572206d7560008201527f7374206265207468652070617965650000000000000000000000000000000000602082015250565b7f4b494e473a3a7472616e7366657257697468417574683a206175746820616c7260008201527f6561647920757365640000000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a7365744d657461646174614d616e616765723a206f6e6c79204d60008201527f4d2063616e206368616e6765204d4d0000000000000000000000000000000000602082015250565b7f4b494e473a3a6d696e743a206f6e6c792074686520737570706c794d616e616760008201527f65722063616e206d696e74000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a6d696e743a206578636565646564206d696e7420636170000000600082015250565b7f4b494e473a3a736574537570706c794368616e676557616974696e675065726960008201527f6f643a2077616974696e6720706572696f64206d757374206265203e206d696e60208201527f696d756d00000000000000000000000000000000000000000000000000000000604082015250565b7f4b494e473a3a6d696e743a2063616e6e6f74207472616e7366657220746f207460008201527f6865207a65726f20616464726573730000000000000000000000000000000000602082015250565b7f4b494e473a3a6275726e3a206f6e6c792074686520737570706c794d616e616760008201527f65722063616e206275726e000000000000000000000000000000000000000000602082015250565b7f4b494e473a3a5f617070726f76653a20617070726f766520746f20746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b61471d81613c39565b811461472857600080fd5b50565b61473481613c57565b811461473f57600080fd5b50565b61474b81613c81565b811461475657600080fd5b50565b61476281613c8b565b811461476d57600080fd5b50565b61477981613c9b565b811461478457600080fd5b5056fe4b494e473a3a5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c794b494e473a3a6275726e3a206275726e20616d6f756e74206578636565647320616c6c6f77616e63654b494e473a3a5f6465637265617365416c6c6f77616e63653a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f4b494e473a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654b494e473a3a5f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e63654b494e473a3a5f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e6365a2646970667358221220ab89d75d54bd72ea159c39356463d73a778d139178fd092d6cf839b0ba417c3264736f6c63430008020033",
  "devdoc": {
    "details": "The governance token for the Kingmaker protocol",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "burn(address,uint256)": {
        "params": {
          "amount": "The number of tokens to be burned",
          "src": "The account that will burn tokens"
        },
        "returns": {
          "_0": "Boolean indicating success of burn"
        }
      },
      "constructor": {
        "params": {
          "_firstSupplyChangeAllowed": "The timestamp after which the first supply change may occur",
          "_metadataManager": "The address with the ability to alter the token metadata",
          "_supplyManager": "The address with the ability to mint more tokens"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "params": {
          "spender": "Spender's address",
          "subtractedValue": "Amount of decrease in allowance"
        },
        "returns": {
          "_0": "True if successful"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "increaseAllowance(address,uint256)": {
        "params": {
          "addedValue": "Amount of increase in allowance",
          "spender": "Spender's address"
        },
        "returns": {
          "_0": "True if successful"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "amount": "The number of tokens to be minted",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Boolean indicating success of mint"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "details": "This has an additional check to ensure that the payee's address matches the caller of this function to prevent front-running attacks.",
        "params": {
          "from": "Payer's address (Authorizer)",
          "nonce": "Unique nonce",
          "r": "r of the signature",
          "s": "s of the signature",
          "to": "Payee's address",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount to be transferred"
        }
      },
      "setMetadataManager(address)": {
        "params": {
          "newMetadataManager": "The address of the new metadata manager"
        },
        "returns": {
          "_0": "true if successful"
        }
      },
      "setMintCap(uint32)": {
        "params": {
          "newCap": "The new mint cap in bips (10,000 bips = 1% of totalSupply)"
        },
        "returns": {
          "_0": "true if successful"
        }
      },
      "setSupplyChangeWaitingPeriod(uint32)": {
        "params": {
          "period": "The new supply change waiting period"
        },
        "returns": {
          "_0": "true if succssful"
        }
      },
      "setSupplyManager(address)": {
        "params": {
          "newSupplyManager": "The address of the new supply manager"
        },
        "returns": {
          "_0": "true if successful"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "from": "Payer's address (Authorizer)",
          "nonce": "Unique nonce",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "to": "Payee's address",
          "v": "The recovery byte of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount to be transferred"
        }
      },
      "updateTokenMetadata(string,string)": {
        "params": {
          "tokenName": "The new name for the token",
          "tokenSymbol": "The new symbol for the token"
        },
        "returns": {
          "_0": "true if successful"
        }
      }
    },
    "stateVariables": {
      "allowances": {
        "details": "Allowance amounts on behalf of others"
      },
      "authorizationState": {
        "details": "authorizer address > nonce > state (true = used / false = unused)"
      },
      "balances": {
        "details": "Official record of token balances for each account"
      }
    },
    "title": "KING",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AuthorizationUsed(address,bytes32)": {
        "notice": "An event that's emitted whenever an authorized transfer occurs"
      },
      "MetadataManagerChanged(address,address)": {
        "notice": "An event that's emitted when the metadataManager address is changed"
      },
      "MintCapChanged(uint32,uint32)": {
        "notice": "An event that's emitted when the mintCap is changed"
      },
      "SupplyChangeWaitingPeriodChanged(uint32,uint32)": {
        "notice": "An event that's emitted when the supplyChangeWaitingPeriod is changed"
      },
      "SupplyManagerChanged(address,address)": {
        "notice": "An event that's emitted when the supplyManager address is changed"
      },
      "TokenMetaUpdated(string,string)": {
        "notice": "An event that's emitted when the token name and symbol are changed"
      }
    },
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "The EIP-712 typehash for the contract's domain keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "The EIP-712 typehash for permit (EIP-2612) keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");"
      },
      "RECEIVE_WITH_AUTHORIZATION_TYPEHASH()": {
        "notice": "keccak256(\"ReceiveWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\")"
      },
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()": {
        "notice": "keccak256(\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\");"
      },
      "VERSION_HASH()": {
        "notice": "The EIP-712 version hash keccak256(\"1\");"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "burn(address,uint256)": {
        "notice": "Burn tokens"
      },
      "constructor": {
        "notice": "Construct a new KING token"
      },
      "decimals()": {
        "notice": "EIP-20 token decimals for this token"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Decrease the allowance by a given amount"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Increase the allowance by a given amount"
      },
      "metadataManager()": {
        "notice": "Address which may change token metadata"
      },
      "mint(address,uint256)": {
        "notice": "Mint new tokens"
      },
      "mintCap()": {
        "notice": "Cap on the total amount that can be minted at each mint (measured in bips: 10,000 bips = 1% of current totalSupply)"
      },
      "name()": {
        "notice": "EIP-20 token name for this token"
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Receive a transfer with a signed authorization from the payer"
      },
      "setMetadataManager(address)": {
        "notice": "Change the metadataManager address"
      },
      "setMintCap(uint32)": {
        "notice": "Set the maximum amount of tokens that can be minted at once"
      },
      "setSupplyChangeWaitingPeriod(uint32)": {
        "notice": "Set the minimum time between supply changes"
      },
      "setSupplyManager(address)": {
        "notice": "Change the supplyManager address"
      },
      "supplyChangeAllowedAfter()": {
        "notice": "The timestamp after which a supply change may occur"
      },
      "supplyChangeWaitingPeriod()": {
        "notice": "The initial minimum waiting time for changing the token supply"
      },
      "supplyChangeWaitingPeriodMinimum()": {
        "notice": "Hard cap on the minimum waiting time for changing the token supply"
      },
      "supplyManager()": {
        "notice": "Address which may mint/burn tokens"
      },
      "symbol()": {
        "notice": "EIP-20 token symbol for this token"
      },
      "totalSupply()": {
        "notice": "Total number of tokens in circulation"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Transfer tokens with a signed authorization"
      },
      "updateTokenMetadata(string,string)": {
        "notice": "Update the token name and symbol"
      }
    },
    "notice": "ERC-20 with supply controls + add-ons to allow for offchain signing (see EIP-712, EIP-2612, and EIP-3009)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 580,
        "contract": "contracts/governance/KING.sol:KING",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 585,
        "contract": "contracts/governance/KING.sol:KING",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 595,
        "contract": "contracts/governance/KING.sol:KING",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 599,
        "contract": "contracts/governance/KING.sol:KING",
        "label": "supplyManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 603,
        "contract": "contracts/governance/KING.sol:KING",
        "label": "metadataManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 607,
        "contract": "contracts/governance/KING.sol:KING",
        "label": "supplyChangeAllowedAfter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 614,
        "contract": "contracts/governance/KING.sol:KING",
        "label": "supplyChangeWaitingPeriod",
        "offset": 0,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 626,
        "contract": "contracts/governance/KING.sol:KING",
        "label": "mintCap",
        "offset": 4,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 633,
        "contract": "contracts/governance/KING.sol:KING",
        "label": "allowances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 638,
        "contract": "contracts/governance/KING.sol:KING",
        "label": "balances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 665,
        "contract": "contracts/governance/KING.sol:KING",
        "label": "nonces",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 672,
        "contract": "contracts/governance/KING.sol:KING",
        "label": "authorizationState",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}