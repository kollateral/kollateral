{
  "address": "0x02a87b08Ef24A1c3D3198BBb488c05fF6aE16F75",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facetAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "facetAddresses_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "facetFunctionSelectors_",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "facets_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd28dd46c0ef8a769613804422e8b759cde090d930ae147d5d31219716cfdf770",
  "receipt": {
    "to": null,
    "from": "0xfEeDc0DE1EBE0A72f52590Df786101e1c3944545",
    "contractAddress": "0x02a87b08Ef24A1c3D3198BBb488c05fF6aE16F75",
    "transactionIndex": 2,
    "gasUsed": "726637",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x098a461d196aa7d290dc661756520ea4bcd676f140d2b4f7191e8cdee24cf287",
    "transactionHash": "0xd28dd46c0ef8a769613804422e8b759cde090d930ae147d5d31219716cfdf770",
    "logs": [],
    "blockNumber": 23694373,
    "cumulativeGasUsed": "854063",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c07a6e35bcea225e414aa9a698302f39",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"facetAddress(bytes4)\":{\"details\":\"If facet is not found return address(0).\",\"params\":{\"_functionSelector\":\"The function selector.\"},\"returns\":{\"facetAddress_\":\"The facet address.\"}},\"facetAddresses()\":{\"returns\":{\"facetAddresses_\":\"facetAddresses_\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"_facet\":\"The facet address.\"},\"returns\":{\"facetFunctionSelectors_\":\"facetFunctionSelectors_\"}},\"facets()\":{\"returns\":{\"facets_\":\"Facet\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"facetAddress(bytes4)\":{\"notice\":\"Gets the facet that supports the given selector.\"},\"facetAddresses()\":{\"notice\":\"Get all the facet addresses used by a diamond.\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors provided by a facet.\"},\"facets()\":{\"notice\":\"Gets all facets and their selectors.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/DiamondLoupeFacet.sol\":\"DiamondLoupeFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/facets/DiamondLoupeFacet.sol\":{\"content\":\"/*\\n\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* Contributors: [ lepidotteri, ]\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../libraries/diamond/LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/diamond/IDiamondCut.sol\\\";\\nimport \\\"../interfaces/diamond/IDiamondLoupe.sol\\\";\\nimport \\\"../interfaces/introspection/IERC165.sol\\\";\\n\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\n\\t/// @notice Gets all facets and their selectors.\\n\\t/// @return facets_ Facet\\n\\tfunction facets() external view override returns (Facet[] memory facets_) {\\n\\t\\tLibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\t\\tuint256 numFacets = ds.facetAddresses.length;\\n\\t\\tfacets_ = new Facet[](numFacets);\\n\\t\\tfor (uint256 i; i < numFacets; i++) {\\n\\t\\t\\taddress facetAddress_ = ds.facetAddresses[i];\\n\\t\\t\\tfacets_[i].facetAddress = facetAddress_;\\n\\t\\t\\tfacets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress_].functionSelectors;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Gets all the function selectors provided by a facet.\\n\\t/// @param _facet The facet address.\\n\\t/// @return facetFunctionSelectors_\\n\\tfunction facetFunctionSelectors(address _facet)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (bytes4[] memory facetFunctionSelectors_)\\n\\t{\\n\\t\\tLibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\t\\tfacetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\\n\\t}\\n\\n\\t/// @notice Get all the facet addresses used by a diamond.\\n\\t/// @return facetAddresses_\\n\\tfunction facetAddresses() external view override returns (address[] memory facetAddresses_) {\\n\\t\\tLibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\t\\tfacetAddresses_ = ds.facetAddresses;\\n\\t}\\n\\n\\t/// @notice Gets the facet that supports the given selector.\\n\\t/// @dev If facet is not found return address(0).\\n\\t/// @param _functionSelector The function selector.\\n\\t/// @return facetAddress_ The facet address.\\n\\tfunction facetAddress(bytes4 _functionSelector) external view override returns (address facetAddress_) {\\n\\t\\tLibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\t\\tfacetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\\n\\t}\\n\\n\\t// This implements ERC-165.\\n\\tfunction supportsInterface(bytes4 _interfaceId) external view override returns (bool) {\\n\\t\\tLibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n\\t\\treturn ds.supportedInterfaces[_interfaceId];\\n\\t}\\n}\\n\",\"keccak256\":\"0xe561b94bdc8be3b988e233934f5e2beb01a9a671906984ef98bac3debea83ed7\",\"license\":\"MIT\"},\"contracts/interfaces/diamond/IDiamondCut.sol\":{\"content\":\"/*\\n\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n/**\\n * A cut is a powerful cutter used to alter diamonds.\\n */\\ninterface IDiamondCut {\\n\\tenum FacetCutAction { Add, Replace, Remove }\\n\\t// Add=0, Replace=1, Remove=2\\n\\n\\tstruct FacetCut {\\n\\t\\taddress facetAddress;\\n\\t\\tFacetCutAction action;\\n\\t\\tbytes4[] functionSelectors;\\n\\t}\\n\\n\\t/// @notice Add/replace/remove any number of functions and optionally execute\\n\\t///         a function with delegatecall\\n\\t/// @param _diamondCut Contains the facet addresses and function selectors\\n\\t/// @param _init The address of the contract or facet to execute _calldata\\n\\t/// @param _calldata A function call, including function selector and arguments\\n\\t///                  _calldata is executed with delegatecall on _init\\n\\tfunction diamondCut(\\n\\t\\tFacetCut[] calldata _diamondCut,\\n\\t\\taddress _init,\\n\\t\\tbytes calldata _calldata\\n\\t) external;\\n\\n\\tevent DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc47c05cd8e91fc42a5e98411e1b6d0bd5b7f03ac9177d3235645ea1df58e9673\",\"license\":\"MIT\"},\"contracts/interfaces/diamond/IDiamondLoupe.sol\":{\"content\":\"/*\\n\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n/**\\n * A loupe is a small magnifying glass used to look at diamonds.\\n */\\ninterface IDiamondLoupe {\\n\\t/// These functions are expected to be called frequently by off-chain code.\\n\\t/// (and almost never by on-chain code)\\n\\tstruct Facet {\\n\\t\\taddress facetAddress;\\n\\t\\tbytes4[] functionSelectors;\\n\\t}\\n\\n\\t/// @notice Gets all facet addresses and their four byte function selectors.\\n\\t/// @return facets_ Facet\\n\\tfunction facets() external view returns (Facet[] memory facets_);\\n\\n\\t/// @notice Gets all the function selectors supported by a specific facet.\\n\\t/// @param _facet The facet address.\\n\\t/// @return facetFunctionSelectors_\\n\\tfunction facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n\\t/// @notice Get all the facet addresses used by a diamond.\\n\\t/// @return facetAddresses_\\n\\tfunction facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n\\t/// @notice Gets the facet that supports the given selector.\\n\\t/// @dev If facet is not found return address(0).\\n\\t/// @param _functionSelector The function selector.\\n\\t/// @return facetAddress_ The facet address.\\n\\tfunction facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x787c0a34d727d01c82011477430595212e8ffb952383c18c3a74327e8dfa6aa5\",\"license\":\"MIT\"},\"contracts/interfaces/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n\\t/**\\n\\t * @dev Returns true if this contract implements the interface defined by\\n\\t * `interfaceId`. See the corresponding\\n\\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n\\t * to learn more about how these ids are created.\\n\\t *\\n\\t * This function call must use less than 30 000 gas.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x47fb51ba47a6f1dd885afda05a6d11d7f6bb24d594dbfaa4411c5185c202265e\",\"license\":\"MIT\"},\"contracts/libraries/diamond/LibDiamondStorage.sol\":{\"content\":\"/*\\n\\n\\tCopyright 2020 Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nlibrary LibDiamondStorage {\\n\\tbytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n\\tstruct FacetAddressAndPosition {\\n\\t\\taddress facetAddress;\\n\\t\\tuint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n\\t}\\n\\n\\tstruct FacetFunctionSelectors {\\n\\t\\tbytes4[] functionSelectors;\\n\\t\\tuint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n\\t}\\n\\n\\tstruct DiamondStorage {\\n\\t\\t// maps function selector to the facet address and\\n\\t\\t// the position of the selector in the facetFunctionSelectors.selectors array\\n\\t\\tmapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n\\t\\t// maps facet addresses to function selectors\\n\\t\\tmapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n\\t\\t// facet addresses\\n\\t\\taddress[] facetAddresses;\\n\\t\\t// Used to query if a contract implements an interface.\\n\\t\\t// Used to implement ERC-165.\\n\\t\\tmapping(bytes4 => bool) supportedInterfaces;\\n\\t\\t// owner of the contract\\n\\t\\taddress contractOwner;\\n\\t}\\n\\n\\tfunction diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n\\t\\tbytes32 position = DIAMOND_STORAGE_POSITION;\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := position\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x1466ca90168235908d437b25fea95ed5a579bbab3cf217ad77a3e273779d4b99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c3a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c57806352ef6b2c1461008c5780637a0ed627146100aa578063adfca15e146100c8578063cdffacc6146100f8575b600080fd5b6100766004803603810190610071919061071d565b610128565b6040516100839190610a13565b60405180910390f35b61009461019e565b6040516100a191906109ad565b60405180910390f35b6100b261023b565b6040516100bf91906109f1565b60405180910390f35b6100e260048036038101906100dd91906106f4565b6104f6565b6040516100ef91906109cf565b60405180910390f35b610112600480360381019061010d919061071d565b6105e1565b60405161011f9190610992565b60405180910390f35b60008061013361066d565b9050806003016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16915050919050565b606060006101aa61066d565b90508060020180548060200260200160405190810160405280929190818152602001828054801561023057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116101e6575b505050505091505090565b6060600061024761066d565b90506000816002018054905090508067ffffffffffffffff811115610295577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156102ce57816020015b6102bb61069a565b8152602001906001900390816102b35790505b50925060005b818110156104f057600083600201828154811061031a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080858381518110610381577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561048f57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161043c5790505b50505050508583815181106104cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001819052505080806104e890610b5e565b9150506102d4565b50505090565b6060600061050261066d565b90508060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054806020026020016040519081016040528092919081815260200182805480156105d457602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116105815790505b5050505050915050919050565b6000806105ec61066d565b9050806000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6000813590506106d981610bd6565b92915050565b6000813590506106ee81610bed565b92915050565b60006020828403121561070657600080fd5b6000610714848285016106ca565b91505092915050565b60006020828403121561072f57600080fd5b600061073d848285016106df565b91505092915050565b6000610752838361078a565b60208301905092915050565b600061076a8383610946565b60208301905092915050565b60006107828383610955565b905092915050565b61079381610aea565b82525050565b6107a281610aea565b82525050565b60006107b382610a5e565b6107bd8185610aa6565b93506107c883610a2e565b8060005b838110156107f95781516107e08882610746565b97506107eb83610a7f565b9250506001810190506107cc565b5085935050505092915050565b600061081182610a69565b61081b8185610ab7565b935061082683610a3e565b8060005b8381101561085757815161083e888261075e565b975061084983610a8c565b92505060018101905061082a565b5085935050505092915050565b600061086f82610a69565b6108798185610ac8565b935061088483610a3e565b8060005b838110156108b557815161089c888261075e565b97506108a783610a8c565b925050600181019050610888565b5085935050505092915050565b60006108cd82610a74565b6108d78185610ad9565b9350836020820285016108e985610a4e565b8060005b8581101561092557848403895281516109068582610776565b945061091183610a99565b925060208a019950506001810190506108ed565b50829750879550505050505092915050565b61094081610afc565b82525050565b61094f81610b08565b82525050565b600060408301600083015161096d600086018261078a565b50602083015184820360208601526109858282610806565b9150508091505092915050565b60006020820190506109a76000830184610799565b92915050565b600060208201905081810360008301526109c781846107a8565b905092915050565b600060208201905081810360008301526109e98184610864565b905092915050565b60006020820190508181036000830152610a0b81846108c2565b905092915050565b6000602082019050610a286000830184610937565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610af582610b34565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b6982610b54565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b9c57610b9b610ba7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b610bdf81610aea565b8114610bea57600080fd5b50565b610bf681610b08565b8114610c0157600080fd5b5056fea2646970667358221220ff368f2b78200d29bbc0f0d4598ea1d15d6860d48ec297484f5f398a49a2cb2e64736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c57806352ef6b2c1461008c5780637a0ed627146100aa578063adfca15e146100c8578063cdffacc6146100f8575b600080fd5b6100766004803603810190610071919061071d565b610128565b6040516100839190610a13565b60405180910390f35b61009461019e565b6040516100a191906109ad565b60405180910390f35b6100b261023b565b6040516100bf91906109f1565b60405180910390f35b6100e260048036038101906100dd91906106f4565b6104f6565b6040516100ef91906109cf565b60405180910390f35b610112600480360381019061010d919061071d565b6105e1565b60405161011f9190610992565b60405180910390f35b60008061013361066d565b9050806003016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16915050919050565b606060006101aa61066d565b90508060020180548060200260200160405190810160405280929190818152602001828054801561023057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116101e6575b505050505091505090565b6060600061024761066d565b90506000816002018054905090508067ffffffffffffffff811115610295577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156102ce57816020015b6102bb61069a565b8152602001906001900390816102b35790505b50925060005b818110156104f057600083600201828154811061031a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080858381518110610381577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561048f57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161043c5790505b50505050508583815181106104cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001819052505080806104e890610b5e565b9150506102d4565b50505090565b6060600061050261066d565b90508060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054806020026020016040519081016040528092919081815260200182805480156105d457602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116105815790505b5050505050915050919050565b6000806105ec61066d565b9050806000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6000813590506106d981610bd6565b92915050565b6000813590506106ee81610bed565b92915050565b60006020828403121561070657600080fd5b6000610714848285016106ca565b91505092915050565b60006020828403121561072f57600080fd5b600061073d848285016106df565b91505092915050565b6000610752838361078a565b60208301905092915050565b600061076a8383610946565b60208301905092915050565b60006107828383610955565b905092915050565b61079381610aea565b82525050565b6107a281610aea565b82525050565b60006107b382610a5e565b6107bd8185610aa6565b93506107c883610a2e565b8060005b838110156107f95781516107e08882610746565b97506107eb83610a7f565b9250506001810190506107cc565b5085935050505092915050565b600061081182610a69565b61081b8185610ab7565b935061082683610a3e565b8060005b8381101561085757815161083e888261075e565b975061084983610a8c565b92505060018101905061082a565b5085935050505092915050565b600061086f82610a69565b6108798185610ac8565b935061088483610a3e565b8060005b838110156108b557815161089c888261075e565b97506108a783610a8c565b925050600181019050610888565b5085935050505092915050565b60006108cd82610a74565b6108d78185610ad9565b9350836020820285016108e985610a4e565b8060005b8581101561092557848403895281516109068582610776565b945061091183610a99565b925060208a019950506001810190506108ed565b50829750879550505050505092915050565b61094081610afc565b82525050565b61094f81610b08565b82525050565b600060408301600083015161096d600086018261078a565b50602083015184820360208601526109858282610806565b9150508091505092915050565b60006020820190506109a76000830184610799565b92915050565b600060208201905081810360008301526109c781846107a8565b905092915050565b600060208201905081810360008301526109e98184610864565b905092915050565b60006020820190508181036000830152610a0b81846108c2565b905092915050565b6000602082019050610a286000830184610937565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610af582610b34565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b6982610b54565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b9c57610b9b610ba7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b610bdf81610aea565b8114610bea57600080fd5b50565b610bf681610b08565b8114610c0157600080fd5b5056fea2646970667358221220ff368f2b78200d29bbc0f0d4598ea1d15d6860d48ec297484f5f398a49a2cb2e64736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "facetAddress(bytes4)": {
        "details": "If facet is not found return address(0).",
        "params": {
          "_functionSelector": "The function selector."
        },
        "returns": {
          "facetAddress_": "The facet address."
        }
      },
      "facetAddresses()": {
        "returns": {
          "facetAddresses_": "facetAddresses_"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "_facet": "The facet address."
        },
        "returns": {
          "facetFunctionSelectors_": "facetFunctionSelectors_"
        }
      },
      "facets()": {
        "returns": {
          "facets_": "Facet"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "facetAddress(bytes4)": {
        "notice": "Gets the facet that supports the given selector."
      },
      "facetAddresses()": {
        "notice": "Get all the facet addresses used by a diamond."
      },
      "facetFunctionSelectors(address)": {
        "notice": "Gets all the function selectors provided by a facet."
      },
      "facets()": {
        "notice": "Gets all facets and their selectors."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}