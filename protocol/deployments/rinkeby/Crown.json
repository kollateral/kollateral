{
  "address": "0x460EF112Cb639fE756Eb287e49E1aDFAbc514241",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldKing",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newKing",
          "type": "address"
        }
      ],
      "name": "RoyalSuccession",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "VotingPowerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addVotingPowerForLockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addVotingPowerForVestingTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PrismProxy",
          "name": "prism",
          "type": "address"
        }
      ],
      "name": "become",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        }
      ],
      "name": "getAmountStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getGovernanceTokenAmountStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getGovernanceTokenStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct CrownStake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct CrownStake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_govToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vestingContract",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeVotingPowerForClaimedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeVotingPowerForUnlockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLockManager",
          "type": "address"
        }
      ],
      "name": "setLockManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setTokenRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "stakeWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newKing",
          "type": "address"
        }
      ],
      "name": "succeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "votingPowerOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "votingPowerOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e8f1b5b1fb400d60b488d88b242453d24b1d1dd1c9a253fb828efe5398ff13e",
  "receipt": {
    "to": null,
    "from": "0xfEeDc0DE1EBE0A72f52590Df786101e1c3944545",
    "contractAddress": "0x460EF112Cb639fE756Eb287e49E1aDFAbc514241",
    "transactionIndex": 3,
    "gasUsed": "4437166",
    "logsBloom": "0x
    "blockHash": "0x78d8856f08970123047d5a39b5d8fc791e90531fa81c045424473d6cf915b75a",
    "transactionHash": "0x8e8f1b5b1fb400d60b488d88b242453d24b1d1dd1c9a253fb828efe5398ff13e",
    "logs": [],
    "blockNumber": 8229058,
    "cumulativeGasUsed": "4705687",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e885469200b403bc2af39246669116fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.92b52cbf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldKing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newKing\",\"type\":\"address\"}],\"name\":\"RoyalSuccession\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"VotingPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVotingPowerForLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVotingPowerForVestingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PrismProxy\",\"name\":\"prism\",\"type\":\"address\"}],\"name\":\"become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"getAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getGovernanceTokenAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getGovernanceTokenStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct CrownStake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct CrownStake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeVotingPowerForClaimedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeVotingPowerForUnlockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLockManager\",\"type\":\"address\"}],\"name\":\"setLockManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setTokenRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newKing\",\"type\":\"address\"}],\"name\":\"succeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votingPowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"votingPowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation contract for voting power prism proxy. Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract. The exception to this is the `become` function specified in PrismProxyImplementation. This function is called once and is used by this contract to accept its role as the implementation for the prism proxy\",\"kind\":\"dev\",\"methods\":{\"addVotingPowerForLockedTokens(address,uint256)\":{\"params\":{\"account\":\"The recipient of voting power\",\"amount\":\"The amount of voting power to add\"}},\"addVotingPowerForVestingTokens(address,uint256)\":{\"params\":{\"account\":\"The recipient of voting power\",\"amount\":\"The amount of voting power to add\"}},\"become(address)\":{\"params\":{\"prism\":\"Prism Proxy contract\"}},\"getAmountStaked(address,address)\":{\"params\":{\"stakedToken\":\"The staked token\",\"staker\":\"The user with staked tokens\"},\"returns\":{\"_0\":\"total amount staked\"}},\"getGovernanceTokenAmountStaked(address)\":{\"params\":{\"staker\":\"The user with staked KING\"},\"returns\":{\"_0\":\"total KING amount staked\"}},\"getGovernanceTokenStake(address)\":{\"params\":{\"staker\":\"The user with staked KING\"},\"returns\":{\"_0\":\"total KING staked\"}},\"getStake(address,address)\":{\"params\":{\"stakedToken\":\"The staked token\",\"staker\":\"The user with staked tokens\"},\"returns\":{\"_0\":\"total staked\"}},\"govToken()\":{\"returns\":{\"_0\":\"Address of KING token\"}},\"initialize(address,address)\":{\"details\":\"Should be called via VotingPowerPrism before calling anything else\",\"params\":{\"_govToken\":\"address of KING token\",\"_vestingContract\":\"address of Vesting contract\"}},\"lockManager()\":{\"returns\":{\"_0\":\"Address of lockManager\"}},\"owner()\":{\"returns\":{\"_0\":\"Address of owner\"}},\"removeVotingPowerForClaimedTokens(address,uint256)\":{\"params\":{\"account\":\"The account with voting power\",\"amount\":\"The amount of voting power to remove\"}},\"removeVotingPowerForUnlockedTokens(address,uint256)\":{\"params\":{\"account\":\"The account with voting power\",\"amount\":\"The amount of voting power to remove\"}},\"setLockManager(address)\":{\"params\":{\"newLockManager\":\"Address of lockManager\"}},\"setTokenRegistry(address)\":{\"params\":{\"registry\":\"Address of token registry\"}},\"stake(address,uint256)\":{\"params\":{\"amount\":\"The amount to stake\",\"token\":\"The token to stake\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"The amount to stake\"}},\"stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"The amount to stake\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"succeed(address)\":{\"params\":{\"newKing\":\"New owner address\"}},\"tokenRegistry()\":{\"returns\":{\"_0\":\"Address of token registry\"}},\"vestingContract()\":{\"returns\":{\"_0\":\"Address of vesting contract\"}},\"votingDecimals()\":{\"returns\":{\"_0\":\"decimals\"}},\"votingPowerOf(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"votingPowerOfAt(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\",\"token\":\"The token to withdraw\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\"}}},\"title\":\"CrownCourt (prev. VotingPower)\",\"version\":1},\"userdoc\":{\"events\":{\"RoyalSuccession(address,address)\":{\"notice\":\"Event emitted when the owner of the voting power contract is updated\"},\"Staked(address,address,uint256,uint256)\":{\"notice\":\"An event that's emitted when a user's staked balance increases\"},\"VotingPowerChanged(address,uint256,uint256)\":{\"notice\":\"An event that's emitted when an account's vote balance changes\"},\"Withdrawn(address,address,uint256,uint256)\":{\"notice\":\"An event that's emitted when a user's staked balance decreases\"}},\"kind\":\"user\",\"methods\":{\"addVotingPowerForLockedTokens(address,uint256)\":{\"notice\":\"Count locked tokens toward voting power for `account`\"},\"addVotingPowerForVestingTokens(address,uint256)\":{\"notice\":\"Count vesting KING tokens toward voting power for `account`\"},\"become(address)\":{\"notice\":\"Accept invitation to be implementation contract for proxy\"},\"getAmountStaked(address,address)\":{\"notice\":\"Get total amount of tokens staked in contract by `staker`\"},\"getGovernanceTokenAmountStaked(address)\":{\"notice\":\"Get total amount of KING tokens staked in contract by `staker`\"},\"getGovernanceTokenStake(address)\":{\"notice\":\"Get staked amount and voting power from KING tokens staked in contract by `staker`\"},\"getStake(address,address)\":{\"notice\":\"Get total staked amount and voting power from `stakedToken` staked in contract by `staker`\"},\"govToken()\":{\"notice\":\"Address of KING token\"},\"initialize(address,address)\":{\"notice\":\"Initialize VotingPower contract\"},\"lockManager()\":{\"notice\":\"Address of lockManager\"},\"owner()\":{\"notice\":\"Address of owner\"},\"removeVotingPowerForClaimedTokens(address,uint256)\":{\"notice\":\"Remove claimed vesting KING tokens from voting power for `account`\"},\"removeVotingPowerForUnlockedTokens(address,uint256)\":{\"notice\":\"Remove unlocked tokens from voting power for `account`\"},\"setLockManager(address)\":{\"notice\":\"Sets lockManager address\"},\"setTokenRegistry(address)\":{\"notice\":\"Sets token registry address\"},\"stake(address,uint256)\":{\"notice\":\"Stake LP tokens to unlock voting power for `msg.sender`\"},\"stake(uint256)\":{\"notice\":\"Stake KING tokens to unlock voting power for `msg.sender`\"},\"stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Stake KING tokens using offchain approvals to unlock voting power\"},\"succeed(address)\":{\"notice\":\"Change owner of vesting contract\"},\"tokenRegistry()\":{\"notice\":\"Address of token registry\"},\"vestingContract()\":{\"notice\":\"Address of vesting contract\"},\"votingDecimals()\":{\"notice\":\"Decimals used for voting power\"},\"votingPowerOf(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"votingPowerOfAt(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw staked LP tokens, removing voting power for `msg.sender`\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw staked KING tokens, removing voting power for `msg.sender`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Crown.sol\":\"Crown\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9abb3184c06afb50807598533c4c0943dd864080d310ac28cbb5b2cfae6a18b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x44300341eb97e8790e56e0823e8c3d09695fc2ee80555a83a9585f307381f324\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/governance/Crown.sol\":{\"content\":\"/* solhint-disable max-line-length */\\n/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by crownlicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n                                                                          \\u2591\\u2591\\n                  \\u2591\\u2591\\u2593\\u2593                                                  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592                                                  \\u2593\\u2593\\n  \\u2591\\u2591              \\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591                                              \\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591                                              \\u2593\\u2593\\u2592\\u2592\\u2591\\u2591            \\u2591\\u2591\\u2591\\u2591\\n  \\u2591\\u2591\\u2591\\u2591            \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2588\\u2588\\u2591\\u2591                                          \\u2592\\u2592\\u2591\\u2591    \\u2591\\u2591                                            \\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591            \\u2593\\u2593\\n  \\u2591\\u2591\\u2593\\u2593\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591                        \\u2591\\u2591\\u2591\\u2591          \\u2592\\u2592\\u2591\\u2591        \\u2591\\u2591            \\u2591\\u2591\\u2591\\u2591                        \\u2592\\u2592\\u2593\\u2593  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591\\n    \\u2591\\u2591\\u2593\\u2593          \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592                    \\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591          \\u2593\\u2593  \\u2591\\u2591                    \\u2592\\u2592\\u2593\\u2593  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592        \\u2593\\u2593\\n    \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592        \\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591                        \\u2593\\u2593      \\u2591\\u2591      \\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591      \\u2593\\u2593    \\u2591\\u2591                  \\u2591\\u2591\\u2588\\u2588  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593      \\u2591\\u2591\\u2591\\u2591\\n      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591      \\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2593\\u2593  \\u2591\\u2591                            \\u2593\\u2593    \\u2592\\u2592    \\u2591\\u2591  \\u2591\\u2591    \\u2592\\u2592\\u2591\\u2591    \\u2593\\u2593        \\u2591\\u2591                \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591  \\u2592\\u2592  \\u2592\\u2592    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n      \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592      \\u2591\\u2591\\u2592\\u2592    \\u2592\\u2592\\u2592\\u2592\\u2591\\u2591                \\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591      \\u2591\\u2591    \\u2593\\u2593      \\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2591\\u2591    \\u2592\\u2592          \\u2591\\u2591                \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n        \\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591      \\u2592\\u2592\\u2591\\u2591                  \\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591    \\u2591\\u2591      \\u2591\\u2591  \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592  \\u2593\\u2593                \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n        \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591                    \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2593\\u2593                  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n          \\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591                        \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591            \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591              \\u2591\\u2591\\u2592\\u2592\\u2593\\u2593                    \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591\\n        \\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591                      \\u2591\\u2591                \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592              \\u2592\\u2592\\u2592\\u2592                      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591\\n        \\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2593\\u2593                      \\u2591\\u2591  \\u2591\\u2591            \\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591            \\u2591\\u2591  \\u2592\\u2592                    \\u2592\\u2592\\u2592\\u2592            \\u2591\\u2591  \\u2592\\u2592\\n          \\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2592\\u2592  \\u2592\\u2592\\u2592\\u2592                    \\u2592\\u2592                \\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591            \\u2593\\u2593\\u2592\\u2592\\u2591\\u2591                    \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\n            \\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592                  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591                  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592      \\u2591\\u2591\\u2591\\u2591\\n              \\u2592\\u2592\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2591\\u2591              \\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591  \\u2591\\u2591      \\u2592\\u2592\\u2592\\u2592  \\u2591\\u2591\\u2592\\u2592                \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\n              \\u2591\\u2591\\u2593\\u2593      \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591              \\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591    \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2592\\u2592            \\u2591\\u2591\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591      \\u2593\\u2593\\u2591\\u2591\\n              \\u2591\\u2591\\u2588\\u2588      \\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591            \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592      \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591            \\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592      \\u2593\\u2593\\u2591\\u2591\\n              \\u2591\\u2591\\u2592\\u2592      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591        \\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591    \\u2592\\u2592\\u2591\\u2591\\n              \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591      \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2593\\u2593\\n                \\u2591\\u2591\\u2592\\u2592    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591  \\u2591\\u2591        \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591    \\u2592\\u2592\\u2592\\u2592\\n                \\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                  \\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591            \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592        \\u2591\\u2591  \\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                \\u2591\\u2591\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2592\\u2592      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591    \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592  \\u2591\\u2591\\u2592\\u2592\\n                \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591  \\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\n                  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592    \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592          \\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591    \\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592      \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591        \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n                  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592  \\u2591\\u2591  \\u2591\\u2591          \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2588\\u2588\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\n                  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592  \\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\n                    \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592  \\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                    \\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592  \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591    \\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n                    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592      \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591      \\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n                    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592  \\u2592\\u2592\\n                      \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\n                      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592    \\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n                      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\n                      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2593\\u2593\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\n                      \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\n                      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                      \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                        \\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592  \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591  \\u2592\\u2592  \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591  \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591  \\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592  \\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n                      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2592\\u2592      \\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591      \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591    \\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\n                      \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n                        \\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591  \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                              \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\n                                            \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\n\\n*/\\n/* solhint-enable max-line-length */\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/governance/IVotingPowerFormula.sol\\\";\\n\\nimport \\\"../libraries/governance/LibCrownStorage.sol\\\";\\nimport \\\"../libraries/governance/PrismProxyImplementation.sol\\\";\\nimport \\\"../libraries/security/ReentrancyGuardUpgradeSafe.sol\\\";\\n\\n/**\\n * @title CrownCourt (prev. VotingPower)\\n * @dev Implementation contract for voting power prism proxy.\\n * Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract.\\n * The exception to this is the `become` function specified in PrismProxyImplementation.\\n * This function is called once and is used by this contract to accept its role as the implementation for the prism proxy\\n */\\ncontract Crown is PrismProxyImplementation, ReentrancyGuardUpgradeSafe {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @notice An event that's emitted when a user's staked balance increases\\n\\tevent Staked(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\n\\t/// @notice An event that's emitted when a user's staked balance decreases\\n\\tevent Withdrawn(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\n\\t/// @notice An event that's emitted when an account's vote balance changes\\n\\tevent VotingPowerChanged(address indexed voter, uint256 indexed previousBalance, uint256 indexed newBalance);\\n\\n\\t/// @notice Event emitted when the owner of the voting power contract is updated\\n\\tevent RoyalSuccession(address indexed oldKing, address indexed newKing);\\n\\n\\t/// @notice restrict functions to just king (diamond owner) address\\n\\tmodifier onlyKing {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\trequire(crown.king == address(0) || msg.sender == crown.king, \\\"Crown::onlyKing: not the king\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initialize VotingPower contract\\n\\t * @dev Should be called via VotingPowerPrism before calling anything else\\n\\t * @param _govToken address of KING token\\n\\t * @param _vestingContract address of Vesting contract\\n\\t */\\n\\tfunction initialize(address _govToken, address _vestingContract) public initializer {\\n\\t\\t__ReentrancyGuard_init_unchained();\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\tcrown.govToken = ICrownGovernanceToken(_govToken);\\n\\t\\tcrown.vesting = IVesting(_vestingContract);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address of KING token\\n\\t * @return Address of KING token\\n\\t */\\n\\tfunction govToken() public view returns (address) {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\treturn address(crown.govToken);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Decimals used for voting power\\n\\t * @return decimals\\n\\t */\\n\\tfunction votingDecimals() public pure returns (uint8) {\\n\\t\\treturn 18;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address of vesting contract\\n\\t * @return Address of vesting contract\\n\\t */\\n\\tfunction vestingContract() public view returns (address) {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\treturn address(crown.vesting);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address of token registry\\n\\t * @return Address of token registry\\n\\t */\\n\\tfunction tokenRegistry() public view returns (address) {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\treturn address(crown.tokenRegistry);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address of lockManager\\n\\t * @return Address of lockManager\\n\\t */\\n\\tfunction lockManager() public view returns (address) {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\treturn crown.lockManager;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address of owner\\n\\t * @return Address of owner\\n\\t */\\n\\tfunction owner() public view returns (address) {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\treturn crown.king;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets token registry address\\n\\t * @param registry Address of token registry\\n\\t */\\n\\tfunction setTokenRegistry(address registry) public onlyKing {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\tcrown.tokenRegistry = ITokenRegistry(registry);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets lockManager address\\n\\t * @param newLockManager Address of lockManager\\n\\t */\\n\\tfunction setLockManager(address newLockManager) public onlyKing {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\tcrown.lockManager = newLockManager;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Change owner of vesting contract\\n\\t * @param newKing New owner address\\n\\t */\\n\\tfunction succeed(address newKing) external onlyKing {\\n\\t\\trequire(newKing != address(0) && newKing != address(this), \\\"Crown::succeed: not valid address\\\");\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\temit RoyalSuccession(crown.king, newKing);\\n\\t\\tcrown.king = newKing;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Stake KING tokens using offchain approvals to unlock voting power\\n\\t * @param amount The amount to stake\\n\\t * @param deadline The time at which to expire the signature\\n\\t * @param v The recovery byte of the signature\\n\\t * @param r Half of the ECDSA signature pair\\n\\t * @param s Half of the ECDSA signature pair\\n\\t */\\n\\tfunction stakeWithPermit(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external nonReentrant {\\n\\t\\trequire(amount > 0, \\\"Crown::stakeWithPermit: cannot stake 0\\\");\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\trequire(crown.govToken.balanceOf(msg.sender) >= amount, \\\"Crown::stakeWithPermit: not enough tokens\\\");\\n\\n\\t\\tcrown.govToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n\\n\\t\\t_stake(msg.sender, address(crown.govToken), amount, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Stake KING tokens to unlock voting power for `msg.sender`\\n\\t * @param amount The amount to stake\\n\\t */\\n\\tfunction stake(uint256 amount) external nonReentrant {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\trequire(amount > 0, \\\"Crown::stake: cannot stake 0\\\");\\n\\t\\trequire(crown.govToken.balanceOf(msg.sender) >= amount, \\\"Crown::stake: not enough tokens\\\");\\n\\t\\trequire(\\n\\t\\t\\tcrown.govToken.allowance(msg.sender, address(this)) >= amount,\\n\\t\\t\\t\\\"Crown::stake: must approve tokens before staking\\\"\\n\\t\\t);\\n\\n\\t\\t_stake(msg.sender, address(crown.govToken), amount, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Stake LP tokens to unlock voting power for `msg.sender`\\n\\t * @param token The token to stake\\n\\t * @param amount The amount to stake\\n\\t */\\n\\tfunction stake(address token, uint256 amount) external nonReentrant {\\n\\t\\tIERC20 lptoken = IERC20(token);\\n\\t\\trequire(amount > 0, \\\"Crown::stake: cannot stake 0\\\");\\n\\t\\trequire(lptoken.balanceOf(msg.sender) >= amount, \\\"Crown::stake: not enough tokens\\\");\\n\\t\\trequire(\\n\\t\\t\\tlptoken.allowance(msg.sender, address(this)) >= amount,\\n\\t\\t\\t\\\"Crown::stake: must approve tokens before staking\\\"\\n\\t\\t);\\n\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\taddress tokenFormulaAddress = crown.tokenRegistry.tokenFormula(token);\\n\\t\\trequire(tokenFormulaAddress != address(0), \\\"Crown::stake: token not supported\\\");\\n\\n\\t\\tIVotingPowerFormula tokenFormula = IVotingPowerFormula(tokenFormulaAddress);\\n\\t\\tuint256 votingPower = tokenFormula.toVotingPower(amount);\\n\\t\\t_stake(msg.sender, token, amount, votingPower);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Count vesting KING tokens toward voting power for `account`\\n\\t * @param account The recipient of voting power\\n\\t * @param amount The amount of voting power to add\\n\\t */\\n\\tfunction addVotingPowerForVestingTokens(address account, uint256 amount) external nonReentrant {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\trequire(amount > 0, \\\"Crown::addVPforVT: cannot add 0 voting power\\\");\\n\\t\\trequire(msg.sender == address(crown.vesting), \\\"Crown::addVPforVT: only Monastery contract\\\");\\n\\n\\t\\t_increaseVotingPower(account, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Remove claimed vesting KING tokens from voting power for `account`\\n\\t * @param account The account with voting power\\n\\t * @param amount The amount of voting power to remove\\n\\t */\\n\\tfunction removeVotingPowerForClaimedTokens(address account, uint256 amount) external nonReentrant {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\trequire(amount > 0, \\\"Crown::removeVPforCT: cannot remove 0 voting power\\\");\\n\\t\\trequire(msg.sender == address(crown.vesting), \\\"Crown::removeVPforCT: only Monastery contract\\\");\\n\\n\\t\\t_decreaseVotingPower(account, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Count locked tokens toward voting power for `account`\\n\\t * @param account The recipient of voting power\\n\\t * @param amount The amount of voting power to add\\n\\t */\\n\\tfunction addVotingPowerForLockedTokens(address account, uint256 amount) external nonReentrant {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\trequire(amount > 0, \\\"Crown::addVPforLT: cannot add 0 voting power\\\");\\n\\t\\trequire(msg.sender == crown.lockManager, \\\"Crown::addVPforLT: only lockManager contract\\\");\\n\\n\\t\\t_increaseVotingPower(account, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Remove unlocked tokens from voting power for `account`\\n\\t * @param account The account with voting power\\n\\t * @param amount The amount of voting power to remove\\n\\t */\\n\\tfunction removeVotingPowerForUnlockedTokens(address account, uint256 amount) external nonReentrant {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\trequire(amount > 0, \\\"Crown::removeVPforUT: cannot remove 0 voting power\\\");\\n\\t\\trequire(msg.sender == crown.lockManager, \\\"Crown::removeVPforUT: only lockManager contract\\\");\\n\\n\\t\\t_decreaseVotingPower(account, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw staked KING tokens, removing voting power for `msg.sender`\\n\\t * @param amount The amount to withdraw\\n\\t */\\n\\tfunction withdraw(uint256 amount) external nonReentrant {\\n\\t\\trequire(amount > 0, \\\"Crown::withdraw: cannot withdraw 0\\\");\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\t_withdraw(msg.sender, address(crown.govToken), amount, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw staked LP tokens, removing voting power for `msg.sender`\\n\\t * @param token The token to withdraw\\n\\t * @param amount The amount to withdraw\\n\\t */\\n\\tfunction withdraw(address token, uint256 amount) external nonReentrant {\\n\\t\\trequire(amount > 0, \\\"Crown::withdraw: cannot withdraw 0\\\");\\n\\t\\tCrownStake memory s = getStake(msg.sender, token);\\n\\t\\tuint256 vpToWithdraw = amount.mul(s.votingPower).div(s.amount);\\n\\t\\t_withdraw(msg.sender, token, amount, vpToWithdraw);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get total amount of KING tokens staked in contract by `staker`\\n\\t * @param staker The user with staked KING\\n\\t * @return total KING amount staked\\n\\t */\\n\\tfunction getGovernanceTokenAmountStaked(address staker) public view returns (uint256) {\\n\\t\\treturn getGovernanceTokenStake(staker).amount;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get total amount of tokens staked in contract by `staker`\\n\\t * @param staker The user with staked tokens\\n\\t * @param stakedToken The staked token\\n\\t * @return total amount staked\\n\\t */\\n\\tfunction getAmountStaked(address staker, address stakedToken) public view returns (uint256) {\\n\\t\\treturn getStake(staker, stakedToken).amount;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get staked amount and voting power from KING tokens staked in contract by `staker`\\n\\t * @param staker The user with staked KING\\n\\t * @return total KING staked\\n\\t */\\n\\tfunction getGovernanceTokenStake(address staker) public view returns (CrownStake memory) {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\treturn getStake(staker, address(crown.govToken));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get total staked amount and voting power from `stakedToken` staked in contract by `staker`\\n\\t * @param staker The user with staked tokens\\n\\t * @param stakedToken The staked token\\n\\t * @return total staked\\n\\t */\\n\\tfunction getStake(address staker, address stakedToken) public view returns (CrownStake memory) {\\n\\t\\tCrownStakeStorage storage ss = LibCrownStorage.stakeStorage();\\n\\t\\treturn ss.stakes[staker][stakedToken];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Gets the current votes balance for `account`\\n\\t * @param account The address to get votes balance\\n\\t * @return The number of current votes for `account`\\n\\t */\\n\\tfunction votingPowerOf(address account) public view returns (uint256) {\\n\\t\\tCrownCheckpointStorage storage cs = LibCrownStorage.checkpointStorage();\\n\\t\\tuint32 nCheckpoints = cs.numCheckpoints[account];\\n\\t\\treturn nCheckpoints > 0 ? cs.checkpoints[account][nCheckpoints - 1].votes : 0;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determine the prior number of votes for an account as of a block number\\n\\t * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n\\t * @param account The address of the account to check\\n\\t * @param blockNumber The block number to get the vote balance at\\n\\t * @return The number of votes the account had as of the given block\\n\\t */\\n\\tfunction votingPowerOfAt(address account, uint256 blockNumber) public view returns (uint256) {\\n\\t\\trequire(blockNumber < block.number, \\\"Crown::votingPowerOfAt: not yet determined\\\");\\n\\n\\t\\tCrownCheckpointStorage storage cs = LibCrownStorage.checkpointStorage();\\n\\t\\tuint32 nCheckpoints = cs.numCheckpoints[account];\\n\\t\\tif (nCheckpoints == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t// First check most recent balance\\n\\t\\tif (cs.checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n\\t\\t\\treturn cs.checkpoints[account][nCheckpoints - 1].votes;\\n\\t\\t}\\n\\n\\t\\t// Next check implicit zero balance\\n\\t\\tif (cs.checkpoints[account][0].fromBlock > blockNumber) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint32 lower = 0;\\n\\t\\tuint32 upper = nCheckpoints - 1;\\n\\t\\twhile (upper > lower) {\\n\\t\\t\\tuint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n\\t\\t\\tCrownCheckpoint memory cp = cs.checkpoints[account][center];\\n\\t\\t\\tif (cp.fromBlock == blockNumber) {\\n\\t\\t\\t\\treturn cp.votes;\\n\\t\\t\\t} else if (cp.fromBlock < blockNumber) {\\n\\t\\t\\t\\tlower = center;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tupper = center - 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn cs.checkpoints[account][lower].votes;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Internal implementation of stake\\n\\t * @param voter The user that is staking tokens\\n\\t * @param token The token to stake\\n\\t * @param tokenAmount The amount of token to stake\\n\\t * @param votingPower The amount of voting power stake translates into\\n\\t */\\n\\tfunction _stake(\\n\\t\\taddress voter,\\n\\t\\taddress token,\\n\\t\\tuint256 tokenAmount,\\n\\t\\tuint256 votingPower\\n\\t) internal {\\n\\t\\tIERC20(token).safeTransferFrom(voter, address(this), tokenAmount);\\n\\n\\t\\tCrownStakeStorage storage ss = LibCrownStorage.stakeStorage();\\n\\t\\tss.stakes[voter][token].amount = ss.stakes[voter][token].amount.add(tokenAmount);\\n\\t\\tss.stakes[voter][token].votingPower = ss.stakes[voter][token].votingPower.add(votingPower);\\n\\n\\t\\temit Staked(voter, token, tokenAmount, votingPower);\\n\\n\\t\\t_increaseVotingPower(voter, votingPower);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Internal implementation of withdraw\\n\\t * @param voter The user with tokens staked\\n\\t * @param token The token that is staked\\n\\t * @param tokenAmount The amount of token to withdraw\\n\\t * @param votingPower The amount of voting power stake translates into\\n\\t */\\n\\tfunction _withdraw(\\n\\t\\taddress voter,\\n\\t\\taddress token,\\n\\t\\tuint256 tokenAmount,\\n\\t\\tuint256 votingPower\\n\\t) internal {\\n\\t\\tCrownStakeStorage storage ss = LibCrownStorage.stakeStorage();\\n\\t\\trequire(ss.stakes[voter][token].amount >= tokenAmount, \\\"Crown::_withdraw: not enough tokens staked\\\");\\n\\t\\trequire(ss.stakes[voter][token].votingPower >= votingPower, \\\"Crown::_withdraw: not enough voting power\\\");\\n\\t\\tss.stakes[voter][token].amount = ss.stakes[voter][token].amount.sub(tokenAmount);\\n\\t\\tss.stakes[voter][token].votingPower = ss.stakes[voter][token].votingPower.sub(votingPower);\\n\\n\\t\\tIERC20(token).safeTransfer(voter, tokenAmount);\\n\\n\\t\\temit Withdrawn(voter, token, tokenAmount, votingPower);\\n\\n\\t\\t_decreaseVotingPower(voter, votingPower);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Increase voting power of voter\\n\\t * @param voter The voter whose voting power is increasing\\n\\t * @param amount The amount of voting power to increase by\\n\\t */\\n\\tfunction _increaseVotingPower(address voter, uint256 amount) internal {\\n\\t\\tCrownCheckpointStorage storage cs = LibCrownStorage.checkpointStorage();\\n\\t\\tuint32 checkpointNum = cs.numCheckpoints[voter];\\n\\t\\tuint256 votingPowerOld = checkpointNum > 0 ? cs.checkpoints[voter][checkpointNum - 1].votes : 0;\\n\\t\\tuint256 votingPowerNew = votingPowerOld.add(amount);\\n\\t\\t_writeCheckpoint(voter, checkpointNum, votingPowerOld, votingPowerNew);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Decrease voting power of voter\\n\\t * @param voter The voter whose voting power is decreasing\\n\\t * @param amount The amount of voting power to decrease by\\n\\t */\\n\\tfunction _decreaseVotingPower(address voter, uint256 amount) internal {\\n\\t\\tCrownCheckpointStorage storage cs = LibCrownStorage.checkpointStorage();\\n\\t\\tuint32 checkpointNum = cs.numCheckpoints[voter];\\n\\t\\tuint256 votingPowerOld = checkpointNum > 0 ? cs.checkpoints[voter][checkpointNum - 1].votes : 0;\\n\\t\\tuint256 votingPowerNew = votingPowerOld.sub(amount);\\n\\t\\t_writeCheckpoint(voter, checkpointNum, votingPowerOld, votingPowerNew);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Create checkpoint of voting power for voter at current block number\\n\\t * @param voter The voter whose voting power is changing\\n\\t * @param nCheckpoints The current checkpoint number for voter\\n\\t * @param oldVotes The previous voting power of this voter\\n\\t * @param newVotes The new voting power of this voter\\n\\t */\\n\\tfunction _writeCheckpoint(\\n\\t\\taddress voter,\\n\\t\\tuint32 nCheckpoints,\\n\\t\\tuint256 oldVotes,\\n\\t\\tuint256 newVotes\\n\\t) internal {\\n\\t\\tuint32 blockNumber = _safe32(block.number, \\\"Crown::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n\\t\\tCrownCheckpointStorage storage cs = LibCrownStorage.checkpointStorage();\\n\\t\\tif (nCheckpoints > 0 && cs.checkpoints[voter][nCheckpoints - 1].fromBlock == blockNumber) {\\n\\t\\t\\tcs.checkpoints[voter][nCheckpoints - 1].votes = newVotes;\\n\\t\\t} else {\\n\\t\\t\\tcs.checkpoints[voter][nCheckpoints] = CrownCheckpoint(blockNumber, newVotes);\\n\\t\\t\\tcs.numCheckpoints[voter] = nCheckpoints + 1;\\n\\t\\t}\\n\\n\\t\\temit VotingPowerChanged(voter, oldVotes, newVotes);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Converts uint256 to uint32 safely\\n\\t * @param n Number\\n\\t * @param errorMessage Error message to use if number cannot be converted\\n\\t * @return uint32 number\\n\\t */\\n\\tfunction _safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n\\t\\trequire(n < 2**32, errorMessage);\\n\\t\\treturn uint32(n);\\n\\t}\\n}\\n\",\"keccak256\":\"0xa48a0f253c43ecb580d8151e2f7bef54fdcf4083efe027cb0b39d562326df6e5\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/ICrownGovernanceToken.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\ninterface ICrownGovernanceToken is IERC20, IERC20Permit {\\n\\t/// @notice An event that's emitted when the mintCap is changed\\n\\tevent MintCapChanged(uint32 indexed oldMintCap, uint32 indexed newMintCap);\\n\\t/// @notice An event that's emitted when the supplyManager address is changed\\n\\tevent SupplyManagerChanged(address indexed oldManager, address indexed newManager);\\n\\t/// @notice An event that's emitted when the supplyChangeWaitingPeriod is changed\\n\\tevent SupplyChangeWaitingPeriodChanged(uint32 indexed oldWaitingPeriod, uint32 indexed newWaitingPeriod);\\n\\t/// @notice An event that's emitted when the metadataManager address is changed\\n\\tevent MetadataManagerChanged(address indexed oldManager, address indexed newManager);\\n\\t/// @notice An event that's emitted when the token name and symbol are changed\\n\\tevent TokenMetaUpdated(string indexed name, string indexed symbol);\\n\\t/// @notice An event that's emitted whenever an authorized transfer occurs\\n\\tevent AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n\\n\\tfunction name() external view returns (string memory);\\n\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction mint(address dst, uint256 amount) external returns (bool);\\n\\n\\tfunction burn(address src, uint256 amount) external returns (bool);\\n\\n\\tfunction updateTokenMetadata(string memory tokenName, string memory tokenSymbol) external returns (bool);\\n\\n\\tfunction supplyManager() external view returns (address);\\n\\n\\tfunction metadataManager() external view returns (address);\\n\\n\\tfunction supplyChangeAllowedAfter() external view returns (uint256);\\n\\n\\tfunction supplyChangeWaitingPeriod() external view returns (uint32);\\n\\n\\tfunction supplyChangeWaitingPeriodMinimum() external view returns (uint32);\\n\\n\\tfunction mintCap() external view returns (uint32);\\n\\n\\tfunction setSupplyManager(address newSupplyManager) external returns (bool);\\n\\n\\tfunction setMetadataManager(address newMetadataManager) external returns (bool);\\n\\n\\tfunction setSupplyChangeWaitingPeriod(uint32 period) external returns (bool);\\n\\n\\tfunction setMintCap(uint32 newCap) external returns (bool);\\n}\\n\",\"keccak256\":\"0x73a898a087796b408d2e6a686a8ab0680bab932f048e4825c67e8c89da88c3d7\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/ITokenRegistry.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface ITokenRegistry {\\n\\t/// @notice Event emitted when a new token is supported\\n\\tevent TokenFormulaAdded(address indexed token, address indexed formula);\\n\\t/// @notice Event emitted when a token formula is updated\\n\\tevent TokenFormulaUpdated(address indexed token, address indexed formula);\\n\\t/// @notice Event emitted when a supported token is removed\\n\\tevent TokenFormulaRemoved(address indexed token);\\n\\n\\tfunction tokenFormula(address) external view returns (address);\\n\\n\\tfunction setTokenFormula(address token, address formula) external;\\n\\n\\tfunction removeToken(address token) external;\\n\\n\\tfunction changeOwner(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x7725ca32df13a190178b2398f2e33f1879db6b26bfc6f18e4dab7f0a19379a80\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/IVesting.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./ICrownGovernanceToken.sol\\\";\\nimport \\\"./IVotingPower.sol\\\";\\n\\ninterface IVesting {\\n\\tstruct Grant {\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 amount;\\n\\t\\tuint16 vestingDuration;\\n\\t\\tuint16 vestingCliff;\\n\\t\\tuint256 totalClaimed;\\n\\t}\\n\\n\\tevent GrantAdded(\\n\\t\\taddress indexed recipient,\\n\\t\\tuint256 indexed amount,\\n\\t\\tuint256 startTime,\\n\\t\\tuint16 vestingDurationInDays,\\n\\t\\tuint16 vestingCliffInDays\\n\\t);\\n\\tevent GrantTokensClaimed(address indexed recipient, uint256 indexed amountClaimed);\\n\\tevent ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n\\tevent ChangedVotingPower(address indexed oldContract, address indexed newContract);\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction token() external view returns (ICrownGovernanceToken);\\n\\n\\tfunction votingPower() external view returns (IVotingPower);\\n\\n\\tfunction addTokenGrant(\\n\\t\\taddress recipient,\\n\\t\\tuint256 startTime,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 vestingDurationInDays,\\n\\t\\tuint16 vestingCliffInDays\\n\\t) external;\\n\\n\\tfunction getTokenGrant(address recipient) external view returns (Grant memory);\\n\\n\\tfunction calculateGrantClaim(address recipient) external view returns (uint256);\\n\\n\\tfunction vestedBalance(address account) external view returns (uint256);\\n\\n\\tfunction claimedBalance(address recipient) external view returns (uint256);\\n\\n\\tfunction claimVestedTokens(address recipient) external;\\n\\n\\tfunction tokensVestedPerDay(address recipient) external view returns (uint256);\\n\\n\\tfunction setVotingPowerContract(address newContract) external;\\n\\n\\tfunction changeOwner(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xb342f92e2d82d73fa796fb03a6771b9d5d101e2a8fc0a00199390ed8558e1da8\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/IVotingPower.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../libraries/governance/PrismProxy.sol\\\";\\n\\ninterface IVotingPower {\\n\\tstruct Stake {\\n\\t\\tuint256 amount;\\n\\t\\tuint256 votingPower;\\n\\t}\\n\\n\\tevent NewPendingImplementation(address indexed oldPendingImplementation, address indexed newPendingImplementation);\\n\\tevent NewImplementation(address indexed oldImplementation, address indexed newImplementation);\\n\\tevent NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);\\n\\tevent NewAdmin(address indexed oldAdmin, address indexed newAdmin);\\n\\t// TODO: should be able to trim around here, if used as Facet in a Diamond\\n\\tevent Staked(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\tevent Withdrawn(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\tevent VotingPowerChanged(address indexed voter, uint256 indexed previousBalance, uint256 indexed newBalance);\\n\\n\\tfunction setPendingProxyImplementation(address newPendingImplementation) external returns (bool);\\n\\n\\tfunction acceptProxyImplementation() external returns (bool);\\n\\n\\tfunction setPendingProxyAdmin(address newPendingAdmin) external returns (bool);\\n\\n\\tfunction acceptProxyAdmin() external returns (bool);\\n\\n\\tfunction proxyAdmin() external view returns (address);\\n\\n\\tfunction pendingProxyAdmin() external view returns (address);\\n\\n\\tfunction proxyImplementation() external view returns (address);\\n\\n\\tfunction pendingProxyImplementation() external view returns (address);\\n\\n\\tfunction proxyImplementationVersion() external view returns (uint8);\\n\\n\\tfunction become(PrismProxy prism) external;\\n\\n\\t// TODO: should be able to trim around here, if used as Facet in a Diamond\\n\\tfunction initialize(address _govToken, address _vestingContract) external;\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction govToken() external view returns (address);\\n\\n\\tfunction vestingContract() external view returns (address);\\n\\n\\tfunction tokenRegistry() external view returns (address);\\n\\n\\tfunction lockManager() external view returns (address);\\n\\n\\tfunction changeOwner(address newOwner) external;\\n\\n\\tfunction setTokenRegistry(address registry) external;\\n\\n\\tfunction setLockManager(address newLockManager) external;\\n\\n\\tfunction stake(uint256 amount) external;\\n\\n\\tfunction stakeWithPermit(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tfunction withdraw(uint256 amount) external;\\n\\n\\tfunction addVotingPowerForVestingTokens(address account, uint256 amount) external;\\n\\n\\tfunction removeVotingPowerForClaimedTokens(address account, uint256 amount) external;\\n\\n\\tfunction addVotingPowerForLockedTokens(address account, uint256 amount) external;\\n\\n\\tfunction removeVotingPowerForUnlockedTokens(address account, uint256 amount) external;\\n\\n\\tfunction getCrownTokenAmountStaked(address staker) external view returns (uint256);\\n\\n\\tfunction getAmountStaked(address staker, address stakedToken) external view returns (uint256);\\n\\n\\tfunction getCrownTokenStake(address staker) external view returns (Stake memory);\\n\\n\\tfunction getStake(address staker, address stakedToken) external view returns (Stake memory);\\n\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\tfunction balanceOfAt(address account, uint256 blockNumber) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3577d55b604c0010effb26f2813ef08f3ab0c8735182d4c42177d3ffed5183fe\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/IVotingPowerFormula.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface IVotingPowerFormula {\\n\\tfunction toVotingPower(uint256 amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8ebd8b6755ce1c297d00c0b8d2c0f23b690d820dc3498de10f9b2864472db823\",\"license\":\"Apache-2.0\"},\"contracts/libraries/governance/LibCrownStorage.sol\":{\"content\":\"/*\\n\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../interfaces/governance/ICrownGovernanceToken.sol\\\";\\nimport \\\"../../interfaces/governance/IVesting.sol\\\";\\nimport \\\"../../interfaces/governance/ITokenRegistry.sol\\\";\\n\\n/// @notice Crown governance storage\\nstruct CrownStorage {\\n\\t// A record of states for signing / validating signatures\\n\\tmapping(address => uint256) nonces;\\n\\t// Crown governance token\\n\\tICrownGovernanceToken govToken;\\n\\t// Vesting contract\\n\\tIVesting vesting;\\n\\t// Crown owner\\n\\taddress king;\\n\\t// lockManager contract\\n\\taddress lockManager;\\n\\t// Token registry contract\\n\\tITokenRegistry tokenRegistry;\\n}\\n\\n/// @notice A checkpoint for marking number of votes from a given block\\nstruct CrownCheckpoint {\\n\\tuint32 fromBlock;\\n\\tuint256 votes;\\n}\\n\\n/// @notice All storage variables related to checkpoints\\nstruct CrownCheckpointStorage {\\n\\t// A record of vote checkpoints for each account, by index\\n\\tmapping(address => mapping(uint32 => CrownCheckpoint)) checkpoints;\\n\\t// The number of checkpoints for each account\\n\\tmapping(address => uint32) numCheckpoints;\\n}\\n\\n/// @notice The amount of a given token that has been staked, and the resulting voting power\\nstruct CrownStake {\\n\\tuint256 amount;\\n\\tuint256 votingPower;\\n\\t// TODO: delegation?\\n\\t// uint256 expiryTimestamp;\\n\\t// address delegatedTo;\\n}\\n\\n/// @notice All storage variables related to staking\\nstruct CrownStakeStorage {\\n\\t// Official record of staked balances for each account > token > stake\\n\\tmapping(address => mapping(address => CrownStake)) stakes;\\n}\\n\\nlibrary LibCrownStorage {\\n\\tbytes32 constant CROWN_GOVERNANCE_STORAGE = keccak256(\\\"kingmaker.crown.governance.storage\\\");\\n\\tbytes32 constant CROWN_CHECKPOINT_STORAGE = keccak256(\\\"kingmaker.crown.checkpoint.storage\\\");\\n\\tbytes32 constant CROWN_STAKE_STORAGE = keccak256(\\\"kingmaker.crown.stake.storage\\\");\\n\\n\\t/**\\n\\t * @notice Load app storage struct from specified VOTING_POWER_APP_STORAGE_POSITION\\n\\t * @return crown CrownGovernance struct\\n\\t */\\n\\tfunction crownStorage() internal pure returns (CrownStorage storage crown) {\\n\\t\\tbytes32 position = CROWN_GOVERNANCE_STORAGE;\\n\\t\\tassembly {\\n\\t\\t\\tcrown.slot := position\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Load checkpoint storage struct from specified VOTING_POWER_CHECKPOINT_STORAGE_POSITION\\n\\t * @return checkpoint CheckpointStorage struct\\n\\t */\\n\\tfunction checkpointStorage() internal pure returns (CrownCheckpointStorage storage checkpoint) {\\n\\t\\tbytes32 position = CROWN_CHECKPOINT_STORAGE;\\n\\t\\tassembly {\\n\\t\\t\\tcheckpoint.slot := position\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Load stake storage struct from specified VOTING_POWER_STAKE_STORAGE_POSITION\\n\\t * @return stake StakeStorage struct\\n\\t */\\n\\tfunction stakeStorage() internal pure returns (CrownStakeStorage storage stake) {\\n\\t\\tbytes32 position = CROWN_STAKE_STORAGE;\\n\\t\\tassembly {\\n\\t\\t\\tstake.slot := position\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x35684a1358478e49c716dec5e55ed722b53c42f64081f245024ce10ddc8bbf15\",\"license\":\"Apache-2.0\"},\"contracts/libraries/governance/PrismProxy.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\n/**\\n * Older proxy implementation\\n */\\ncontract PrismProxy {\\n\\t/// @notice Proxy admin and implementation storage variables\\n\\tstruct ProxyStorage {\\n\\t\\t// Administrator for this contract\\n\\t\\taddress admin;\\n\\t\\t// Pending administrator for this contract\\n\\t\\taddress pendingAdmin;\\n\\t\\t// Active implementation of this contract\\n\\t\\taddress implementation;\\n\\t\\t// Pending implementation of this contract\\n\\t\\taddress pendingImplementation;\\n\\t\\t// Implementation version of this contract\\n\\t\\tuint8 version;\\n\\t}\\n\\n\\t/// @dev Position in contract storage where prism ProxyStorage struct will be stored\\n\\tbytes32 constant PRISM_PROXY_STORAGE_POSITION = keccak256(\\\"prism.proxy.storage\\\");\\n\\n\\t/// @notice Emitted when pendingImplementation is changed\\n\\tevent NewPendingImplementation(address indexed oldPendingImplementation, address indexed newPendingImplementation);\\n\\n\\t/// @notice Emitted when pendingImplementation is accepted, which means implementation is updated\\n\\tevent NewImplementation(address indexed oldImplementation, address indexed newImplementation);\\n\\n\\t/// @notice Emitted when pendingAdmin is changed\\n\\tevent NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);\\n\\n\\t/// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n\\tevent NewAdmin(address indexed oldAdmin, address indexed newAdmin);\\n\\n\\t/**\\n\\t * @notice Load proxy storage struct from specified PRISM_PROXY_STORAGE_POSITION\\n\\t * @return ps ProxyStorage struct\\n\\t */\\n\\tfunction proxyStorage() internal pure returns (ProxyStorage storage ps) {\\n\\t\\tbytes32 position = PRISM_PROXY_STORAGE_POSITION;\\n\\t\\tassembly {\\n\\t\\t\\tps.slot := position\\n\\t\\t}\\n\\t}\\n\\n\\t// Admin Functions //\\n\\n\\t/**\\n\\t * @notice Create new pending implementation for prism. msg.sender must be admin\\n\\t * @dev Admin function for proposing new implementation contract\\n\\t * @return boolean indicating success of operation\\n\\t */\\n\\tfunction setPendingProxyImplementation(address newPendingImplementation) public returns (bool) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\trequire(msg.sender == s.admin, \\\"Prism::setPendingProxyImp: caller must be admin\\\");\\n\\n\\t\\taddress oldPendingImplementation = s.pendingImplementation;\\n\\n\\t\\ts.pendingImplementation = newPendingImplementation;\\n\\n\\t\\temit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accepts new implementation for prism. msg.sender must be pendingImplementation\\n\\t * @dev Admin function for new implementation to accept it's role as implementation\\n\\t * @return boolean indicating success of operation\\n\\t */\\n\\tfunction acceptProxyImplementation() public returns (bool) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\t// Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == s.pendingImplementation && s.pendingImplementation != address(0),\\n\\t\\t\\t\\\"Prism::acceptProxyImp: caller must be pending implementation\\\"\\n\\t\\t);\\n\\n\\t\\t// Save current values for inclusion in log\\n\\t\\taddress oldImplementation = s.implementation;\\n\\t\\taddress oldPendingImplementation = s.pendingImplementation;\\n\\n\\t\\ts.implementation = s.pendingImplementation;\\n\\n\\t\\ts.pendingImplementation = address(0);\\n\\t\\ts.version++;\\n\\n\\t\\temit NewImplementation(oldImplementation, s.implementation);\\n\\t\\temit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Begins transfer of admin rights. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n\\t * @dev Admin function to begin change of admin. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n\\t * @param newPendingAdmin New pending admin.\\n\\t * @return boolean indicating success of operation\\n\\t */\\n\\tfunction setPendingProxyAdmin(address newPendingAdmin) public returns (bool) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\t// Check caller = admin\\n\\t\\trequire(msg.sender == s.admin, \\\"Prism::setPendingProxyAdmin: caller must be admin\\\");\\n\\n\\t\\t// Save current value, if any, for inclusion in log\\n\\t\\taddress oldPendingAdmin = s.pendingAdmin;\\n\\n\\t\\t// Store pendingAdmin with value newPendingAdmin\\n\\t\\ts.pendingAdmin = newPendingAdmin;\\n\\n\\t\\t// Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n\\t\\temit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n\\t * @dev Admin function for pending admin to accept role and update admin\\n\\t * @return boolean indicating success of operation\\n\\t */\\n\\tfunction acceptProxyAdmin() public returns (bool) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\t// Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == s.pendingAdmin && msg.sender != address(0),\\n\\t\\t\\t\\\"Prism::acceptProxyAdmin: caller must be pending admin\\\"\\n\\t\\t);\\n\\n\\t\\t// Save current values for inclusion in log\\n\\t\\taddress oldAdmin = s.admin;\\n\\t\\taddress oldPendingAdmin = s.pendingAdmin;\\n\\n\\t\\t// Store admin with value pendingAdmin\\n\\t\\ts.admin = s.pendingAdmin;\\n\\n\\t\\t// Clear the pending value\\n\\t\\ts.pendingAdmin = address(0);\\n\\n\\t\\temit NewAdmin(oldAdmin, s.admin);\\n\\t\\temit NewPendingAdmin(oldPendingAdmin, s.pendingAdmin);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get current admin for prism proxy\\n\\t * @return admin address\\n\\t */\\n\\tfunction proxyAdmin() public view returns (address) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.admin;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get pending admin for prism proxy\\n\\t * @return admin address\\n\\t */\\n\\tfunction pendingProxyAdmin() public view returns (address) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.pendingAdmin;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address of implementation contract\\n\\t * @return implementation address\\n\\t */\\n\\tfunction proxyImplementation() public view returns (address) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.implementation;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address of pending implementation contract\\n\\t * @return pending implementation address\\n\\t */\\n\\tfunction pendingProxyImplementation() public view returns (address) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.pendingImplementation;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Current implementation version for proxy\\n\\t * @return version number\\n\\t */\\n\\tfunction proxyImplementationVersion() public view returns (uint8) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.version;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Delegates execution to an implementation contract.\\n\\t * @dev Returns to the external caller whatever the implementation returns or forwards reverts\\n\\t */\\n\\tfunction _forwardToImplementation() internal {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\t// delegate all other functions to current implementation\\n\\t\\t(bool success, ) = s.implementation.delegatecall(msg.data);\\n\\n\\t\\tassembly {\\n\\t\\t\\tlet free_mem_ptr := mload(0x40)\\n\\t\\t\\treturndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n\\t\\t\\tswitch success\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\trevert(free_mem_ptr, returndatasize())\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\treturn(free_mem_ptr, returndatasize())\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x2b90b5c4069439820bb805f734fc8f8272fbe8962b433f74b51e833f6bf1053e\",\"license\":\"Apache-2.0\"},\"contracts/libraries/governance/PrismProxyImplementation.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./PrismProxy.sol\\\";\\n\\ncontract PrismProxyImplementation is Initializable {\\n\\t/**\\n\\t * @notice Accept invitation to be implementation contract for proxy\\n\\t * @param prism Prism Proxy contract\\n\\t */\\n\\tfunction become(PrismProxy prism) public {\\n\\t\\trequire(msg.sender == prism.proxyAdmin(), \\\"Prism::become: only proxy admin can change implementation\\\");\\n\\t\\trequire(prism.acceptProxyImplementation() == true, \\\"Prism::become: change not authorized\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x18f8a99b741af531150ff456203e1b36e62dfac209c56c434b0a206afa270c09\",\"license\":\"Apache-2.0\"},\"contracts/libraries/security/ReentrancyGuardUpgradeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n\\tbool private _notEntered;\\n\\n\\tfunction __ReentrancyGuard_init() internal initializer {\\n\\t\\t__ReentrancyGuard_init_unchained();\\n\\t}\\n\\n\\tfunction __ReentrancyGuard_init_unchained() internal initializer {\\n\\t\\t// Storing an initial non-zero value makes deployment a bit more\\n\\t\\t// expensive, but in exchange the refund on every call to nonReentrant\\n\\t\\t// will be lower in amount. Since refunds are capped to a percetange of\\n\\t\\t// the total transaction's gas, it is best to keep them low in cases\\n\\t\\t// like this one, to increase the likelihood of the full refund coming\\n\\t\\t// into effect.\\n\\t\\t_notEntered = true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Prevents a contract from calling itself, directly or indirectly.\\n\\t * Calling a `nonReentrant` function from another `nonReentrant`\\n\\t * function is not supported. It is possible to prevent this from happening\\n\\t * by making the `nonReentrant` function external, and make it call a\\n\\t * `private` function that does the actual work.\\n\\t */\\n\\tmodifier nonReentrant() {\\n\\t\\t// On the first call to nonReentrant, _notEntered will be true\\n\\t\\trequire(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n\\t\\t// Any calls to nonReentrant after this point will fail\\n\\t\\t_notEntered = false;\\n\\n\\t\\t_;\\n\\n\\t\\t// By storing the original value once again, a refund is triggered (see\\n\\t\\t// https://eips.ethereum.org/EIPS/eip-2200)\\n\\t\\t_notEntered = true;\\n\\t}\\n\\n\\tuint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9525dcb47dcb3e1f6e7b5eb164a47689a81ecb7c0f72e9c05012df987c2e170e\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614fb8806100206000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80639d10084a116100ee578063bcc3f3bd11610097578063deedfdbd11610071578063deedfdbd1461048b578063ecd9ba82146104a7578063f3fef3a3146104c3578063f9a92d82146104df576101ae565b8063bcc3f3bd146103fb578063ca291ba11461042b578063dd18ffa41461045b576101ae565b8063a694fc3a116100c8578063a694fc3a146103a5578063acca30a2146103c1578063adc9772e146103df576101ae565b80639d10084a1461034d5780639d23c4c71461036b578063a1194c8e14610389576101ae565b8063485cc9551161015b57806382dda22d1161013557806382dda22d146102c75780638da5cb5b146102f75780639b92ac4a146103155780639cc7a36714610331576101ae565b8063485cc9551461025d5780635e6f6045146102795780637741459e14610297576101ae565b80631efaa4421161018c5780631efaa442146102095780632e1a7d4d1461022557806335a5af9214610241576101ae565b806305268cff146101b35780630b70b812146101d15780630bae5b7c146101ed575b600080fd5b6101bb61050f565b6040516101c89190613f3d565b60405180910390f35b6101eb60048036038101906101e691906138ac565b610547565b005b6102076004803603810190610202919061393a565b6107ba565b005b610223600480360381019061021e919061393a565b61092e565b005b61023f600480360381019061023a91906139c8565b610aa2565b005b61025b600480360381019061025691906138ac565b610ba9565b005b610277600480360381019061027291906138fe565b610cf6565b005b610281610e6c565b60405161028e9190613f3d565b60405180910390f35b6102b160048036038101906102ac91906138fe565b610ea4565b6040516102be91906143ed565b60405180910390f35b6102e160048036038101906102dc91906138fe565b610ebc565b6040516102ee91906143d2565b60405180910390f35b6102ff610f76565b60405161030c9190613f3d565b60405180910390f35b61032f600480360381019061032a919061393a565b610fae565b005b61034b6004803603810190610346919061393a565b611122565b005b610355611296565b6040516103629190614408565b60405180910390f35b61037361129f565b6040516103809190613f3d565b60405180910390f35b6103a3600480360381019061039e919061399f565b6112d7565b005b6103bf60048036038101906103ba91906139c8565b61148b565b005b6103c9611772565b6040516103d69190613f3d565b60405180910390f35b6103f960048036038101906103f4919061393a565b6117aa565b005b610415600480360381019061041091906138ac565b611be2565b60405161042291906143ed565b60405180910390f35b610445600480360381019061044091906138ac565b611cd2565b60405161045291906143d2565b60405180910390f35b610475600480360381019061047091906138ac565b611d1c565b60405161048291906143ed565b60405180910390f35b6104a560048036038101906104a091906138ac565b611d32565b005b6104c160048036038101906104bc9190613a1a565b611e7f565b005b6104dd60048036038101906104d8919061393a565b612114565b005b6104f960048036038101906104f4919061393a565b61222c565b60405161050691906143ed565b60405180910390f35b60008061051a612620565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000610551612620565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061060157508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610640576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610637906141f2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156106a957503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b6106e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106df906143b2565b60405180910390fd5b60006106f2612620565b90508273ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb4877dbaed6986c73208f0c04f109dbb743d2285a0a9b6b1ee90c87929158cfe60405160405180910390a3828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600060029054906101000a900460ff16610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090614372565b60405180910390fd5b60008060026101000a81548160ff021916908315150217905550600061082d612620565b905060008211610872576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610869906140f2565b60405180910390fd5b8060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fb906140b2565b60405180910390fd5b61090e838361264d565b506001600060026101000a81548160ff0219169083151502179055505050565b600060029054906101000a900460ff1661097d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097490614372565b60405180910390fd5b60008060026101000a81548160ff02191690831515021790555060006109a1612620565b9050600082116109e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dd90614232565b60405180910390fd5b8060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6f90614092565b60405180910390fd5b610a828383612761565b506001600060026101000a81548160ff0219169083151502179055505050565b600060029054906101000a900460ff16610af1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae890614372565b60405180910390fd5b60008060026101000a81548160ff02191690831515021790555060008111610b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4590614312565b60405180910390fd5b6000610b58612620565b9050610b8a338260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168485612875565b506001600060026101000a81548160ff02191690831515021790555050565b6000610bb3612620565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610c6357508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c99906141f2565b60405180910390fd5b6000610cac612620565b9050828160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600060019054906101000a900460ff1680610d1c575060008054906101000a900460ff16155b610d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5290614192565b60405180910390fd5b60008060019054906101000a900460ff161590508015610dab576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610db3612cdd565b6000610dbd612620565b9050838160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508015610e675760008060016101000a81548160ff0219169083151502179055505b505050565b600080610e77612620565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000610eb08383610ebc565b60000151905092915050565b610ec46137ea565b6000610ece612dd1565b90508060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505091505092915050565b600080610f81612620565b90508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600060029054906101000a900460ff16610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff490614372565b60405180910390fd5b60008060026101000a81548160ff0219169083151502179055506000611021612620565b905060008211611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d90614252565b60405180910390fd5b8060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ef906142d2565b60405180910390fd5b611102838361264d565b506001600060026101000a81548160ff0219169083151502179055505050565b600060029054906101000a900460ff16611171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116890614372565b60405180910390fd5b60008060026101000a81548160ff0219169083151502179055506000611195612620565b9050600082116111da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d190614292565b60405180910390fd5b8060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461126c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126390614392565b60405180910390fd5b6112768383612761565b506001600060026101000a81548160ff0219169083151502179055505050565b60006012905090565b6000806112aa612620565b90508060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b8073ffffffffffffffffffffffffffffffffffffffff16633e47158c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561131d57600080fd5b505afa158015611331573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135591906138d5565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b990614072565b60405180910390fd5b600115158173ffffffffffffffffffffffffffffffffffffffff166394d8fbd06040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561140e57600080fd5b505af1158015611422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114469190613976565b151514611488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147f90614212565b60405180910390fd5b50565b600060029054906101000a900460ff166114da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d190614372565b60405180910390fd5b60008060026101000a81548160ff02191690831515021790555060006114fe612620565b905060008211611543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a90614152565b60405180910390fd5b818160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016115a19190613f3d565b60206040518083038186803b1580156115b957600080fd5b505afa1580156115cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f191906139f1565b1015611632576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611629906140d2565b60405180910390fd5b818160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611692929190613f58565b60206040518083038186803b1580156116aa57600080fd5b505afa1580156116be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e291906139f1565b1015611723576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171a906142b2565b60405180910390fd5b611753338260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168485612dfe565b506001600060026101000a81548160ff02191690831515021790555050565b60008061177d612620565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600060029054906101000a900460ff166117f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f090614372565b60405180910390fd5b60008060026101000a81548160ff02191690831515021790555060008290506000821161185b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185290614152565b60405180910390fd5b818173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016118959190613f3d565b60206040518083038186803b1580156118ad57600080fd5b505afa1580156118c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e591906139f1565b1015611926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191d906140d2565b60405180910390fd5b818173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611962929190613f58565b60206040518083038186803b15801561197a57600080fd5b505afa15801561198e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b291906139f1565b10156119f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ea906142b2565b60405180910390fd5b60006119fd612620565b905060008160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636af133e3866040518263ffffffff1660e01b8152600401611a5e9190613f3d565b60206040518083038186803b158015611a7657600080fd5b505afa158015611a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aae91906138d5565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b17906142f2565b60405180910390fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff16635a16f502876040518263ffffffff1660e01b8152600401611b6091906143ed565b60206040518083038186803b158015611b7857600080fd5b505afa158015611b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb091906139f1565b9050611bbe33888884612dfe565b50505050506001600060026101000a81548160ff0219169083151502179055505050565b600080611bed6130e0565b905060008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16905060008163ffffffff1611611c5a576000611cc9565b8160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600183611caa91906145d5565b63ffffffff1663ffffffff168152602001908152602001600020600101545b92505050919050565b611cda6137ea565b6000611ce4612620565b9050611d14838260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ebc565b915050919050565b6000611d2782611cd2565b600001519050919050565b6000611d3c612620565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611dec57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611e2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e22906141f2565b60405180910390fd5b6000611e35612620565b9050828160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600060029054906101000a900460ff16611ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec590614372565b60405180910390fd5b60008060026101000a81548160ff02191690831515021790555060008511611f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f22906141d2565b60405180910390fd5b6000611f35612620565b9050858160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611f959190613f3d565b60206040518083038186803b158015611fad57600080fd5b505afa158015611fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe591906139f1565b1015612026576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201d90614112565b60405180910390fd5b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333089898989896040518863ffffffff1660e01b815260040161208f9796959493929190613fb8565b600060405180830381600087803b1580156120a957600080fd5b505af11580156120bd573d6000803e3d6000fd5b505050506120f1338260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168889612dfe565b506001600060026101000a81548160ff0219169083151502179055505050505050565b600060029054906101000a900460ff16612163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215a90614372565b60405180910390fd5b60008060026101000a81548160ff021916908315150217905550600081116121c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b790614312565b60405180910390fd5b60006121cc3384610ebc565b905060006121fd82600001516121ef84602001518661310d90919063ffffffff16565b61312390919063ffffffff16565b905061220b33858584612875565b50506001600060026101000a81548160ff0219169083151502179055505050565b6000438210612270576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612267906141b2565b60405180910390fd5b600061227a6130e0565b905060008160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16905060008163ffffffff1614156122ec5760009250505061261a565b838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018461233d91906145d5565b63ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16116123ed578160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001836123c691906145d5565b63ffffffff1663ffffffff168152602001908152602001600020600101549250505061261a565b838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008063ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff1611156124715760009250505061261a565b60008060018361248191906145d5565b90505b8163ffffffff168163ffffffff1611156125b1576000600283836124a891906145d5565b6124b29190614516565b826124bd91906145d5565b905060008560000160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481525050905087816000015163ffffffff161415612580578060200151965050505050505061261a565b87816000015163ffffffff16101561259a578193506125aa565b6001826125a791906145d5565b92505b5050612484565b8360000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff168152602001908152602001600020600101549450505050505b92915050565b6000807feedc8c3fe1f2c3ab8dce1e429990e954667f9815b833f1da5923b0c280dd34cd90508091505090565b60006126576130e0565b905060008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1690506000808263ffffffff16116126c5576000612734565b8260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018461271591906145d5565b63ffffffff1663ffffffff168152602001908152602001600020600101545b9050600061274b858361313990919063ffffffff16565b90506127598684848461314f565b505050505050565b600061276b6130e0565b905060008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1690506000808263ffffffff16116127d9576000612848565b8260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018461282991906145d5565b63ffffffff1663ffffffff168152602001908152602001600020600101545b9050600061285f858361340290919063ffffffff16565b905061286d8684848461314f565b505050505050565b600061287f612dd1565b9050828160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015612945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293c90614172565b60405180910390fd5b818160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541015612a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0090614352565b60405180910390fd5b612a9d838260000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461340290919063ffffffff16565b8160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550612bb6828260000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461340290919063ffffffff16565b8160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550612c6685848673ffffffffffffffffffffffffffffffffffffffff166134189092919063ffffffff16565b828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f91fb9d98b786c57d74c099ccd2beca1739e9f6a81fb49001ca465c4b7591bbe285604051612cc491906143ed565b60405180910390a4612cd68583612761565b5050505050565b600060019054906101000a900460ff1680612d03575060008054906101000a900460ff16155b612d42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d3990614192565b60405180910390fd5b60008060019054906101000a900460ff161590508015612d92576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6001600060026101000a81548160ff0219169083151502179055508015612dce5760008060016101000a81548160ff0219169083151502179055505b50565b6000807f7e8b17b07bec32d4181cbe0bc0ebb49f064985defb44e2b5781615189e4789e290508091505090565b612e2b8430848673ffffffffffffffffffffffffffffffffffffffff1661349e909392919063ffffffff16565b6000612e35612dd1565b9050612ecb838260000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461313990919063ffffffff16565b8160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550612fe4828260000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461313990919063ffffffff16565b8160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f6c86f3fd5118b3aa8bb4f389a617046de0a3d3d477de1a1673d227f802f616dc856040516130c791906143ed565b60405180910390a46130d9858361264d565b5050505050565b6000807f05121b62eff87a86d558d12269da9469bab58a7f680d19e08a27a018956bbe7290508091505090565b6000818361311b9190614547565b905092915050565b6000818361313191906144e5565b905092915050565b600081836131479190614455565b905092915050565b600061317343604051806060016040528060358152602001614f4e60359139613527565b9050600061317f6130e0565b905060008563ffffffff1611801561321f57508163ffffffff168160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001886131e991906145d5565b63ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16145b1561329b57828160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018861327591906145d5565b63ffffffff1663ffffffff168152602001908152602001600020600101819055506133b5565b60405180604001604052808363ffffffff168152602001848152508160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008763ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff1602179055506020820151816001015590505060018561335591906144ab565b8160010160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055505b82848773ffffffffffffffffffffffffffffffffffffffff167f53ed7954de66613e30dd29b46ab783aa594e6309d021d8854c76bb3325d03aa360405160405180910390a4505050505050565b6000818361341091906145a1565b905092915050565b6134998363a9059cbb60e01b8484604051602401613437929190614027565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061357d565b505050565b613521846323b872dd60e01b8585856040516024016134bf93929190613f81565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061357d565b50505050565b600064010000000083108290613573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161356a9190614050565b60405180910390fd5b5082905092915050565b60006135df826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166136449092919063ffffffff16565b905060008151111561363f57808060200190518101906135ff9190613976565b61363e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161363590614332565b60405180910390fd5b5b505050565b6060613653848460008561365c565b90509392505050565b6060824710156136a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161369890614132565b60405180910390fd5b6136aa85613770565b6136e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136e090614272565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516137129190613f26565b60006040518083038185875af1925050503d806000811461374f576040519150601f19603f3d011682016040523d82523d6000602084013e613754565b606091505b5091509150613764828286613783565b92505050949350505050565b600080823b905060008111915050919050565b60608315613793578290506137e3565b6000835111156137a65782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137da9190614050565b60405180910390fd5b9392505050565b604051806040016040528060008152602001600081525090565b60008135905061381381614ec3565b92915050565b60008151905061382881614ec3565b92915050565b60008151905061383d81614eda565b92915050565b60008135905061385281614ef1565b92915050565b60008135905061386781614f08565b92915050565b60008135905061387c81614f1f565b92915050565b60008151905061389181614f1f565b92915050565b6000813590506138a681614f36565b92915050565b6000602082840312156138be57600080fd5b60006138cc84828501613804565b91505092915050565b6000602082840312156138e757600080fd5b60006138f584828501613819565b91505092915050565b6000806040838503121561391157600080fd5b600061391f85828601613804565b925050602061393085828601613804565b9150509250929050565b6000806040838503121561394d57600080fd5b600061395b85828601613804565b925050602061396c8582860161386d565b9150509250929050565b60006020828403121561398857600080fd5b60006139968482850161382e565b91505092915050565b6000602082840312156139b157600080fd5b60006139bf84828501613858565b91505092915050565b6000602082840312156139da57600080fd5b60006139e88482850161386d565b91505092915050565b600060208284031215613a0357600080fd5b6000613a1184828501613882565b91505092915050565b600080600080600060a08688031215613a3257600080fd5b6000613a408882890161386d565b9550506020613a518882890161386d565b9450506040613a6288828901613897565b9350506060613a7388828901613843565b9250506080613a8488828901613843565b9150509295509295909350565b613a9a81614609565b82525050565b613aa981614627565b82525050565b6000613aba82614423565b613ac48185614439565b9350613ad481856020860161468a565b80840191505092915050565b6000613aeb8261442e565b613af58185614444565b9350613b0581856020860161468a565b613b0e8161471b565b840191505092915050565b6000613b26603983614444565b9150613b318261472c565b604082019050919050565b6000613b49602d83614444565b9150613b548261477b565b604082019050919050565b6000613b6c602c83614444565b9150613b77826147ca565b604082019050919050565b6000613b8f601f83614444565b9150613b9a82614819565b602082019050919050565b6000613bb2602c83614444565b9150613bbd82614842565b604082019050919050565b6000613bd5602983614444565b9150613be082614891565b604082019050919050565b6000613bf8602683614444565b9150613c03826148e0565b604082019050919050565b6000613c1b601c83614444565b9150613c268261492f565b602082019050919050565b6000613c3e602a83614444565b9150613c4982614958565b604082019050919050565b6000613c61602e83614444565b9150613c6c826149a7565b604082019050919050565b6000613c84602a83614444565b9150613c8f826149f6565b604082019050919050565b6000613ca7602683614444565b9150613cb282614a45565b604082019050919050565b6000613cca601d83614444565b9150613cd582614a94565b602082019050919050565b6000613ced602483614444565b9150613cf882614abd565b604082019050919050565b6000613d10603283614444565b9150613d1b82614b0c565b604082019050919050565b6000613d33602c83614444565b9150613d3e82614b5b565b604082019050919050565b6000613d56601d83614444565b9150613d6182614baa565b602082019050919050565b6000613d79603283614444565b9150613d8482614bd3565b604082019050919050565b6000613d9c603083614444565b9150613da782614c22565b604082019050919050565b6000613dbf602a83614444565b9150613dca82614c71565b604082019050919050565b6000613de2602183614444565b9150613ded82614cc0565b604082019050919050565b6000613e05602283614444565b9150613e1082614d0f565b604082019050919050565b6000613e28602a83614444565b9150613e3382614d5e565b604082019050919050565b6000613e4b602983614444565b9150613e5682614dad565b604082019050919050565b6000613e6e601f83614444565b9150613e7982614dfc565b602082019050919050565b6000613e91602f83614444565b9150613e9c82614e25565b604082019050919050565b6000613eb4602183614444565b9150613ebf82614e74565b604082019050919050565b604082016000820151613ee06000850182613ef9565b506020820151613ef36020850182613ef9565b50505050565b613f0281614663565b82525050565b613f1181614663565b82525050565b613f208161467d565b82525050565b6000613f328284613aaf565b915081905092915050565b6000602082019050613f526000830184613a91565b92915050565b6000604082019050613f6d6000830185613a91565b613f7a6020830184613a91565b9392505050565b6000606082019050613f966000830186613a91565b613fa36020830185613a91565b613fb06040830184613f08565b949350505050565b600060e082019050613fcd600083018a613a91565b613fda6020830189613a91565b613fe76040830188613f08565b613ff46060830187613f08565b6140016080830186613f17565b61400e60a0830185613aa0565b61401b60c0830184613aa0565b98975050505050505050565b600060408201905061403c6000830185613a91565b6140496020830184613f08565b9392505050565b6000602082019050818103600083015261406a8184613ae0565b905092915050565b6000602082019050818103600083015261408b81613b19565b9050919050565b600060208201905081810360008301526140ab81613b3c565b9050919050565b600060208201905081810360008301526140cb81613b5f565b9050919050565b600060208201905081810360008301526140eb81613b82565b9050919050565b6000602082019050818103600083015261410b81613ba5565b9050919050565b6000602082019050818103600083015261412b81613bc8565b9050919050565b6000602082019050818103600083015261414b81613beb565b9050919050565b6000602082019050818103600083015261416b81613c0e565b9050919050565b6000602082019050818103600083015261418b81613c31565b9050919050565b600060208201905081810360008301526141ab81613c54565b9050919050565b600060208201905081810360008301526141cb81613c77565b9050919050565b600060208201905081810360008301526141eb81613c9a565b9050919050565b6000602082019050818103600083015261420b81613cbd565b9050919050565b6000602082019050818103600083015261422b81613ce0565b9050919050565b6000602082019050818103600083015261424b81613d03565b9050919050565b6000602082019050818103600083015261426b81613d26565b9050919050565b6000602082019050818103600083015261428b81613d49565b9050919050565b600060208201905081810360008301526142ab81613d6c565b9050919050565b600060208201905081810360008301526142cb81613d8f565b9050919050565b600060208201905081810360008301526142eb81613db2565b9050919050565b6000602082019050818103600083015261430b81613dd5565b9050919050565b6000602082019050818103600083015261432b81613df8565b9050919050565b6000602082019050818103600083015261434b81613e1b565b9050919050565b6000602082019050818103600083015261436b81613e3e565b9050919050565b6000602082019050818103600083015261438b81613e61565b9050919050565b600060208201905081810360008301526143ab81613e84565b9050919050565b600060208201905081810360008301526143cb81613ea7565b9050919050565b60006040820190506143e76000830184613eca565b92915050565b60006020820190506144026000830184613f08565b92915050565b600060208201905061441d6000830184613f17565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061446082614663565b915061446b83614663565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156144a05761449f6146bd565b5b828201905092915050565b60006144b68261466d565b91506144c18361466d565b92508263ffffffff038211156144da576144d96146bd565b5b828201905092915050565b60006144f082614663565b91506144fb83614663565b92508261450b5761450a6146ec565b5b828204905092915050565b60006145218261466d565b915061452c8361466d565b92508261453c5761453b6146ec565b5b828204905092915050565b600061455282614663565b915061455d83614663565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614596576145956146bd565b5b828202905092915050565b60006145ac82614663565b91506145b783614663565b9250828210156145ca576145c96146bd565b5b828203905092915050565b60006145e08261466d565b91506145eb8361466d565b9250828210156145fe576145fd6146bd565b5b828203905092915050565b600061461482614643565b9050919050565b60008115159050919050565b6000819050919050565b600061463c82614609565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60005b838110156146a857808201518184015260208101905061468d565b838111156146b7576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f507269736d3a3a6265636f6d653a206f6e6c792070726f78792061646d696e2060008201527f63616e206368616e676520696d706c656d656e746174696f6e00000000000000602082015250565b7f43726f776e3a3a72656d6f76655650666f7243543a206f6e6c79204d6f6e617360008201527f7465727920636f6e747261637400000000000000000000000000000000000000602082015250565b7f43726f776e3a3a6164645650666f724c543a206f6e6c79206c6f636b4d616e6160008201527f67657220636f6e74726163740000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a7374616b653a206e6f7420656e6f75676820746f6b656e7300600082015250565b7f43726f776e3a3a6164645650666f724c543a2063616e6e6f742061646420302060008201527f766f74696e6720706f7765720000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a7374616b65576974685065726d69743a206e6f7420656e6f7560008201527f676820746f6b656e730000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a7374616b653a2063616e6e6f74207374616b65203000000000600082015250565b7f43726f776e3a3a5f77697468647261773a206e6f7420656e6f75676820746f6b60008201527f656e73207374616b656400000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f43726f776e3a3a766f74696e67506f7765724f6641743a206e6f74207965742060008201527f64657465726d696e656400000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a7374616b65576974685065726d69743a2063616e6e6f74207360008201527f74616b6520300000000000000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a6f6e6c794b696e673a206e6f7420746865206b696e67000000600082015250565b7f507269736d3a3a6265636f6d653a206368616e6765206e6f7420617574686f7260008201527f697a656400000000000000000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a72656d6f76655650666f7243543a2063616e6e6f742072656d60008201527f6f7665203020766f74696e6720706f7765720000000000000000000000000000602082015250565b7f43726f776e3a3a6164645650666f7256543a2063616e6e6f742061646420302060008201527f766f74696e6720706f7765720000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f43726f776e3a3a72656d6f76655650666f7255543a2063616e6e6f742072656d60008201527f6f7665203020766f74696e6720706f7765720000000000000000000000000000602082015250565b7f43726f776e3a3a7374616b653a206d75737420617070726f766520746f6b656e60008201527f73206265666f7265207374616b696e6700000000000000000000000000000000602082015250565b7f43726f776e3a3a6164645650666f7256543a206f6e6c79204d6f6e617374657260008201527f7920636f6e747261637400000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a7374616b653a20746f6b656e206e6f7420737570706f72746560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a77697468647261773a2063616e6e6f7420776974686472617760008201527f2030000000000000000000000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a5f77697468647261773a206e6f7420656e6f75676820766f7460008201527f696e6720706f7765720000000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f43726f776e3a3a72656d6f76655650666f7255543a206f6e6c79206c6f636b4d60008201527f616e6167657220636f6e74726163740000000000000000000000000000000000602082015250565b7f43726f776e3a3a737563636565643a206e6f742076616c69642061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b614ecc81614609565b8114614ed757600080fd5b50565b614ee38161461b565b8114614eee57600080fd5b50565b614efa81614627565b8114614f0557600080fd5b50565b614f1181614631565b8114614f1c57600080fd5b50565b614f2881614663565b8114614f3357600080fd5b50565b614f3f8161467d565b8114614f4a57600080fd5b5056fe43726f776e3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473a2646970667358221220bcab3d752c1ed8a8663fb697d5413783bea4a84fda1f7e7f93c43dc2b808953364736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c80639d10084a116100ee578063bcc3f3bd11610097578063deedfdbd11610071578063deedfdbd1461048b578063ecd9ba82146104a7578063f3fef3a3146104c3578063f9a92d82146104df576101ae565b8063bcc3f3bd146103fb578063ca291ba11461042b578063dd18ffa41461045b576101ae565b8063a694fc3a116100c8578063a694fc3a146103a5578063acca30a2146103c1578063adc9772e146103df576101ae565b80639d10084a1461034d5780639d23c4c71461036b578063a1194c8e14610389576101ae565b8063485cc9551161015b57806382dda22d1161013557806382dda22d146102c75780638da5cb5b146102f75780639b92ac4a146103155780639cc7a36714610331576101ae565b8063485cc9551461025d5780635e6f6045146102795780637741459e14610297576101ae565b80631efaa4421161018c5780631efaa442146102095780632e1a7d4d1461022557806335a5af9214610241576101ae565b806305268cff146101b35780630b70b812146101d15780630bae5b7c146101ed575b600080fd5b6101bb61050f565b6040516101c89190613f3d565b60405180910390f35b6101eb60048036038101906101e691906138ac565b610547565b005b6102076004803603810190610202919061393a565b6107ba565b005b610223600480360381019061021e919061393a565b61092e565b005b61023f600480360381019061023a91906139c8565b610aa2565b005b61025b600480360381019061025691906138ac565b610ba9565b005b610277600480360381019061027291906138fe565b610cf6565b005b610281610e6c565b60405161028e9190613f3d565b60405180910390f35b6102b160048036038101906102ac91906138fe565b610ea4565b6040516102be91906143ed565b60405180910390f35b6102e160048036038101906102dc91906138fe565b610ebc565b6040516102ee91906143d2565b60405180910390f35b6102ff610f76565b60405161030c9190613f3d565b60405180910390f35b61032f600480360381019061032a919061393a565b610fae565b005b61034b6004803603810190610346919061393a565b611122565b005b610355611296565b6040516103629190614408565b60405180910390f35b61037361129f565b6040516103809190613f3d565b60405180910390f35b6103a3600480360381019061039e919061399f565b6112d7565b005b6103bf60048036038101906103ba91906139c8565b61148b565b005b6103c9611772565b6040516103d69190613f3d565b60405180910390f35b6103f960048036038101906103f4919061393a565b6117aa565b005b610415600480360381019061041091906138ac565b611be2565b60405161042291906143ed565b60405180910390f35b610445600480360381019061044091906138ac565b611cd2565b60405161045291906143d2565b60405180910390f35b610475600480360381019061047091906138ac565b611d1c565b60405161048291906143ed565b60405180910390f35b6104a560048036038101906104a091906138ac565b611d32565b005b6104c160048036038101906104bc9190613a1a565b611e7f565b005b6104dd60048036038101906104d8919061393a565b612114565b005b6104f960048036038101906104f4919061393a565b61222c565b60405161050691906143ed565b60405180910390f35b60008061051a612620565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000610551612620565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061060157508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610640576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610637906141f2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156106a957503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b6106e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106df906143b2565b60405180910390fd5b60006106f2612620565b90508273ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb4877dbaed6986c73208f0c04f109dbb743d2285a0a9b6b1ee90c87929158cfe60405160405180910390a3828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600060029054906101000a900460ff16610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090614372565b60405180910390fd5b60008060026101000a81548160ff021916908315150217905550600061082d612620565b905060008211610872576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610869906140f2565b60405180910390fd5b8060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fb906140b2565b60405180910390fd5b61090e838361264d565b506001600060026101000a81548160ff0219169083151502179055505050565b600060029054906101000a900460ff1661097d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097490614372565b60405180910390fd5b60008060026101000a81548160ff02191690831515021790555060006109a1612620565b9050600082116109e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dd90614232565b60405180910390fd5b8060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6f90614092565b60405180910390fd5b610a828383612761565b506001600060026101000a81548160ff0219169083151502179055505050565b600060029054906101000a900460ff16610af1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae890614372565b60405180910390fd5b60008060026101000a81548160ff02191690831515021790555060008111610b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4590614312565b60405180910390fd5b6000610b58612620565b9050610b8a338260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168485612875565b506001600060026101000a81548160ff02191690831515021790555050565b6000610bb3612620565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610c6357508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c99906141f2565b60405180910390fd5b6000610cac612620565b9050828160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600060019054906101000a900460ff1680610d1c575060008054906101000a900460ff16155b610d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5290614192565b60405180910390fd5b60008060019054906101000a900460ff161590508015610dab576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610db3612cdd565b6000610dbd612620565b9050838160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508015610e675760008060016101000a81548160ff0219169083151502179055505b505050565b600080610e77612620565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000610eb08383610ebc565b60000151905092915050565b610ec46137ea565b6000610ece612dd1565b90508060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505091505092915050565b600080610f81612620565b90508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600060029054906101000a900460ff16610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff490614372565b60405180910390fd5b60008060026101000a81548160ff0219169083151502179055506000611021612620565b905060008211611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d90614252565b60405180910390fd5b8060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ef906142d2565b60405180910390fd5b611102838361264d565b506001600060026101000a81548160ff0219169083151502179055505050565b600060029054906101000a900460ff16611171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116890614372565b60405180910390fd5b60008060026101000a81548160ff0219169083151502179055506000611195612620565b9050600082116111da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d190614292565b60405180910390fd5b8060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461126c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126390614392565b60405180910390fd5b6112768383612761565b506001600060026101000a81548160ff0219169083151502179055505050565b60006012905090565b6000806112aa612620565b90508060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b8073ffffffffffffffffffffffffffffffffffffffff16633e47158c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561131d57600080fd5b505afa158015611331573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135591906138d5565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b990614072565b60405180910390fd5b600115158173ffffffffffffffffffffffffffffffffffffffff166394d8fbd06040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561140e57600080fd5b505af1158015611422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114469190613976565b151514611488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147f90614212565b60405180910390fd5b50565b600060029054906101000a900460ff166114da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d190614372565b60405180910390fd5b60008060026101000a81548160ff02191690831515021790555060006114fe612620565b905060008211611543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a90614152565b60405180910390fd5b818160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016115a19190613f3d565b60206040518083038186803b1580156115b957600080fd5b505afa1580156115cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f191906139f1565b1015611632576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611629906140d2565b60405180910390fd5b818160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611692929190613f58565b60206040518083038186803b1580156116aa57600080fd5b505afa1580156116be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e291906139f1565b1015611723576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171a906142b2565b60405180910390fd5b611753338260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168485612dfe565b506001600060026101000a81548160ff02191690831515021790555050565b60008061177d612620565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600060029054906101000a900460ff166117f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f090614372565b60405180910390fd5b60008060026101000a81548160ff02191690831515021790555060008290506000821161185b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185290614152565b60405180910390fd5b818173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016118959190613f3d565b60206040518083038186803b1580156118ad57600080fd5b505afa1580156118c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e591906139f1565b1015611926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191d906140d2565b60405180910390fd5b818173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611962929190613f58565b60206040518083038186803b15801561197a57600080fd5b505afa15801561198e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b291906139f1565b10156119f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ea906142b2565b60405180910390fd5b60006119fd612620565b905060008160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636af133e3866040518263ffffffff1660e01b8152600401611a5e9190613f3d565b60206040518083038186803b158015611a7657600080fd5b505afa158015611a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aae91906138d5565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b17906142f2565b60405180910390fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff16635a16f502876040518263ffffffff1660e01b8152600401611b6091906143ed565b60206040518083038186803b158015611b7857600080fd5b505afa158015611b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb091906139f1565b9050611bbe33888884612dfe565b50505050506001600060026101000a81548160ff0219169083151502179055505050565b600080611bed6130e0565b905060008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16905060008163ffffffff1611611c5a576000611cc9565b8160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600183611caa91906145d5565b63ffffffff1663ffffffff168152602001908152602001600020600101545b92505050919050565b611cda6137ea565b6000611ce4612620565b9050611d14838260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ebc565b915050919050565b6000611d2782611cd2565b600001519050919050565b6000611d3c612620565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611dec57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611e2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e22906141f2565b60405180910390fd5b6000611e35612620565b9050828160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600060029054906101000a900460ff16611ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec590614372565b60405180910390fd5b60008060026101000a81548160ff02191690831515021790555060008511611f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f22906141d2565b60405180910390fd5b6000611f35612620565b9050858160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611f959190613f3d565b60206040518083038186803b158015611fad57600080fd5b505afa158015611fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe591906139f1565b1015612026576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201d90614112565b60405180910390fd5b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333089898989896040518863ffffffff1660e01b815260040161208f9796959493929190613fb8565b600060405180830381600087803b1580156120a957600080fd5b505af11580156120bd573d6000803e3d6000fd5b505050506120f1338260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168889612dfe565b506001600060026101000a81548160ff0219169083151502179055505050505050565b600060029054906101000a900460ff16612163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215a90614372565b60405180910390fd5b60008060026101000a81548160ff021916908315150217905550600081116121c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b790614312565b60405180910390fd5b60006121cc3384610ebc565b905060006121fd82600001516121ef84602001518661310d90919063ffffffff16565b61312390919063ffffffff16565b905061220b33858584612875565b50506001600060026101000a81548160ff0219169083151502179055505050565b6000438210612270576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612267906141b2565b60405180910390fd5b600061227a6130e0565b905060008160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16905060008163ffffffff1614156122ec5760009250505061261a565b838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018461233d91906145d5565b63ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16116123ed578160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001836123c691906145d5565b63ffffffff1663ffffffff168152602001908152602001600020600101549250505061261a565b838260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008063ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff1611156124715760009250505061261a565b60008060018361248191906145d5565b90505b8163ffffffff168163ffffffff1611156125b1576000600283836124a891906145d5565b6124b29190614516565b826124bd91906145d5565b905060008560000160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481525050905087816000015163ffffffff161415612580578060200151965050505050505061261a565b87816000015163ffffffff16101561259a578193506125aa565b6001826125a791906145d5565b92505b5050612484565b8360000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff168152602001908152602001600020600101549450505050505b92915050565b6000807feedc8c3fe1f2c3ab8dce1e429990e954667f9815b833f1da5923b0c280dd34cd90508091505090565b60006126576130e0565b905060008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1690506000808263ffffffff16116126c5576000612734565b8260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018461271591906145d5565b63ffffffff1663ffffffff168152602001908152602001600020600101545b9050600061274b858361313990919063ffffffff16565b90506127598684848461314f565b505050505050565b600061276b6130e0565b905060008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1690506000808263ffffffff16116127d9576000612848565b8260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018461282991906145d5565b63ffffffff1663ffffffff168152602001908152602001600020600101545b9050600061285f858361340290919063ffffffff16565b905061286d8684848461314f565b505050505050565b600061287f612dd1565b9050828160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015612945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293c90614172565b60405180910390fd5b818160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541015612a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0090614352565b60405180910390fd5b612a9d838260000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461340290919063ffffffff16565b8160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550612bb6828260000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461340290919063ffffffff16565b8160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550612c6685848673ffffffffffffffffffffffffffffffffffffffff166134189092919063ffffffff16565b828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f91fb9d98b786c57d74c099ccd2beca1739e9f6a81fb49001ca465c4b7591bbe285604051612cc491906143ed565b60405180910390a4612cd68583612761565b5050505050565b600060019054906101000a900460ff1680612d03575060008054906101000a900460ff16155b612d42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d3990614192565b60405180910390fd5b60008060019054906101000a900460ff161590508015612d92576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6001600060026101000a81548160ff0219169083151502179055508015612dce5760008060016101000a81548160ff0219169083151502179055505b50565b6000807f7e8b17b07bec32d4181cbe0bc0ebb49f064985defb44e2b5781615189e4789e290508091505090565b612e2b8430848673ffffffffffffffffffffffffffffffffffffffff1661349e909392919063ffffffff16565b6000612e35612dd1565b9050612ecb838260000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461313990919063ffffffff16565b8160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550612fe4828260000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461313990919063ffffffff16565b8160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f6c86f3fd5118b3aa8bb4f389a617046de0a3d3d477de1a1673d227f802f616dc856040516130c791906143ed565b60405180910390a46130d9858361264d565b5050505050565b6000807f05121b62eff87a86d558d12269da9469bab58a7f680d19e08a27a018956bbe7290508091505090565b6000818361311b9190614547565b905092915050565b6000818361313191906144e5565b905092915050565b600081836131479190614455565b905092915050565b600061317343604051806060016040528060358152602001614f4e60359139613527565b9050600061317f6130e0565b905060008563ffffffff1611801561321f57508163ffffffff168160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001886131e991906145d5565b63ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16145b1561329b57828160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018861327591906145d5565b63ffffffff1663ffffffff168152602001908152602001600020600101819055506133b5565b60405180604001604052808363ffffffff168152602001848152508160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008763ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff1602179055506020820151816001015590505060018561335591906144ab565b8160010160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055505b82848773ffffffffffffffffffffffffffffffffffffffff167f53ed7954de66613e30dd29b46ab783aa594e6309d021d8854c76bb3325d03aa360405160405180910390a4505050505050565b6000818361341091906145a1565b905092915050565b6134998363a9059cbb60e01b8484604051602401613437929190614027565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061357d565b505050565b613521846323b872dd60e01b8585856040516024016134bf93929190613f81565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061357d565b50505050565b600064010000000083108290613573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161356a9190614050565b60405180910390fd5b5082905092915050565b60006135df826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166136449092919063ffffffff16565b905060008151111561363f57808060200190518101906135ff9190613976565b61363e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161363590614332565b60405180910390fd5b5b505050565b6060613653848460008561365c565b90509392505050565b6060824710156136a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161369890614132565b60405180910390fd5b6136aa85613770565b6136e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136e090614272565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516137129190613f26565b60006040518083038185875af1925050503d806000811461374f576040519150601f19603f3d011682016040523d82523d6000602084013e613754565b606091505b5091509150613764828286613783565b92505050949350505050565b600080823b905060008111915050919050565b60608315613793578290506137e3565b6000835111156137a65782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137da9190614050565b60405180910390fd5b9392505050565b604051806040016040528060008152602001600081525090565b60008135905061381381614ec3565b92915050565b60008151905061382881614ec3565b92915050565b60008151905061383d81614eda565b92915050565b60008135905061385281614ef1565b92915050565b60008135905061386781614f08565b92915050565b60008135905061387c81614f1f565b92915050565b60008151905061389181614f1f565b92915050565b6000813590506138a681614f36565b92915050565b6000602082840312156138be57600080fd5b60006138cc84828501613804565b91505092915050565b6000602082840312156138e757600080fd5b60006138f584828501613819565b91505092915050565b6000806040838503121561391157600080fd5b600061391f85828601613804565b925050602061393085828601613804565b9150509250929050565b6000806040838503121561394d57600080fd5b600061395b85828601613804565b925050602061396c8582860161386d565b9150509250929050565b60006020828403121561398857600080fd5b60006139968482850161382e565b91505092915050565b6000602082840312156139b157600080fd5b60006139bf84828501613858565b91505092915050565b6000602082840312156139da57600080fd5b60006139e88482850161386d565b91505092915050565b600060208284031215613a0357600080fd5b6000613a1184828501613882565b91505092915050565b600080600080600060a08688031215613a3257600080fd5b6000613a408882890161386d565b9550506020613a518882890161386d565b9450506040613a6288828901613897565b9350506060613a7388828901613843565b9250506080613a8488828901613843565b9150509295509295909350565b613a9a81614609565b82525050565b613aa981614627565b82525050565b6000613aba82614423565b613ac48185614439565b9350613ad481856020860161468a565b80840191505092915050565b6000613aeb8261442e565b613af58185614444565b9350613b0581856020860161468a565b613b0e8161471b565b840191505092915050565b6000613b26603983614444565b9150613b318261472c565b604082019050919050565b6000613b49602d83614444565b9150613b548261477b565b604082019050919050565b6000613b6c602c83614444565b9150613b77826147ca565b604082019050919050565b6000613b8f601f83614444565b9150613b9a82614819565b602082019050919050565b6000613bb2602c83614444565b9150613bbd82614842565b604082019050919050565b6000613bd5602983614444565b9150613be082614891565b604082019050919050565b6000613bf8602683614444565b9150613c03826148e0565b604082019050919050565b6000613c1b601c83614444565b9150613c268261492f565b602082019050919050565b6000613c3e602a83614444565b9150613c4982614958565b604082019050919050565b6000613c61602e83614444565b9150613c6c826149a7565b604082019050919050565b6000613c84602a83614444565b9150613c8f826149f6565b604082019050919050565b6000613ca7602683614444565b9150613cb282614a45565b604082019050919050565b6000613cca601d83614444565b9150613cd582614a94565b602082019050919050565b6000613ced602483614444565b9150613cf882614abd565b604082019050919050565b6000613d10603283614444565b9150613d1b82614b0c565b604082019050919050565b6000613d33602c83614444565b9150613d3e82614b5b565b604082019050919050565b6000613d56601d83614444565b9150613d6182614baa565b602082019050919050565b6000613d79603283614444565b9150613d8482614bd3565b604082019050919050565b6000613d9c603083614444565b9150613da782614c22565b604082019050919050565b6000613dbf602a83614444565b9150613dca82614c71565b604082019050919050565b6000613de2602183614444565b9150613ded82614cc0565b604082019050919050565b6000613e05602283614444565b9150613e1082614d0f565b604082019050919050565b6000613e28602a83614444565b9150613e3382614d5e565b604082019050919050565b6000613e4b602983614444565b9150613e5682614dad565b604082019050919050565b6000613e6e601f83614444565b9150613e7982614dfc565b602082019050919050565b6000613e91602f83614444565b9150613e9c82614e25565b604082019050919050565b6000613eb4602183614444565b9150613ebf82614e74565b604082019050919050565b604082016000820151613ee06000850182613ef9565b506020820151613ef36020850182613ef9565b50505050565b613f0281614663565b82525050565b613f1181614663565b82525050565b613f208161467d565b82525050565b6000613f328284613aaf565b915081905092915050565b6000602082019050613f526000830184613a91565b92915050565b6000604082019050613f6d6000830185613a91565b613f7a6020830184613a91565b9392505050565b6000606082019050613f966000830186613a91565b613fa36020830185613a91565b613fb06040830184613f08565b949350505050565b600060e082019050613fcd600083018a613a91565b613fda6020830189613a91565b613fe76040830188613f08565b613ff46060830187613f08565b6140016080830186613f17565b61400e60a0830185613aa0565b61401b60c0830184613aa0565b98975050505050505050565b600060408201905061403c6000830185613a91565b6140496020830184613f08565b9392505050565b6000602082019050818103600083015261406a8184613ae0565b905092915050565b6000602082019050818103600083015261408b81613b19565b9050919050565b600060208201905081810360008301526140ab81613b3c565b9050919050565b600060208201905081810360008301526140cb81613b5f565b9050919050565b600060208201905081810360008301526140eb81613b82565b9050919050565b6000602082019050818103600083015261410b81613ba5565b9050919050565b6000602082019050818103600083015261412b81613bc8565b9050919050565b6000602082019050818103600083015261414b81613beb565b9050919050565b6000602082019050818103600083015261416b81613c0e565b9050919050565b6000602082019050818103600083015261418b81613c31565b9050919050565b600060208201905081810360008301526141ab81613c54565b9050919050565b600060208201905081810360008301526141cb81613c77565b9050919050565b600060208201905081810360008301526141eb81613c9a565b9050919050565b6000602082019050818103600083015261420b81613cbd565b9050919050565b6000602082019050818103600083015261422b81613ce0565b9050919050565b6000602082019050818103600083015261424b81613d03565b9050919050565b6000602082019050818103600083015261426b81613d26565b9050919050565b6000602082019050818103600083015261428b81613d49565b9050919050565b600060208201905081810360008301526142ab81613d6c565b9050919050565b600060208201905081810360008301526142cb81613d8f565b9050919050565b600060208201905081810360008301526142eb81613db2565b9050919050565b6000602082019050818103600083015261430b81613dd5565b9050919050565b6000602082019050818103600083015261432b81613df8565b9050919050565b6000602082019050818103600083015261434b81613e1b565b9050919050565b6000602082019050818103600083015261436b81613e3e565b9050919050565b6000602082019050818103600083015261438b81613e61565b9050919050565b600060208201905081810360008301526143ab81613e84565b9050919050565b600060208201905081810360008301526143cb81613ea7565b9050919050565b60006040820190506143e76000830184613eca565b92915050565b60006020820190506144026000830184613f08565b92915050565b600060208201905061441d6000830184613f17565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061446082614663565b915061446b83614663565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156144a05761449f6146bd565b5b828201905092915050565b60006144b68261466d565b91506144c18361466d565b92508263ffffffff038211156144da576144d96146bd565b5b828201905092915050565b60006144f082614663565b91506144fb83614663565b92508261450b5761450a6146ec565b5b828204905092915050565b60006145218261466d565b915061452c8361466d565b92508261453c5761453b6146ec565b5b828204905092915050565b600061455282614663565b915061455d83614663565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614596576145956146bd565b5b828202905092915050565b60006145ac82614663565b91506145b783614663565b9250828210156145ca576145c96146bd565b5b828203905092915050565b60006145e08261466d565b91506145eb8361466d565b9250828210156145fe576145fd6146bd565b5b828203905092915050565b600061461482614643565b9050919050565b60008115159050919050565b6000819050919050565b600061463c82614609565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60005b838110156146a857808201518184015260208101905061468d565b838111156146b7576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f507269736d3a3a6265636f6d653a206f6e6c792070726f78792061646d696e2060008201527f63616e206368616e676520696d706c656d656e746174696f6e00000000000000602082015250565b7f43726f776e3a3a72656d6f76655650666f7243543a206f6e6c79204d6f6e617360008201527f7465727920636f6e747261637400000000000000000000000000000000000000602082015250565b7f43726f776e3a3a6164645650666f724c543a206f6e6c79206c6f636b4d616e6160008201527f67657220636f6e74726163740000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a7374616b653a206e6f7420656e6f75676820746f6b656e7300600082015250565b7f43726f776e3a3a6164645650666f724c543a2063616e6e6f742061646420302060008201527f766f74696e6720706f7765720000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a7374616b65576974685065726d69743a206e6f7420656e6f7560008201527f676820746f6b656e730000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a7374616b653a2063616e6e6f74207374616b65203000000000600082015250565b7f43726f776e3a3a5f77697468647261773a206e6f7420656e6f75676820746f6b60008201527f656e73207374616b656400000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f43726f776e3a3a766f74696e67506f7765724f6641743a206e6f74207965742060008201527f64657465726d696e656400000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a7374616b65576974685065726d69743a2063616e6e6f74207360008201527f74616b6520300000000000000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a6f6e6c794b696e673a206e6f7420746865206b696e67000000600082015250565b7f507269736d3a3a6265636f6d653a206368616e6765206e6f7420617574686f7260008201527f697a656400000000000000000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a72656d6f76655650666f7243543a2063616e6e6f742072656d60008201527f6f7665203020766f74696e6720706f7765720000000000000000000000000000602082015250565b7f43726f776e3a3a6164645650666f7256543a2063616e6e6f742061646420302060008201527f766f74696e6720706f7765720000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f43726f776e3a3a72656d6f76655650666f7255543a2063616e6e6f742072656d60008201527f6f7665203020766f74696e6720706f7765720000000000000000000000000000602082015250565b7f43726f776e3a3a7374616b653a206d75737420617070726f766520746f6b656e60008201527f73206265666f7265207374616b696e6700000000000000000000000000000000602082015250565b7f43726f776e3a3a6164645650666f7256543a206f6e6c79204d6f6e617374657260008201527f7920636f6e747261637400000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a7374616b653a20746f6b656e206e6f7420737570706f72746560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a77697468647261773a2063616e6e6f7420776974686472617760008201527f2030000000000000000000000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a5f77697468647261773a206e6f7420656e6f75676820766f7460008201527f696e6720706f7765720000000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f43726f776e3a3a72656d6f76655650666f7255543a206f6e6c79206c6f636b4d60008201527f616e6167657220636f6e74726163740000000000000000000000000000000000602082015250565b7f43726f776e3a3a737563636565643a206e6f742076616c69642061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b614ecc81614609565b8114614ed757600080fd5b50565b614ee38161461b565b8114614eee57600080fd5b50565b614efa81614627565b8114614f0557600080fd5b50565b614f1181614631565b8114614f1c57600080fd5b50565b614f2881614663565b8114614f3357600080fd5b50565b614f3f8161467d565b8114614f4a57600080fd5b5056fe43726f776e3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473a2646970667358221220bcab3d752c1ed8a8663fb697d5413783bea4a84fda1f7e7f93c43dc2b808953364736f6c63430008020033",
  "devdoc": {
    "details": "Implementation contract for voting power prism proxy. Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract. The exception to this is the `become` function specified in PrismProxyImplementation. This function is called once and is used by this contract to accept its role as the implementation for the prism proxy",
    "kind": "dev",
    "methods": {
      "addVotingPowerForLockedTokens(address,uint256)": {
        "params": {
          "account": "The recipient of voting power",
          "amount": "The amount of voting power to add"
        }
      },
      "addVotingPowerForVestingTokens(address,uint256)": {
        "params": {
          "account": "The recipient of voting power",
          "amount": "The amount of voting power to add"
        }
      },
      "become(address)": {
        "params": {
          "prism": "Prism Proxy contract"
        }
      },
      "getAmountStaked(address,address)": {
        "params": {
          "stakedToken": "The staked token",
          "staker": "The user with staked tokens"
        },
        "returns": {
          "_0": "total amount staked"
        }
      },
      "getGovernanceTokenAmountStaked(address)": {
        "params": {
          "staker": "The user with staked KING"
        },
        "returns": {
          "_0": "total KING amount staked"
        }
      },
      "getGovernanceTokenStake(address)": {
        "params": {
          "staker": "The user with staked KING"
        },
        "returns": {
          "_0": "total KING staked"
        }
      },
      "getStake(address,address)": {
        "params": {
          "stakedToken": "The staked token",
          "staker": "The user with staked tokens"
        },
        "returns": {
          "_0": "total staked"
        }
      },
      "govToken()": {
        "returns": {
          "_0": "Address of KING token"
        }
      },
      "initialize(address,address)": {
        "details": "Should be called via VotingPowerPrism before calling anything else",
        "params": {
          "_govToken": "address of KING token",
          "_vestingContract": "address of Vesting contract"
        }
      },
      "lockManager()": {
        "returns": {
          "_0": "Address of lockManager"
        }
      },
      "owner()": {
        "returns": {
          "_0": "Address of owner"
        }
      },
      "removeVotingPowerForClaimedTokens(address,uint256)": {
        "params": {
          "account": "The account with voting power",
          "amount": "The amount of voting power to remove"
        }
      },
      "removeVotingPowerForUnlockedTokens(address,uint256)": {
        "params": {
          "account": "The account with voting power",
          "amount": "The amount of voting power to remove"
        }
      },
      "setLockManager(address)": {
        "params": {
          "newLockManager": "Address of lockManager"
        }
      },
      "setTokenRegistry(address)": {
        "params": {
          "registry": "Address of token registry"
        }
      },
      "stake(address,uint256)": {
        "params": {
          "amount": "The amount to stake",
          "token": "The token to stake"
        }
      },
      "stake(uint256)": {
        "params": {
          "amount": "The amount to stake"
        }
      },
      "stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "The amount to stake",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "succeed(address)": {
        "params": {
          "newKing": "New owner address"
        }
      },
      "tokenRegistry()": {
        "returns": {
          "_0": "Address of token registry"
        }
      },
      "vestingContract()": {
        "returns": {
          "_0": "Address of vesting contract"
        }
      },
      "votingDecimals()": {
        "returns": {
          "_0": "decimals"
        }
      },
      "votingPowerOf(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "votingPowerOfAt(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "The amount to withdraw",
          "token": "The token to withdraw"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "The amount to withdraw"
        }
      }
    },
    "title": "CrownCourt (prev. VotingPower)",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RoyalSuccession(address,address)": {
        "notice": "Event emitted when the owner of the voting power contract is updated"
      },
      "Staked(address,address,uint256,uint256)": {
        "notice": "An event that's emitted when a user's staked balance increases"
      },
      "VotingPowerChanged(address,uint256,uint256)": {
        "notice": "An event that's emitted when an account's vote balance changes"
      },
      "Withdrawn(address,address,uint256,uint256)": {
        "notice": "An event that's emitted when a user's staked balance decreases"
      }
    },
    "kind": "user",
    "methods": {
      "addVotingPowerForLockedTokens(address,uint256)": {
        "notice": "Count locked tokens toward voting power for `account`"
      },
      "addVotingPowerForVestingTokens(address,uint256)": {
        "notice": "Count vesting KING tokens toward voting power for `account`"
      },
      "become(address)": {
        "notice": "Accept invitation to be implementation contract for proxy"
      },
      "getAmountStaked(address,address)": {
        "notice": "Get total amount of tokens staked in contract by `staker`"
      },
      "getGovernanceTokenAmountStaked(address)": {
        "notice": "Get total amount of KING tokens staked in contract by `staker`"
      },
      "getGovernanceTokenStake(address)": {
        "notice": "Get staked amount and voting power from KING tokens staked in contract by `staker`"
      },
      "getStake(address,address)": {
        "notice": "Get total staked amount and voting power from `stakedToken` staked in contract by `staker`"
      },
      "govToken()": {
        "notice": "Address of KING token"
      },
      "initialize(address,address)": {
        "notice": "Initialize VotingPower contract"
      },
      "lockManager()": {
        "notice": "Address of lockManager"
      },
      "owner()": {
        "notice": "Address of owner"
      },
      "removeVotingPowerForClaimedTokens(address,uint256)": {
        "notice": "Remove claimed vesting KING tokens from voting power for `account`"
      },
      "removeVotingPowerForUnlockedTokens(address,uint256)": {
        "notice": "Remove unlocked tokens from voting power for `account`"
      },
      "setLockManager(address)": {
        "notice": "Sets lockManager address"
      },
      "setTokenRegistry(address)": {
        "notice": "Sets token registry address"
      },
      "stake(address,uint256)": {
        "notice": "Stake LP tokens to unlock voting power for `msg.sender`"
      },
      "stake(uint256)": {
        "notice": "Stake KING tokens to unlock voting power for `msg.sender`"
      },
      "stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Stake KING tokens using offchain approvals to unlock voting power"
      },
      "succeed(address)": {
        "notice": "Change owner of vesting contract"
      },
      "tokenRegistry()": {
        "notice": "Address of token registry"
      },
      "vestingContract()": {
        "notice": "Address of vesting contract"
      },
      "votingDecimals()": {
        "notice": "Decimals used for voting power"
      },
      "votingPowerOf(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "votingPowerOfAt(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw staked LP tokens, removing voting power for `msg.sender`"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw staked KING tokens, removing voting power for `msg.sender`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 439,
        "contract": "contracts/governance/Crown.sol:Crown",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 442,
        "contract": "contracts/governance/Crown.sol:Crown",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 14793,
        "contract": "contracts/governance/Crown.sol:Crown",
        "label": "_notEntered",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 14834,
        "contract": "contracts/governance/Crown.sol:Crown",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}