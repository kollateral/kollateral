{
  "address": "0xAc8782195fF6Aea8684b32e838E5b196e28c61Af",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_king",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupply",
          "type": "uint256"
        }
      ],
      "name": "BurnAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        }
      ],
      "name": "BurnCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "BurnProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldKing",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newKing",
          "type": "address"
        }
      ],
      "name": "KingAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedKing",
          "type": "address"
        }
      ],
      "name": "KingCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldKing",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newKing",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "KingProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldMiners",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMiners",
          "type": "address"
        }
      ],
      "name": "MinersAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedMiners",
          "type": "address"
        }
      ],
      "name": "MinersCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldMiners",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMiners",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "MinersProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupply",
          "type": "uint256"
        }
      ],
      "name": "MintAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "MintCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldCap",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newCap",
          "type": "uint32"
        }
      ],
      "name": "MintCapAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "proposedCap",
          "type": "uint32"
        }
      ],
      "name": "MintCapCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldCap",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newCap",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "MintCapProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "MintProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldProposalLength",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newProposalLength",
          "type": "uint32"
        }
      ],
      "name": "ProposalLengthAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "proposedProposalLength",
          "type": "uint32"
        }
      ],
      "name": "ProposalLengthCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldProposalLength",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newProposalLength",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "ProposalLengthProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldWaitingPeriod",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newWaitingPeriod",
          "type": "uint32"
        }
      ],
      "name": "WaitingPeriodAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "proposedWaitingPeriod",
          "type": "uint32"
        }
      ],
      "name": "WaitingPeriodCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldWaitingPeriod",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newWaitingPeriod",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "WaitingPeriodProposed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptKing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptMiners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptMintCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptProposalLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptSupplyChangeWaitingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelKing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelMiners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelMintCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelProposalLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelWaitingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "changeAllowedAfter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "king",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingKing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newKing",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingMiners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newMiners",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingMintCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "newCap",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingProposalLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "newLength",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingWaitingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "newPeriod",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalLength",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalLengthMinimum",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "proposeBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newKing",
          "type": "address"
        }
      ],
      "name": "proposeKing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMiners",
          "type": "address"
        }
      ],
      "name": "proposeMiners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "proposeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newCap",
          "type": "uint32"
        }
      ],
      "name": "proposeMintCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newLength",
          "type": "uint32"
        }
      ],
      "name": "proposeNewProposalLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newPeriod",
          "type": "uint32"
        }
      ],
      "name": "proposeSupplyChangeWaitingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ICrownGovernanceToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa08aa41dd1e12e9fadd104f1d23b42107b14117698d315a058d0314fc3a9ee35",
  "receipt": {
    "to": null,
    "from": "0xfEeDc0DE1EBE0A72f52590Df786101e1c3944545",
    "contractAddress": "0xAc8782195fF6Aea8684b32e838E5b196e28c61Af",
    "transactionIndex": 1,
    "gasUsed": "5284886",
    "logsBloom": "0x
    "blockHash": "0xae6e1a2ef205d5c45072851fd7bd23ddf625792a69cd60b030d1ce47c0a2dacf",
    "transactionHash": "0xa08aa41dd1e12e9fadd104f1d23b42107b14117698d315a058d0314fc3a9ee35",
    "logs": [],
    "blockNumber": 8229054,
    "cumulativeGasUsed": "5305886",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1aBB9e038819c9Cc6BdB34848b0De193D7c3D00a",
    "0x0A26a1eBca217c8090f9a7759Ef82f19a1E19ea1"
  ],
  "solcInputHash": "e885469200b403bc2af39246669116fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.92b52cbf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_king\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"BurnAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"BurnCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"BurnProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldKing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newKing\",\"type\":\"address\"}],\"name\":\"KingAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedKing\",\"type\":\"address\"}],\"name\":\"KingCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldKing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newKing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"KingProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMiners\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMiners\",\"type\":\"address\"}],\"name\":\"MinersAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedMiners\",\"type\":\"address\"}],\"name\":\"MinersCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMiners\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMiners\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"MinersProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"MintAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"MintCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldCap\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newCap\",\"type\":\"uint32\"}],\"name\":\"MintCapAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"proposedCap\",\"type\":\"uint32\"}],\"name\":\"MintCapCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldCap\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newCap\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"MintCapProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"MintProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldProposalLength\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newProposalLength\",\"type\":\"uint32\"}],\"name\":\"ProposalLengthAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"proposedProposalLength\",\"type\":\"uint32\"}],\"name\":\"ProposalLengthCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldProposalLength\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newProposalLength\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalLengthProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldWaitingPeriod\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newWaitingPeriod\",\"type\":\"uint32\"}],\"name\":\"WaitingPeriodAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"proposedWaitingPeriod\",\"type\":\"uint32\"}],\"name\":\"WaitingPeriodCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldWaitingPeriod\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newWaitingPeriod\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"WaitingPeriodProposed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptKing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptMiners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptMintCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposalLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptSupplyChangeWaitingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelKing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelMiners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelMintCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelProposalLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelWaitingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeAllowedAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"king\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingKing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newKing\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newMiners\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMintCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"newCap\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingProposalLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"newLength\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingWaitingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"newPeriod\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalLength\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalLengthMinimum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"proposeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newKing\",\"type\":\"address\"}],\"name\":\"proposeKing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMiners\",\"type\":\"address\"}],\"name\":\"proposeMiners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"proposeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newCap\",\"type\":\"uint32\"}],\"name\":\"proposeMintCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newLength\",\"type\":\"uint32\"}],\"name\":\"proposeNewProposalLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newPeriod\",\"type\":\"uint32\"}],\"name\":\"proposeSupplyChangeWaitingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ICrownGovernanceToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Collective responsible for enacting decisions related to Crown governance token supply\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_king\":\"The king account for this contract\",\"_token\":\"The address for the token\"}},\"proposeBurn(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to be burned\",\"src\":\"The address of the account that will burn tokens\"}},\"proposeKing(address)\":{\"params\":{\"newKing\":\"The address of the new king\"}},\"proposeMiners(address)\":{\"params\":{\"newMiners\":\"new supply manager address\"}},\"proposeMint(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to be minted\",\"dst\":\"The address of the destination account\"}},\"proposeMintCap(uint32)\":{\"params\":{\"newCap\":\"The new mint cap in bips (10,000 bips = 1% of totalSupply)\"}},\"proposeNewProposalLength(uint32)\":{\"params\":{\"newLength\":\"new proposal length\"}},\"proposeSupplyChangeWaitingPeriod(uint32)\":{\"params\":{\"newPeriod\":\"new waiting period\"}}},\"title\":\"Miners (prev. SupplyManager)\",\"version\":1},\"userdoc\":{\"events\":{\"BurnAccepted(uint256,address,uint256,uint256)\":{\"notice\":\"An event that's emitted when a new burn is accepted\"},\"BurnCanceled(uint256,address)\":{\"notice\":\"An event that's emitted when a burn proposal is canceled\"},\"BurnProposed(uint256,address,uint256,uint256,uint256)\":{\"notice\":\"An event that's emitted when a new burn is proposed\"},\"KingAccepted(address,address)\":{\"notice\":\"An event that's emitted when a new king is accepted\"},\"KingCanceled(address)\":{\"notice\":\"An event that's emitted when an king proposal is canceled\"},\"KingProposed(address,address,uint256)\":{\"notice\":\"An event that's emitted when a new king is proposed\"},\"MinersAccepted(address,address)\":{\"notice\":\"An event that's emitted when a new supply manager is accepted\"},\"MinersCanceled(address)\":{\"notice\":\"An event that's emitted when a supply manager proposal is canceled\"},\"MinersProposed(address,address,uint256)\":{\"notice\":\"An event that's emitted when a new supply manager is proposed\"},\"MintAccepted(uint256,address,uint256,uint256)\":{\"notice\":\"An event that's emitted when a new mint is accepted\"},\"MintCanceled(uint256,address)\":{\"notice\":\"An event that's emitted when a mint proposal is canceled\"},\"MintCapAccepted(uint32,uint32)\":{\"notice\":\"An event that's emitted when a new mint cap is accepted\"},\"MintCapCanceled(uint32)\":{\"notice\":\"An event that's emitted when a mint cap proposal is canceled\"},\"MintCapProposed(uint32,uint32,uint256)\":{\"notice\":\"An event that's emitted when a new mint cap is proposed\"},\"MintProposed(uint256,address,uint256,uint256,uint256)\":{\"notice\":\"An event that's emitted when a new mint is proposed\"},\"ProposalLengthAccepted(uint32,uint32)\":{\"notice\":\"An event that's emitted when a new proposal length is accepted\"},\"ProposalLengthCanceled(uint32)\":{\"notice\":\"An event that's emitted when a proposal length proposal is canceled\"},\"ProposalLengthProposed(uint32,uint32,uint256)\":{\"notice\":\"An event that's emitted when a new proposal length is proposed\"},\"WaitingPeriodAccepted(uint32,uint32)\":{\"notice\":\"An event that's emitted when a new waiting period is accepted\"},\"WaitingPeriodCanceled(uint32)\":{\"notice\":\"An event that's emitted when a waiting period proposal is canceled\"},\"WaitingPeriodProposed(uint32,uint32,uint256)\":{\"notice\":\"An event that's emitted when a new waiting period is proposed\"}},\"kind\":\"user\",\"methods\":{\"acceptBurn()\":{\"notice\":\"Accept proposed token burn\"},\"acceptKing()\":{\"notice\":\"Accept proposed king\"},\"acceptMiners()\":{\"notice\":\"Accept change to the supplyManager address\"},\"acceptMint()\":{\"notice\":\"Accept proposed token mint\"},\"acceptMintCap()\":{\"notice\":\"Accept change to the maximum amount of tokens that can be minted at once\"},\"acceptProposalLength()\":{\"notice\":\"Accept change to the proposal length\"},\"acceptSupplyChangeWaitingPeriod()\":{\"notice\":\"Accept change to the supply change waiting period\"},\"cancelBurn()\":{\"notice\":\"Cancel proposed token burn\"},\"cancelKing()\":{\"notice\":\"Cancel proposed king change\"},\"cancelMiners()\":{\"notice\":\"Cancel proposed supply manager update\"},\"cancelMint()\":{\"notice\":\"Cancel proposed token mint\"},\"cancelMintCap()\":{\"notice\":\"Cancel proposed mint cap\"},\"cancelProposalLength()\":{\"notice\":\"Cancel proposed update to proposal length\"},\"cancelWaitingPeriod()\":{\"notice\":\"Cancel proposed waiting period\"},\"changeAllowedAfter()\":{\"notice\":\"The timestamp after which a change may occur\"},\"constructor\":{\"notice\":\"Construct a new supply manager\"},\"king()\":{\"notice\":\"Address which may make changes the token supply by calling provided functions\"},\"pendingBurn()\":{\"notice\":\"Current pending burn proposal\"},\"pendingKing()\":{\"notice\":\"Current pending king proposal\"},\"pendingMiners()\":{\"notice\":\"Current pending supply manager proposal\"},\"pendingMint()\":{\"notice\":\"Current pending mint proposal\"},\"pendingMintCap()\":{\"notice\":\"Current pending mint cap proposal\"},\"pendingProposalLength()\":{\"notice\":\"Current pending proposal length proposal\"},\"pendingWaitingPeriod()\":{\"notice\":\"Current pending waiting period proposal\"},\"proposalLength()\":{\"notice\":\"The current time between proposal and acceptance\"},\"proposalLengthMinimum()\":{\"notice\":\"The minimum time between proposal and acceptance\"},\"proposeBurn(address,uint256)\":{\"notice\":\"Propose a new token burn\"},\"proposeKing(address)\":{\"notice\":\"Propose a new king\"},\"proposeMiners(address)\":{\"notice\":\"Propose change to the supplyManager address\"},\"proposeMint(address,uint256)\":{\"notice\":\"Propose a new token mint\"},\"proposeMintCap(uint32)\":{\"notice\":\"Propose change to the maximum amount of tokens that can be minted at once\"},\"proposeNewProposalLength(uint32)\":{\"notice\":\"Propose change to the proposal length\"},\"proposeSupplyChangeWaitingPeriod(uint32)\":{\"notice\":\"Propose change to the supply change waiting period\"},\"token()\":{\"notice\":\"Crown Governance token\"}},\"notice\":\"Decisions are made via a timelocked propose/accept schemeInitial proposal length (timelock) is 30 days\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Miners.sol\":\"Miners\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x44300341eb97e8790e56e0823e8c3d09695fc2ee80555a83a9585f307381f324\",\"license\":\"MIT\"},\"contracts/governance/Miners.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n      \\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2588\\u2588\\n                \\u2593\\u2593\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\n              \\u2593\\u2593\\u2593\\u2593\\u2588\\u2588\\u2592\\u2592\\u2592\\u2592\\u2593\\u2593\\n            \\u2593\\u2593\\u2592\\u2592\\u2588\\u2588  \\u2593\\u2593\\u2592\\u2592\\u2593\\u2593\\n          \\u2593\\u2593\\u2593\\u2593\\u2588\\u2588    \\u2593\\u2593\\u2592\\u2592\\u2593\\u2593\\n        \\u2593\\u2593\\u2592\\u2592\\u2588\\u2588      \\u2593\\u2593\\u2592\\u2592\\u2593\\u2593\\n      \\u2593\\u2593\\u2593\\u2593\\u2588\\u2588        \\u2593\\u2593\\u2592\\u2592\\u2593\\u2593\\n    \\u2593\\u2593\\u2592\\u2592\\u2588\\u2588            \\u2593\\u2593\\n  \\u2593\\u2593\\u2593\\u2593\\u2588\\u2588                          \\u2588\\u2588\\u2588\\u2588\\n\\u2593\\u2593\\u2592\\u2592\\u2588\\u2588                      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2588\\u2588\\n\\u2593\\u2593\\u2588\\u2588                  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588            \\u2588\\u2588\\n                \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                    \\u2588\\u2588\\n              \\u2588\\u2588\\u2591\\u2591                  \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2588\\u2588\\n              \\u2588\\u2588  \\u2591\\u2591          \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592        \\u2588\\u2588\\n              \\u2588\\u2588    \\u2591\\u2591  \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592          \\u2592\\u2592\\u2592\\u2592\\u2588\\u2588\\n              \\u2588\\u2588      \\u2591\\u2591          \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2588\\u2588\\n              \\u2588\\u2588\\u2592\\u2592\\u2592\\u2592  \\u2591\\u2591    \\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n                \\u2588\\u2588\\u2592\\u2592\\u2591\\u2591\\u2591\\u2591\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n                  \\u2588\\u2588\\u2592\\u2592\\u2591\\u2591\\u2592\\u2592\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n                    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"../interfaces/governance/ICrownGovernanceToken.sol\\\";\\n\\nimport \\\"../libraries/governance/LibCrownStorage.sol\\\";\\n\\n/**\\n * @title Miners (prev. SupplyManager)\\n * @dev Collective responsible for enacting decisions related to Crown governance token supply\\n * @notice Decisions are made via a timelocked propose/accept scheme\\n * @notice Initial proposal length (timelock) is 30 days\\n */\\ncontract Miners {\\n\\t/// @notice Crown Governance token\\n\\tICrownGovernanceToken public token;\\n\\n\\t/// @notice Address which may make changes the token supply by calling provided functions\\n\\taddress public king;\\n\\n\\t/// @notice The timestamp after which a change may occur\\n\\tuint256 public changeAllowedAfter;\\n\\n\\t/// @notice The current time between proposal and acceptance\\n\\tuint32 public proposalLength = 1 days * 30;\\n\\n\\t/// @notice The minimum time between proposal and acceptance\\n\\tuint32 public proposalLengthMinimum = 1 days * 7;\\n\\n\\t/// @notice New king proposal\\n\\tstruct RoyalDecree {\\n\\t\\tuint256 eta;\\n\\t\\taddress newKing;\\n\\t}\\n\\n\\t/// @notice New mint proposal\\n\\tstruct MintProposal {\\n\\t\\tuint256 eta;\\n\\t\\taddress destination;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\t/// @notice New burn proposal\\n\\tstruct BurnProposal {\\n\\t\\tuint256 eta;\\n\\t\\taddress source;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\t/// @notice New mint cap proposal\\n\\tstruct MintCapProposal {\\n\\t\\tuint256 eta;\\n\\t\\tuint32 newCap;\\n\\t}\\n\\n\\t/// @notice New waiting period proposal\\n\\tstruct WaitingPeriodProposal {\\n\\t\\tuint256 eta;\\n\\t\\tuint32 newPeriod;\\n\\t}\\n\\n\\t/// @notice New supply manager proposal\\n\\tstruct MinersProposal {\\n\\t\\tuint256 eta;\\n\\t\\taddress newMiners;\\n\\t}\\n\\n\\t/// @notice New proposal length proposal\\n\\tstruct ProposalLengthProposal {\\n\\t\\tuint256 eta;\\n\\t\\tuint32 newLength;\\n\\t}\\n\\n\\t/// @notice Current pending king proposal\\n\\tRoyalDecree public pendingKing;\\n\\n\\t/// @notice Current pending mint proposal\\n\\tMintProposal public pendingMint;\\n\\n\\t/// @notice Current pending burn proposal\\n\\tBurnProposal public pendingBurn;\\n\\n\\t/// @notice Current pending mint cap proposal\\n\\tMintCapProposal public pendingMintCap;\\n\\n\\t/// @notice Current pending waiting period proposal\\n\\tWaitingPeriodProposal public pendingWaitingPeriod;\\n\\n\\t/// @notice Current pending supply manager proposal\\n\\tMinersProposal public pendingMiners;\\n\\n\\t/// @notice Current pending proposal length proposal\\n\\tProposalLengthProposal public pendingProposalLength;\\n\\n\\t/// @notice An event that's emitted when a new king is proposed\\n\\tevent KingProposed(address indexed oldKing, address indexed newKing, uint256 eta);\\n\\n\\t/// @notice An event that's emitted when an king proposal is canceled\\n\\tevent KingCanceled(address indexed proposedKing);\\n\\n\\t/// @notice An event that's emitted when a new king is accepted\\n\\tevent KingAccepted(address indexed oldKing, address indexed newKing);\\n\\n\\t/// @notice An event that's emitted when a new mint is proposed\\n\\tevent MintProposed(\\n\\t\\tuint256 indexed amount,\\n\\t\\taddress indexed recipient,\\n\\t\\tuint256 oldSupply,\\n\\t\\tuint256 newSupply,\\n\\t\\tuint256 eta\\n\\t);\\n\\n\\t/// @notice An event that's emitted when a mint proposal is canceled\\n\\tevent MintCanceled(uint256 indexed amount, address indexed recipient);\\n\\n\\t/// @notice An event that's emitted when a new mint is accepted\\n\\tevent MintAccepted(uint256 indexed amount, address indexed recipient, uint256 oldSupply, uint256 newSupply);\\n\\n\\t/// @notice An event that's emitted when a new burn is proposed\\n\\tevent BurnProposed(uint256 indexed amount, address indexed source, uint256 oldSupply, uint256 newSupply, uint256 eta);\\n\\n\\t/// @notice An event that's emitted when a burn proposal is canceled\\n\\tevent BurnCanceled(uint256 indexed amount, address indexed source);\\n\\n\\t/// @notice An event that's emitted when a new burn is accepted\\n\\tevent BurnAccepted(uint256 indexed amount, address indexed source, uint256 oldSupply, uint256 newSupply);\\n\\n\\t/// @notice An event that's emitted when a new mint cap is proposed\\n\\tevent MintCapProposed(uint32 indexed oldCap, uint32 indexed newCap, uint256 eta);\\n\\n\\t/// @notice An event that's emitted when a mint cap proposal is canceled\\n\\tevent MintCapCanceled(uint32 indexed proposedCap);\\n\\n\\t/// @notice An event that's emitted when a new mint cap is accepted\\n\\tevent MintCapAccepted(uint32 indexed oldCap, uint32 indexed newCap);\\n\\n\\t/// @notice An event that's emitted when a new waiting period is proposed\\n\\tevent WaitingPeriodProposed(uint32 indexed oldWaitingPeriod, uint32 indexed newWaitingPeriod, uint256 eta);\\n\\n\\t/// @notice An event that's emitted when a waiting period proposal is canceled\\n\\tevent WaitingPeriodCanceled(uint32 indexed proposedWaitingPeriod);\\n\\n\\t/// @notice An event that's emitted when a new waiting period is accepted\\n\\tevent WaitingPeriodAccepted(uint32 indexed oldWaitingPeriod, uint32 indexed newWaitingPeriod);\\n\\n\\t/// @notice An event that's emitted when a new supply manager is proposed\\n\\tevent MinersProposed(address indexed oldMiners, address indexed newMiners, uint256 eta);\\n\\n\\t/// @notice An event that's emitted when a supply manager proposal is canceled\\n\\tevent MinersCanceled(address indexed proposedMiners);\\n\\n\\t/// @notice An event that's emitted when a new supply manager is accepted\\n\\tevent MinersAccepted(address indexed oldMiners, address indexed newMiners);\\n\\n\\t/// @notice An event that's emitted when a new proposal length is proposed\\n\\tevent ProposalLengthProposed(uint32 indexed oldProposalLength, uint32 indexed newProposalLength, uint256 eta);\\n\\n\\t/// @notice An event that's emitted when a proposal length proposal is canceled\\n\\tevent ProposalLengthCanceled(uint32 indexed proposedProposalLength);\\n\\n\\t/// @notice An event that's emitted when a new proposal length is accepted\\n\\tevent ProposalLengthAccepted(uint32 indexed oldProposalLength, uint32 indexed newProposalLength);\\n\\n\\t/// @notice restrict functions to just owner address\\n\\tmodifier onlyTheKing {\\n\\t\\tCrownStorage storage crown = LibCrownStorage.crownStorage();\\n\\t\\trequire(crown.king == address(0) || msg.sender == crown.king, \\\"Crown::onlyTheKing: not the king\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Construct a new supply manager\\n\\t * @param _token The address for the token\\n\\t * @param _king The king account for this contract\\n\\t */\\n\\tconstructor(address _token, address _king) {\\n\\t\\ttoken = ICrownGovernanceToken(_token);\\n\\t\\tchangeAllowedAfter = token.supplyChangeAllowedAfter();\\n\\t\\tking = _king;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Propose a new token mint\\n\\t * @param dst The address of the destination account\\n\\t * @param amount The number of tokens to be minted\\n\\t */\\n\\tfunction proposeMint(address dst, uint256 amount) external onlyTheKing {\\n\\t\\tuint256 currentSupply = token.totalSupply();\\n\\t\\trequire(dst != address(0), \\\"Miners::proposeMint: cannot transfer to the zero address\\\");\\n\\t\\trequire(amount <= (currentSupply * token.mintCap()) / 1000000, \\\"Miners::proposeMint: amount exceeds mint cap\\\");\\n\\t\\tuint256 eta = block.timestamp + proposalLength;\\n\\t\\trequire(eta >= token.supplyChangeAllowedAfter(), \\\"Miners::proposeMint: minting not allowed yet\\\");\\n\\t\\tpendingMint = MintProposal(eta, dst, amount);\\n\\t\\temit MintProposed(amount, dst, currentSupply, currentSupply + amount, eta);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cancel proposed token mint\\n\\t */\\n\\tfunction cancelMint() external onlyTheKing {\\n\\t\\trequire(pendingMint.eta != 0, \\\"Miners::cancelMint: no active proposal\\\");\\n\\t\\temit MintCanceled(pendingMint.amount, pendingMint.destination);\\n\\t\\tpendingMint = MintProposal(0, address(0), 0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accept proposed token mint\\n\\t */\\n\\tfunction acceptMint() external onlyTheKing {\\n\\t\\trequire(pendingMint.eta != 0, \\\"Miners::acceptMint: no active proposal\\\");\\n\\t\\trequire(block.timestamp >= pendingMint.eta, \\\"Miners::acceptMint: proposal eta not yet passed\\\");\\n\\t\\taddress dst = pendingMint.destination;\\n\\t\\tuint256 amount = pendingMint.amount;\\n\\t\\tuint256 oldSupply = token.totalSupply();\\n\\t\\tpendingMint = MintProposal(0, address(0), 0);\\n\\t\\trequire(token.mint(dst, amount), \\\"Miners::acceptMint: unsuccessful\\\");\\n\\t\\temit MintAccepted(amount, dst, oldSupply, oldSupply + amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Propose a new token burn\\n\\t * @param src The address of the account that will burn tokens\\n\\t * @param amount The number of tokens to be burned\\n\\t */\\n\\tfunction proposeBurn(address src, uint256 amount) external onlyTheKing {\\n\\t\\trequire(src != address(0), \\\"Miners::proposeBurn: cannot transfer from the zero address\\\");\\n\\t\\trequire(token.allowance(src, address(this)) >= amount, \\\"Miners::proposeBurn: supplyManager approval < amount\\\");\\n\\t\\tuint256 currentSupply = token.totalSupply();\\n\\t\\tuint256 newSupply = currentSupply - amount;\\n\\t\\tuint256 eta = block.timestamp + proposalLength;\\n\\t\\trequire(eta >= token.supplyChangeAllowedAfter(), \\\"Miners::proposeBurn: burning not allowed yet\\\");\\n\\t\\tpendingBurn = BurnProposal(eta, src, amount);\\n\\t\\temit BurnProposed(amount, src, currentSupply, newSupply, eta);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cancel proposed token burn\\n\\t */\\n\\tfunction cancelBurn() external onlyTheKing {\\n\\t\\trequire(pendingBurn.eta != 0, \\\"Miners::cancelBurn: no active proposal\\\");\\n\\t\\temit BurnCanceled(pendingBurn.amount, pendingBurn.source);\\n\\t\\tpendingBurn = BurnProposal(0, address(0), 0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accept proposed token burn\\n\\t */\\n\\tfunction acceptBurn() external onlyTheKing {\\n\\t\\trequire(pendingBurn.eta != 0, \\\"Miners::acceptBurn: no active proposal\\\");\\n\\t\\trequire(block.timestamp >= pendingBurn.eta, \\\"Miners::acceptBurn: proposal eta not yet passed\\\");\\n\\t\\taddress src = pendingBurn.source;\\n\\t\\tuint256 amount = pendingBurn.amount;\\n\\t\\tpendingBurn = BurnProposal(0, address(0), 0);\\n\\t\\trequire(token.burn(src, amount), \\\"Miners::acceptBurn: unsuccessful\\\");\\n\\t\\tuint256 newSupply = token.totalSupply();\\n\\t\\temit BurnAccepted(amount, src, newSupply + amount, newSupply);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Propose change to the maximum amount of tokens that can be minted at once\\n\\t * @param newCap The new mint cap in bips (10,000 bips = 1% of totalSupply)\\n\\t */\\n\\tfunction proposeMintCap(uint32 newCap) external onlyTheKing {\\n\\t\\tuint256 eta = block.timestamp + proposalLength;\\n\\t\\tpendingMintCap = MintCapProposal(eta, newCap);\\n\\t\\temit MintCapProposed(token.mintCap(), newCap, eta);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cancel proposed mint cap\\n\\t */\\n\\tfunction cancelMintCap() external onlyTheKing {\\n\\t\\trequire(pendingMintCap.eta != 0, \\\"Miners::cancelMC: no active proposal\\\");\\n\\t\\temit MintCapCanceled(pendingMintCap.newCap);\\n\\t\\tpendingMintCap = MintCapProposal(0, 0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accept change to the maximum amount of tokens that can be minted at once\\n\\t */\\n\\tfunction acceptMintCap() external onlyTheKing {\\n\\t\\trequire(pendingMintCap.eta != 0, \\\"Miners::acceptMC: no active proposal\\\");\\n\\t\\trequire(block.timestamp >= pendingMintCap.eta, \\\"Miners::acceptMC: proposal eta not yet passed\\\");\\n\\t\\tuint32 oldCap = token.mintCap();\\n\\t\\tuint32 newCap = pendingMintCap.newCap;\\n\\t\\tpendingMintCap = MintCapProposal(0, 0);\\n\\t\\trequire(token.setMintCap(newCap), \\\"Miners::acceptMC: unsuccessful\\\");\\n\\t\\temit MintCapAccepted(oldCap, newCap);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Propose change to the supply change waiting period\\n\\t * @param newPeriod new waiting period\\n\\t */\\n\\tfunction proposeSupplyChangeWaitingPeriod(uint32 newPeriod) external onlyTheKing {\\n\\t\\tuint256 eta = block.timestamp + proposalLength;\\n\\t\\tpendingWaitingPeriod = WaitingPeriodProposal(eta, newPeriod);\\n\\t\\temit WaitingPeriodProposed(token.supplyChangeWaitingPeriod(), newPeriod, eta);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cancel proposed waiting period\\n\\t */\\n\\tfunction cancelWaitingPeriod() external onlyTheKing {\\n\\t\\trequire(pendingWaitingPeriod.eta != 0, \\\"Miners::cancelWaitingPeriod: no active proposal\\\");\\n\\t\\tpendingWaitingPeriod = WaitingPeriodProposal(0, 0);\\n\\t\\temit WaitingPeriodCanceled(pendingWaitingPeriod.newPeriod);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accept change to the supply change waiting period\\n\\t */\\n\\tfunction acceptSupplyChangeWaitingPeriod() external onlyTheKing {\\n\\t\\trequire(pendingWaitingPeriod.eta != 0, \\\"Miners::acceptWP: no active proposal\\\");\\n\\t\\trequire(block.timestamp >= pendingWaitingPeriod.eta, \\\"Miners::acceptWP: proposal eta not yet passed\\\");\\n\\t\\tuint32 oldPeriod = token.supplyChangeWaitingPeriod();\\n\\t\\tuint32 newPeriod = pendingWaitingPeriod.newPeriod;\\n\\t\\tpendingWaitingPeriod = WaitingPeriodProposal(0, 0);\\n\\t\\trequire(token.setSupplyChangeWaitingPeriod(newPeriod), \\\"Miners::acceptWP: unsuccessful\\\");\\n\\t\\temit WaitingPeriodAccepted(oldPeriod, newPeriod);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Propose change to the supplyManager address\\n\\t * @param newMiners new supply manager address\\n\\t */\\n\\tfunction proposeMiners(address newMiners) external onlyTheKing {\\n\\t\\tuint256 eta = block.timestamp + proposalLength;\\n\\t\\tpendingMiners = MinersProposal(eta, newMiners);\\n\\t\\temit MinersProposed(token.supplyManager(), newMiners, eta);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cancel proposed supply manager update\\n\\t */\\n\\tfunction cancelMiners() external onlyTheKing {\\n\\t\\trequire(pendingMiners.eta != 0, \\\"Miners::cancelSM: no active proposal\\\");\\n\\t\\temit MinersCanceled(pendingMiners.newMiners);\\n\\t\\tpendingMiners = MinersProposal(0, address(0));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accept change to the supplyManager address\\n\\t */\\n\\tfunction acceptMiners() external onlyTheKing {\\n\\t\\trequire(pendingMiners.eta != 0, \\\"Miners::acceptSM: no active proposal\\\");\\n\\t\\trequire(block.timestamp >= pendingMiners.eta, \\\"Miners::acceptSM: proposal eta not yet passed\\\");\\n\\t\\taddress oldMiners = token.supplyManager();\\n\\t\\taddress newMiners = pendingMiners.newMiners;\\n\\t\\tpendingMiners = MinersProposal(0, address(0));\\n\\t\\trequire(token.setSupplyManager(newMiners), \\\"Miners::acceptSM: unsuccessful\\\");\\n\\t\\temit MinersAccepted(oldMiners, newMiners);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Propose change to the proposal length\\n\\t * @param newLength new proposal length\\n\\t */\\n\\tfunction proposeNewProposalLength(uint32 newLength) external onlyTheKing {\\n\\t\\trequire(newLength >= proposalLengthMinimum, \\\"Miners::proposePL: length must be >= minimum\\\");\\n\\t\\tuint256 eta = block.timestamp + proposalLength;\\n\\t\\tpendingProposalLength = ProposalLengthProposal(eta, newLength);\\n\\t\\temit ProposalLengthProposed(proposalLength, newLength, eta);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cancel proposed update to proposal length\\n\\t */\\n\\tfunction cancelProposalLength() external onlyTheKing {\\n\\t\\trequire(pendingProposalLength.eta != 0, \\\"Miners::cancelPL: no active proposal\\\");\\n\\t\\temit ProposalLengthCanceled(pendingProposalLength.newLength);\\n\\t\\tpendingProposalLength = ProposalLengthProposal(0, 0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accept change to the proposal length\\n\\t */\\n\\tfunction acceptProposalLength() external onlyTheKing {\\n\\t\\trequire(pendingProposalLength.eta != 0, \\\"Miners::acceptPL: no active proposal\\\");\\n\\t\\trequire(block.timestamp >= pendingProposalLength.eta, \\\"Miners::acceptPL: proposal eta not yet passed\\\");\\n\\t\\tuint32 oldLength = proposalLength;\\n\\t\\tuint32 newLength = pendingProposalLength.newLength;\\n\\t\\tpendingProposalLength = ProposalLengthProposal(0, 0);\\n\\t\\tproposalLength = newLength;\\n\\t\\temit ProposalLengthAccepted(oldLength, newLength);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Propose a new king\\n\\t * @param newKing The address of the new king\\n\\t */\\n\\tfunction proposeKing(address newKing) external onlyTheKing {\\n\\t\\t// ETA set to minimum to allow for quicker changes if necessary\\n\\t\\tuint256 eta = block.timestamp + proposalLengthMinimum;\\n\\t\\tpendingKing = RoyalDecree(eta, newKing);\\n\\t\\temit KingProposed(king, newKing, eta);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cancel proposed king change\\n\\t */\\n\\tfunction cancelKing() external onlyTheKing {\\n\\t\\trequire(pendingKing.eta != 0, \\\"Miners::cancelKing: no active proposal\\\");\\n\\t\\temit KingCanceled(pendingKing.newKing);\\n\\t\\tpendingKing = RoyalDecree(0, address(0));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accept proposed king\\n\\t */\\n\\tfunction acceptKing() external onlyTheKing {\\n\\t\\trequire(pendingKing.eta != 0, \\\"Miners::acceptKing: no active proposal\\\");\\n\\t\\trequire(block.timestamp >= pendingKing.eta, \\\"Miners::acceptKing: proposal eta not yet passed\\\");\\n\\t\\taddress oldKing = king;\\n\\t\\taddress newKing = pendingKing.newKing;\\n\\t\\tpendingKing = RoyalDecree(0, address(0));\\n\\t\\tking = newKing;\\n\\t\\temit KingAccepted(oldKing, newKing);\\n\\t}\\n}\\n\",\"keccak256\":\"0xdba2c9c1184d5f4f15c95d237c8045df5f58fccb8bc99d89fdb5afcdad993977\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/ICrownGovernanceToken.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\ninterface ICrownGovernanceToken is IERC20, IERC20Permit {\\n\\t/// @notice An event that's emitted when the mintCap is changed\\n\\tevent MintCapChanged(uint32 indexed oldMintCap, uint32 indexed newMintCap);\\n\\t/// @notice An event that's emitted when the supplyManager address is changed\\n\\tevent SupplyManagerChanged(address indexed oldManager, address indexed newManager);\\n\\t/// @notice An event that's emitted when the supplyChangeWaitingPeriod is changed\\n\\tevent SupplyChangeWaitingPeriodChanged(uint32 indexed oldWaitingPeriod, uint32 indexed newWaitingPeriod);\\n\\t/// @notice An event that's emitted when the metadataManager address is changed\\n\\tevent MetadataManagerChanged(address indexed oldManager, address indexed newManager);\\n\\t/// @notice An event that's emitted when the token name and symbol are changed\\n\\tevent TokenMetaUpdated(string indexed name, string indexed symbol);\\n\\t/// @notice An event that's emitted whenever an authorized transfer occurs\\n\\tevent AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n\\n\\tfunction name() external view returns (string memory);\\n\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction mint(address dst, uint256 amount) external returns (bool);\\n\\n\\tfunction burn(address src, uint256 amount) external returns (bool);\\n\\n\\tfunction updateTokenMetadata(string memory tokenName, string memory tokenSymbol) external returns (bool);\\n\\n\\tfunction supplyManager() external view returns (address);\\n\\n\\tfunction metadataManager() external view returns (address);\\n\\n\\tfunction supplyChangeAllowedAfter() external view returns (uint256);\\n\\n\\tfunction supplyChangeWaitingPeriod() external view returns (uint32);\\n\\n\\tfunction supplyChangeWaitingPeriodMinimum() external view returns (uint32);\\n\\n\\tfunction mintCap() external view returns (uint32);\\n\\n\\tfunction setSupplyManager(address newSupplyManager) external returns (bool);\\n\\n\\tfunction setMetadataManager(address newMetadataManager) external returns (bool);\\n\\n\\tfunction setSupplyChangeWaitingPeriod(uint32 period) external returns (bool);\\n\\n\\tfunction setMintCap(uint32 newCap) external returns (bool);\\n}\\n\",\"keccak256\":\"0x73a898a087796b408d2e6a686a8ab0680bab932f048e4825c67e8c89da88c3d7\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/ITokenRegistry.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface ITokenRegistry {\\n\\t/// @notice Event emitted when a new token is supported\\n\\tevent TokenFormulaAdded(address indexed token, address indexed formula);\\n\\t/// @notice Event emitted when a token formula is updated\\n\\tevent TokenFormulaUpdated(address indexed token, address indexed formula);\\n\\t/// @notice Event emitted when a supported token is removed\\n\\tevent TokenFormulaRemoved(address indexed token);\\n\\n\\tfunction tokenFormula(address) external view returns (address);\\n\\n\\tfunction setTokenFormula(address token, address formula) external;\\n\\n\\tfunction removeToken(address token) external;\\n\\n\\tfunction changeOwner(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x7725ca32df13a190178b2398f2e33f1879db6b26bfc6f18e4dab7f0a19379a80\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/IVesting.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./ICrownGovernanceToken.sol\\\";\\nimport \\\"./IVotingPower.sol\\\";\\n\\ninterface IVesting {\\n\\tstruct Grant {\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 amount;\\n\\t\\tuint16 vestingDuration;\\n\\t\\tuint16 vestingCliff;\\n\\t\\tuint256 totalClaimed;\\n\\t}\\n\\n\\tevent GrantAdded(\\n\\t\\taddress indexed recipient,\\n\\t\\tuint256 indexed amount,\\n\\t\\tuint256 startTime,\\n\\t\\tuint16 vestingDurationInDays,\\n\\t\\tuint16 vestingCliffInDays\\n\\t);\\n\\tevent GrantTokensClaimed(address indexed recipient, uint256 indexed amountClaimed);\\n\\tevent ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n\\tevent ChangedVotingPower(address indexed oldContract, address indexed newContract);\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction token() external view returns (ICrownGovernanceToken);\\n\\n\\tfunction votingPower() external view returns (IVotingPower);\\n\\n\\tfunction addTokenGrant(\\n\\t\\taddress recipient,\\n\\t\\tuint256 startTime,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 vestingDurationInDays,\\n\\t\\tuint16 vestingCliffInDays\\n\\t) external;\\n\\n\\tfunction getTokenGrant(address recipient) external view returns (Grant memory);\\n\\n\\tfunction calculateGrantClaim(address recipient) external view returns (uint256);\\n\\n\\tfunction vestedBalance(address account) external view returns (uint256);\\n\\n\\tfunction claimedBalance(address recipient) external view returns (uint256);\\n\\n\\tfunction claimVestedTokens(address recipient) external;\\n\\n\\tfunction tokensVestedPerDay(address recipient) external view returns (uint256);\\n\\n\\tfunction setVotingPowerContract(address newContract) external;\\n\\n\\tfunction changeOwner(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xb342f92e2d82d73fa796fb03a6771b9d5d101e2a8fc0a00199390ed8558e1da8\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/IVotingPower.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../libraries/governance/PrismProxy.sol\\\";\\n\\ninterface IVotingPower {\\n\\tstruct Stake {\\n\\t\\tuint256 amount;\\n\\t\\tuint256 votingPower;\\n\\t}\\n\\n\\tevent NewPendingImplementation(address indexed oldPendingImplementation, address indexed newPendingImplementation);\\n\\tevent NewImplementation(address indexed oldImplementation, address indexed newImplementation);\\n\\tevent NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);\\n\\tevent NewAdmin(address indexed oldAdmin, address indexed newAdmin);\\n\\t// TODO: should be able to trim around here, if used as Facet in a Diamond\\n\\tevent Staked(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\tevent Withdrawn(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\tevent VotingPowerChanged(address indexed voter, uint256 indexed previousBalance, uint256 indexed newBalance);\\n\\n\\tfunction setPendingProxyImplementation(address newPendingImplementation) external returns (bool);\\n\\n\\tfunction acceptProxyImplementation() external returns (bool);\\n\\n\\tfunction setPendingProxyAdmin(address newPendingAdmin) external returns (bool);\\n\\n\\tfunction acceptProxyAdmin() external returns (bool);\\n\\n\\tfunction proxyAdmin() external view returns (address);\\n\\n\\tfunction pendingProxyAdmin() external view returns (address);\\n\\n\\tfunction proxyImplementation() external view returns (address);\\n\\n\\tfunction pendingProxyImplementation() external view returns (address);\\n\\n\\tfunction proxyImplementationVersion() external view returns (uint8);\\n\\n\\tfunction become(PrismProxy prism) external;\\n\\n\\t// TODO: should be able to trim around here, if used as Facet in a Diamond\\n\\tfunction initialize(address _govToken, address _vestingContract) external;\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction govToken() external view returns (address);\\n\\n\\tfunction vestingContract() external view returns (address);\\n\\n\\tfunction tokenRegistry() external view returns (address);\\n\\n\\tfunction lockManager() external view returns (address);\\n\\n\\tfunction changeOwner(address newOwner) external;\\n\\n\\tfunction setTokenRegistry(address registry) external;\\n\\n\\tfunction setLockManager(address newLockManager) external;\\n\\n\\tfunction stake(uint256 amount) external;\\n\\n\\tfunction stakeWithPermit(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tfunction withdraw(uint256 amount) external;\\n\\n\\tfunction addVotingPowerForVestingTokens(address account, uint256 amount) external;\\n\\n\\tfunction removeVotingPowerForClaimedTokens(address account, uint256 amount) external;\\n\\n\\tfunction addVotingPowerForLockedTokens(address account, uint256 amount) external;\\n\\n\\tfunction removeVotingPowerForUnlockedTokens(address account, uint256 amount) external;\\n\\n\\tfunction getCrownTokenAmountStaked(address staker) external view returns (uint256);\\n\\n\\tfunction getAmountStaked(address staker, address stakedToken) external view returns (uint256);\\n\\n\\tfunction getCrownTokenStake(address staker) external view returns (Stake memory);\\n\\n\\tfunction getStake(address staker, address stakedToken) external view returns (Stake memory);\\n\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\tfunction balanceOfAt(address account, uint256 blockNumber) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3577d55b604c0010effb26f2813ef08f3ab0c8735182d4c42177d3ffed5183fe\",\"license\":\"Apache-2.0\"},\"contracts/libraries/governance/LibCrownStorage.sol\":{\"content\":\"/*\\n\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../interfaces/governance/ICrownGovernanceToken.sol\\\";\\nimport \\\"../../interfaces/governance/IVesting.sol\\\";\\nimport \\\"../../interfaces/governance/ITokenRegistry.sol\\\";\\n\\n/// @notice Crown governance storage\\nstruct CrownStorage {\\n\\t// A record of states for signing / validating signatures\\n\\tmapping(address => uint256) nonces;\\n\\t// Crown governance token\\n\\tICrownGovernanceToken govToken;\\n\\t// Vesting contract\\n\\tIVesting vesting;\\n\\t// Crown owner\\n\\taddress king;\\n\\t// lockManager contract\\n\\taddress lockManager;\\n\\t// Token registry contract\\n\\tITokenRegistry tokenRegistry;\\n}\\n\\n/// @notice A checkpoint for marking number of votes from a given block\\nstruct CrownCheckpoint {\\n\\tuint32 fromBlock;\\n\\tuint256 votes;\\n}\\n\\n/// @notice All storage variables related to checkpoints\\nstruct CrownCheckpointStorage {\\n\\t// A record of vote checkpoints for each account, by index\\n\\tmapping(address => mapping(uint32 => CrownCheckpoint)) checkpoints;\\n\\t// The number of checkpoints for each account\\n\\tmapping(address => uint32) numCheckpoints;\\n}\\n\\n/// @notice The amount of a given token that has been staked, and the resulting voting power\\nstruct CrownStake {\\n\\tuint256 amount;\\n\\tuint256 votingPower;\\n\\t// TODO: delegation?\\n\\t// uint256 expiryTimestamp;\\n\\t// address delegatedTo;\\n}\\n\\n/// @notice All storage variables related to staking\\nstruct CrownStakeStorage {\\n\\t// Official record of staked balances for each account > token > stake\\n\\tmapping(address => mapping(address => CrownStake)) stakes;\\n}\\n\\nlibrary LibCrownStorage {\\n\\tbytes32 constant CROWN_GOVERNANCE_STORAGE = keccak256(\\\"kingmaker.crown.governance.storage\\\");\\n\\tbytes32 constant CROWN_CHECKPOINT_STORAGE = keccak256(\\\"kingmaker.crown.checkpoint.storage\\\");\\n\\tbytes32 constant CROWN_STAKE_STORAGE = keccak256(\\\"kingmaker.crown.stake.storage\\\");\\n\\n\\t/**\\n\\t * @notice Load app storage struct from specified VOTING_POWER_APP_STORAGE_POSITION\\n\\t * @return crown CrownGovernance struct\\n\\t */\\n\\tfunction crownStorage() internal pure returns (CrownStorage storage crown) {\\n\\t\\tbytes32 position = CROWN_GOVERNANCE_STORAGE;\\n\\t\\tassembly {\\n\\t\\t\\tcrown.slot := position\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Load checkpoint storage struct from specified VOTING_POWER_CHECKPOINT_STORAGE_POSITION\\n\\t * @return checkpoint CheckpointStorage struct\\n\\t */\\n\\tfunction checkpointStorage() internal pure returns (CrownCheckpointStorage storage checkpoint) {\\n\\t\\tbytes32 position = CROWN_CHECKPOINT_STORAGE;\\n\\t\\tassembly {\\n\\t\\t\\tcheckpoint.slot := position\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Load stake storage struct from specified VOTING_POWER_STAKE_STORAGE_POSITION\\n\\t * @return stake StakeStorage struct\\n\\t */\\n\\tfunction stakeStorage() internal pure returns (CrownStakeStorage storage stake) {\\n\\t\\tbytes32 position = CROWN_STAKE_STORAGE;\\n\\t\\tassembly {\\n\\t\\t\\tstake.slot := position\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x35684a1358478e49c716dec5e55ed722b53c42f64081f245024ce10ddc8bbf15\",\"license\":\"Apache-2.0\"},\"contracts/libraries/governance/PrismProxy.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\n/**\\n * Older proxy implementation\\n */\\ncontract PrismProxy {\\n\\t/// @notice Proxy admin and implementation storage variables\\n\\tstruct ProxyStorage {\\n\\t\\t// Administrator for this contract\\n\\t\\taddress admin;\\n\\t\\t// Pending administrator for this contract\\n\\t\\taddress pendingAdmin;\\n\\t\\t// Active implementation of this contract\\n\\t\\taddress implementation;\\n\\t\\t// Pending implementation of this contract\\n\\t\\taddress pendingImplementation;\\n\\t\\t// Implementation version of this contract\\n\\t\\tuint8 version;\\n\\t}\\n\\n\\t/// @dev Position in contract storage where prism ProxyStorage struct will be stored\\n\\tbytes32 constant PRISM_PROXY_STORAGE_POSITION = keccak256(\\\"prism.proxy.storage\\\");\\n\\n\\t/// @notice Emitted when pendingImplementation is changed\\n\\tevent NewPendingImplementation(address indexed oldPendingImplementation, address indexed newPendingImplementation);\\n\\n\\t/// @notice Emitted when pendingImplementation is accepted, which means implementation is updated\\n\\tevent NewImplementation(address indexed oldImplementation, address indexed newImplementation);\\n\\n\\t/// @notice Emitted when pendingAdmin is changed\\n\\tevent NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);\\n\\n\\t/// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n\\tevent NewAdmin(address indexed oldAdmin, address indexed newAdmin);\\n\\n\\t/**\\n\\t * @notice Load proxy storage struct from specified PRISM_PROXY_STORAGE_POSITION\\n\\t * @return ps ProxyStorage struct\\n\\t */\\n\\tfunction proxyStorage() internal pure returns (ProxyStorage storage ps) {\\n\\t\\tbytes32 position = PRISM_PROXY_STORAGE_POSITION;\\n\\t\\tassembly {\\n\\t\\t\\tps.slot := position\\n\\t\\t}\\n\\t}\\n\\n\\t// Admin Functions //\\n\\n\\t/**\\n\\t * @notice Create new pending implementation for prism. msg.sender must be admin\\n\\t * @dev Admin function for proposing new implementation contract\\n\\t * @return boolean indicating success of operation\\n\\t */\\n\\tfunction setPendingProxyImplementation(address newPendingImplementation) public returns (bool) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\trequire(msg.sender == s.admin, \\\"Prism::setPendingProxyImp: caller must be admin\\\");\\n\\n\\t\\taddress oldPendingImplementation = s.pendingImplementation;\\n\\n\\t\\ts.pendingImplementation = newPendingImplementation;\\n\\n\\t\\temit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accepts new implementation for prism. msg.sender must be pendingImplementation\\n\\t * @dev Admin function for new implementation to accept it's role as implementation\\n\\t * @return boolean indicating success of operation\\n\\t */\\n\\tfunction acceptProxyImplementation() public returns (bool) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\t// Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == s.pendingImplementation && s.pendingImplementation != address(0),\\n\\t\\t\\t\\\"Prism::acceptProxyImp: caller must be pending implementation\\\"\\n\\t\\t);\\n\\n\\t\\t// Save current values for inclusion in log\\n\\t\\taddress oldImplementation = s.implementation;\\n\\t\\taddress oldPendingImplementation = s.pendingImplementation;\\n\\n\\t\\ts.implementation = s.pendingImplementation;\\n\\n\\t\\ts.pendingImplementation = address(0);\\n\\t\\ts.version++;\\n\\n\\t\\temit NewImplementation(oldImplementation, s.implementation);\\n\\t\\temit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Begins transfer of admin rights. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n\\t * @dev Admin function to begin change of admin. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n\\t * @param newPendingAdmin New pending admin.\\n\\t * @return boolean indicating success of operation\\n\\t */\\n\\tfunction setPendingProxyAdmin(address newPendingAdmin) public returns (bool) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\t// Check caller = admin\\n\\t\\trequire(msg.sender == s.admin, \\\"Prism::setPendingProxyAdmin: caller must be admin\\\");\\n\\n\\t\\t// Save current value, if any, for inclusion in log\\n\\t\\taddress oldPendingAdmin = s.pendingAdmin;\\n\\n\\t\\t// Store pendingAdmin with value newPendingAdmin\\n\\t\\ts.pendingAdmin = newPendingAdmin;\\n\\n\\t\\t// Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n\\t\\temit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n\\t * @dev Admin function for pending admin to accept role and update admin\\n\\t * @return boolean indicating success of operation\\n\\t */\\n\\tfunction acceptProxyAdmin() public returns (bool) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\t// Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == s.pendingAdmin && msg.sender != address(0),\\n\\t\\t\\t\\\"Prism::acceptProxyAdmin: caller must be pending admin\\\"\\n\\t\\t);\\n\\n\\t\\t// Save current values for inclusion in log\\n\\t\\taddress oldAdmin = s.admin;\\n\\t\\taddress oldPendingAdmin = s.pendingAdmin;\\n\\n\\t\\t// Store admin with value pendingAdmin\\n\\t\\ts.admin = s.pendingAdmin;\\n\\n\\t\\t// Clear the pending value\\n\\t\\ts.pendingAdmin = address(0);\\n\\n\\t\\temit NewAdmin(oldAdmin, s.admin);\\n\\t\\temit NewPendingAdmin(oldPendingAdmin, s.pendingAdmin);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get current admin for prism proxy\\n\\t * @return admin address\\n\\t */\\n\\tfunction proxyAdmin() public view returns (address) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.admin;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get pending admin for prism proxy\\n\\t * @return admin address\\n\\t */\\n\\tfunction pendingProxyAdmin() public view returns (address) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.pendingAdmin;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address of implementation contract\\n\\t * @return implementation address\\n\\t */\\n\\tfunction proxyImplementation() public view returns (address) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.implementation;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address of pending implementation contract\\n\\t * @return pending implementation address\\n\\t */\\n\\tfunction pendingProxyImplementation() public view returns (address) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.pendingImplementation;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Current implementation version for proxy\\n\\t * @return version number\\n\\t */\\n\\tfunction proxyImplementationVersion() public view returns (uint8) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.version;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Delegates execution to an implementation contract.\\n\\t * @dev Returns to the external caller whatever the implementation returns or forwards reverts\\n\\t */\\n\\tfunction _forwardToImplementation() internal {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\t// delegate all other functions to current implementation\\n\\t\\t(bool success, ) = s.implementation.delegatecall(msg.data);\\n\\n\\t\\tassembly {\\n\\t\\t\\tlet free_mem_ptr := mload(0x40)\\n\\t\\t\\treturndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n\\t\\t\\tswitch success\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\trevert(free_mem_ptr, returndatasize())\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\treturn(free_mem_ptr, returndatasize())\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x2b90b5c4069439820bb805f734fc8f8272fbe8962b433f74b51e833f6bf1053e\",\"license\":\"Apache-2.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405262278d00600360006101000a81548163ffffffff021916908363ffffffff16021790555062093a80600360046101000a81548163ffffffff021916908363ffffffff1602179055503480156200005957600080fd5b50604051620060223803806200602283398181016040528101906200007f9190620001de565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663892b0edf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200012657600080fd5b505afa1580156200013b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016191906200021f565b60028190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620002bd565b600081519050620001c18162000289565b92915050565b600081519050620001d881620002a3565b92915050565b60008060408385031215620001f257600080fd5b60006200020285828601620001b0565b92505060206200021585828601620001b0565b9150509250929050565b6000602082840312156200023257600080fd5b60006200024284828501620001c7565b91505092915050565b600062000258826200025f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b62000294816200024b565b8114620002a057600080fd5b50565b620002ae816200027f565b8114620002ba57600080fd5b50565b615d5580620002cd6000396000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c80637e5649b41161012a578063d4307540116100bd578063e11749a91161008c578063e9bea2dc11610071578063e9bea2dc14610478578063ecd13fb114610494578063fc0c546a146104b35761020b565b8063e11749a91461044f578063e631b8ea1461046e5761020b565b8063d4307540146103ea578063d7510b2914610409578063e0c6a23f14610413578063e114482c1461042f5761020b565b8063a56c05b7116100f9578063a56c05b71461039c578063b48c589f146103a6578063bd1bfaa7146103c2578063cc181ca8146103cc5761020b565b80637e5649b41461036257806381aa91f11461036c5780639279dc3b14610388578063a4f1f256146103925761020b565b80634d7ecb34116101a257806367f237491161017157806367f237491461031457806369a441ce146103305780636a420fb31461033a5780636efc3904146103445761020b565b80634d7ecb34146102b057806359b3a049146102cc57806359fe0e6d146102eb5780635ca2167e146102f55761020b565b806326465af2116101de57806326465af21461024a578063288b52c914610268578063371f530a1461027257806339557d3d146102925761020b565b8063074dacbc146102105780630a4673c01461021a5780630c7252aa1461022457806315d4c5d51461022e575b600080fd5b6102186104d1565b005b610222610701565b005b61022c6108e1565b005b61024860048036038101906102439190614580565b610b28565b005b610252611031565b60405161025f919061500a565b60405180910390f35b610270611037565b005b61027a61147a565b6040516102899392919061504e565b60405180910390f35b61029a6114b2565b6040516102a7919061510e565b60405180910390f35b6102ca60048036038101906102c5919061452e565b6114c8565b005b6102d4611771565b6040516102e29291906150e5565b60405180910390f35b6102f3611793565b005b6102fd611b56565b60405161030b929190615025565b60405180910390f35b61032e6004803603810190610329919061460e565b611b88565b005b610338611de1565b005b610342612028565b005b61034c612208565b604051610359919061510e565b60405180910390f35b61036a61221e565b005b6103866004803603810190610381919061452e565b612641565b005b61039061286f565b005b61039a612c32565b005b6103a4612ea0565b005b6103c060048036038101906103bb919061460e565b6130d0565b005b6103ca6132ff565b005b6103d4613742565b6040516103e19190614b42565b60405180910390f35b6103f2613768565b604051610400929190615025565b60405180910390f35b61041161379a565b005b61042d60048036038101906104289190614580565b61397a565b005b610437613e77565b6040516104469392919061504e565b60405180910390f35b610457613eaf565b6040516104659291906150e5565b60405180910390f35b610476613ed1565b005b610492600480360381019061048d919061460e565b6141cf565b005b61049c614428565b6040516104aa9291906150e5565b60405180910390f35b6104bb61444a565b6040516104c89190614baf565b60405180910390f35b60006104db61446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061058b57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190614d6a565b60405180910390fd5b60006010600001541415610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90614d8a565b60405180910390fd5b601060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdb04e72bd3e2c9e4e96256c0cab8f472ecef4cb7cc8d869525c2c56cf22667d260405160405180910390a2604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525060106000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505050565b600061070b61446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806107bb57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6107fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f190614d6a565b60405180910390fd5b60006012600001541415610843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083a90614f8a565b60405180910390fd5b601260010160009054906101000a900463ffffffff1663ffffffff167f268e39839b17c0ddd4b92771a64137229a8bffba784f353f24833c16bcf0e31e60405160405180910390a2604051806040016040528060008152602001600063ffffffff1681525060126000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555090505050565b60006108eb61446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061099b57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6109da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d190614d6a565b60405180910390fd5b60006006600001541415610a23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1a90614c6a565b60405180910390fd5b600660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166006600201547fcbba48cbe11f5f53a4b8f86013b3dced6bfa520669fbeb42b44f4ef4a6ba57e160405160405180910390a3604051806060016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525060066000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015590505050565b6000610b3261446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610be257508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1890614d6a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8a57600080fd5b505afa158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc291906145e5565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610d34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2b90614e4a565b60405180910390fd5b620f424060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166376c71ca16040518163ffffffff1660e01b815260040160206040518083038186803b158015610d9e57600080fd5b505afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd69190614637565b63ffffffff1682610de791906151c1565b610df19190615190565b831115610e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2a90614cca565b60405180910390fd5b6000600360009054906101000a900463ffffffff1663ffffffff1642610e59919061513a565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663892b0edf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ec157600080fd5b505afa158015610ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef991906145e5565b811015610f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3290614f4a565b60405180910390fd5b60405180606001604052808281526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581525060066000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201559050508473ffffffffffffffffffffffffffffffffffffffff16847f77217190dc6169d79fa5e0fae70258ac2c7aff9a26395192a26a46fe8f73a738848786611012919061513a565b85604051611022939291906150ae565b60405180910390a35050505050565b60025481565b600061104161446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806110f157508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611130576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112790614d6a565b60405180910390fd5b60006006600001541415611179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117090614caa565b60405180910390fd5b6006600001544210156111c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b890614faa565b60405180910390fd5b6000600660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600660020154905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561125e57600080fd5b505afa158015611272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129691906145e5565b9050604051806060016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525060066000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015590505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984846040518363ffffffff1660e01b8152600401611387929190614b86565b602060405180830381600087803b1580156113a157600080fd5b505af11580156113b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d991906145bc565b611418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140f90614f2a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16827fcbaf6b8a944325ef48927f70dda9445819f52d3a516f9ddff17ec1ad4d3e44cd83858561145e919061513a565b60405161146c929190615085565b60405180910390a350505050565b60098060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905083565b600360009054906101000a900463ffffffff1681565b60006114d261446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061158257508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6115c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b890614d6a565b60405180910390fd5b6000600360009054906101000a900463ffffffff1663ffffffff16426115e7919061513a565b905060405180604001604052808281526020018473ffffffffffffffffffffffffffffffffffffffff1681525060106000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f147389f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e757600080fd5b505afa1580156116fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171f9190614557565b73ffffffffffffffffffffffffffffffffffffffff167fdddfa440841350e4fae2b613e20f6aa58fbb368a83f172fda600b7dff2f123a283604051611764919061500a565b60405180910390a3505050565b60128060000154908060010160009054906101000a900463ffffffff16905082565b600061179d61446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061184d57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61188c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188390614d6a565b60405180910390fd5b6000600c6000015414156118d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cc90614eea565b60405180910390fd5b600c6000015442101561191d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191490614fca565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166376c71ca16040518163ffffffff1660e01b815260040160206040518083038186803b15801561198657600080fd5b505afa15801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be9190614637565b90506000600c60010160009054906101000a900463ffffffff169050604051806040016040528060008152602001600063ffffffff16815250600c6000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555090505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633dae1a3a826040518263ffffffff1660e01b8152600401611a86919061510e565b602060405180830381600087803b158015611aa057600080fd5b505af1158015611ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad891906145bc565b611b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0e90614c8a565b60405180910390fd5b8063ffffffff168263ffffffff167f64749be294bcf937f5a4cd8f655f72ca5d82202fe82c4d3346ec1139e78e964a60405160405180910390a3505050565b60108060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b6000611b9261446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611c4257508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611c81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7890614d6a565b60405180910390fd5b6000600360009054906101000a900463ffffffff1663ffffffff1642611ca7919061513a565b905060405180604001604052808281526020018463ffffffff16815250600e6000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff1602179055509050508263ffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663941acc496040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6757600080fd5b505afa158015611d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9f9190614637565b63ffffffff167fc2c16c71c9c502bf94ab9f1a0daabd5381971788a55723198760940ec854c54683604051611dd4919061500a565b60405180910390a3505050565b6000611deb61446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611e9b57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611eda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed190614d6a565b60405180910390fd5b60006009600001541415611f23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1a90614e8a565b60405180910390fd5b600960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166009600201547f3d6cc2bba18f18586d6b9b1beab8aac2cee2c506d36c60a11935a30f81af407d60405160405180910390a3604051806060016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525060096000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015590505050565b600061203261446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806120e257508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211890614d6a565b60405180910390fd5b6000600c60000154141561216a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216190614dca565b60405180910390fd5b600c60010160009054906101000a900463ffffffff1663ffffffff167fdc771861018090e0b7ba1fb85ea482d6117ae853a84294bafc5baa114356b5f360405160405180910390a2604051806040016040528060008152602001600063ffffffff16815250600c6000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555090505050565b600360049054906101000a900463ffffffff1681565b600061222861446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806122d857508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230e90614d6a565b60405180910390fd5b60006010600001541415612360576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235790614c2a565b60405180910390fd5b6010600001544210156123a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239f90614bca565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f147389f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561241157600080fd5b505afa158015612425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124499190614557565b90506000601060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525060106000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663191250d7826040518263ffffffff1660e01b81526004016125519190614b42565b602060405180830381600087803b15801561256b57600080fd5b505af115801561257f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a391906145bc565b6125e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d990614d2a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f9a18635ac9034fca80401aa1427a50a518bf537c407c158edc32d87a99705b2760405160405180910390a3505050565b600061264b61446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806126fb57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61273a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273190614d6a565b60405180910390fd5b6000600360049054906101000a900463ffffffff1663ffffffff1642612760919061513a565b905060405180604001604052808281526020018473ffffffffffffffffffffffffffffffffffffffff1681525060046000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508273ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f204bf6ef7395d63b0097526aa09282e0c2d229af630dfec592dc76281c9ea04c83604051612862919061500a565b60405180910390a3505050565b600061287961446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061292957508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295f90614d6a565b60405180910390fd5b6000600e6000015414156129b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a890614eca565b60405180910390fd5b600e600001544210156129f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f090614daa565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663941acc496040518163ffffffff1660e01b815260040160206040518083038186803b158015612a6257600080fd5b505afa158015612a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9a9190614637565b90506000600e60010160009054906101000a900463ffffffff169050604051806040016040528060008152602001600063ffffffff16815250600e6000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555090505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d4f8072826040518263ffffffff1660e01b8152600401612b62919061510e565b602060405180830381600087803b158015612b7c57600080fd5b505af1158015612b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb491906145bc565b612bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bea90614fea565b60405180910390fd5b8063ffffffff168263ffffffff167f7025e54ef5c16a096828ea481527440f63a7fbdc6305b0ade9a4389ffd8cf0d760405160405180910390a3505050565b6000612c3c61446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612cec57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d2290614d6a565b60405180910390fd5b60006012600001541415612d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d6b90614d4a565b60405180910390fd5b601260000154421015612dbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612db390614bea565b60405180910390fd5b6000600360009054906101000a900463ffffffff1690506000601260010160009054906101000a900463ffffffff169050604051806040016040528060008152602001600063ffffffff1681525060126000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555090505080600360006101000a81548163ffffffff021916908363ffffffff1602179055508063ffffffff168263ffffffff167f3ee0f8b74189553d82e64fbb1afcf149c2490693194978e4fd0d119967aabf3560405160405180910390a3505050565b6000612eaa61446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612f5a57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f9090614d6a565b60405180910390fd5b60006004600001541415612fe2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fd990614f6a565b60405180910390fd5b600460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f3a29656c93a8d9cd1a9212a1b15b53b65fd5d13a52ff2ecf86b986a49b4fc53a60405160405180910390a2604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525060046000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505050565b60006130da61446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061318a57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6131c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131c090614d6a565b60405180910390fd5b600360049054906101000a900463ffffffff1663ffffffff168263ffffffff16101561322a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322190614dea565b60405180910390fd5b6000600360009054906101000a900463ffffffff1663ffffffff1642613250919061513a565b905060405180604001604052808281526020018463ffffffff1681525060126000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff1602179055509050508263ffffffff16600360009054906101000a900463ffffffff1663ffffffff167f069598cb2d57f0d331816a082dc250a4166ca53fbd97029d6b275b8173365e5f836040516132f2919061500a565b60405180910390a3505050565b600061330961446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806133b957508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6133f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ef90614d6a565b60405180910390fd5b60006009600001541415613441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161343890614f0a565b60405180910390fd5b600960000154421015613489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161348090614c0a565b60405180910390fd5b6000600960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006009600201549050604051806060016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525060096000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015590505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac83836040518363ffffffff1660e01b81526004016135ac929190614b86565b602060405180830381600087803b1580156135c657600080fd5b505af11580156135da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135fe91906145bc565b61363d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161363490614e0a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136a657600080fd5b505afa1580156136ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136de91906145e5565b90508273ffffffffffffffffffffffffffffffffffffffff16827f09c59a79c658ab5a8ed31ebecb2e804b41b6a74bf519b7980b26c06af31a53758484613725919061513a565b84604051613734929190615085565b60405180910390a350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60048060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b60006137a461446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061385457508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b613893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161388a90614d6a565b60405180910390fd5b6000600e6000015414156138dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138d390614c4a565b60405180910390fd5b604051806040016040528060008152602001600063ffffffff16815250600e6000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff160217905550905050600e60010160009054906101000a900463ffffffff1663ffffffff167f334d41ac66c5a2fdc0ce0e80d3774e9a0a2396ce959e99260267e9c05ec486ff60405160405180910390a250565b600061398461446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480613a3457508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b613a73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a6a90614d6a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ada90614cea565b60405180910390fd5b8160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e85306040518363ffffffff1660e01b8152600401613b3f929190614b5d565b60206040518083038186803b158015613b5757600080fd5b505afa158015613b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b8f91906145e5565b1015613bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bc790614d0a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c3957600080fd5b505afa158015613c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c7191906145e5565b905060008382613c81919061521b565b90506000600360009054906101000a900463ffffffff1663ffffffff1642613ca9919061513a565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663892b0edf6040518163ffffffff1660e01b815260040160206040518083038186803b158015613d1157600080fd5b505afa158015613d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d4991906145e5565b811015613d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d8290614eaa565b60405180910390fd5b60405180606001604052808281526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018681525060096000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201559050508573ffffffffffffffffffffffffffffffffffffffff16857fb090ef20572b93378e0ec84252d95d856bb4c2243e1d4a2d695c852f38576cd7858585604051613e67939291906150ae565b60405180910390a3505050505050565b60068060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905083565b600c8060000154908060010160009054906101000a900463ffffffff16905082565b6000613edb61446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480613f8b57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b613fca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fc190614d6a565b60405180910390fd5b60006004600001541415614013576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161400a90614e2a565b60405180910390fd5b60046000015442101561405b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161405290614e6a565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525060046000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f2ba6723600b34486a0ca83f0b7698406d268a1b56194406796cb82209a8f480260405160405180910390a3505050565b60006141d961446e565b9050600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061428957508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6142c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016142bf90614d6a565b60405180910390fd5b6000600360009054906101000a900463ffffffff1663ffffffff16426142ee919061513a565b905060405180604001604052808281526020018463ffffffff16815250600c6000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff1602179055509050508263ffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166376c71ca16040518163ffffffff1660e01b815260040160206040518083038186803b1580156143ae57600080fd5b505afa1580156143c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e69190614637565b63ffffffff167f80bec46a6fa15769a60d0635a2c048a9aa33db573eca5c7b80e2209678df080f8360405161441b919061500a565b60405180910390a3505050565b600e8060000154908060010160009054906101000a900463ffffffff16905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000807feedc8c3fe1f2c3ab8dce1e429990e954667f9815b833f1da5923b0c280dd34cd90508091505090565b6000813590506144aa81615cc3565b92915050565b6000815190506144bf81615cc3565b92915050565b6000815190506144d481615cda565b92915050565b6000813590506144e981615cf1565b92915050565b6000815190506144fe81615cf1565b92915050565b60008135905061451381615d08565b92915050565b60008151905061452881615d08565b92915050565b60006020828403121561454057600080fd5b600061454e8482850161449b565b91505092915050565b60006020828403121561456957600080fd5b6000614577848285016144b0565b91505092915050565b6000806040838503121561459357600080fd5b60006145a18582860161449b565b92505060206145b2858286016144da565b9150509250929050565b6000602082840312156145ce57600080fd5b60006145dc848285016144c5565b91505092915050565b6000602082840312156145f757600080fd5b6000614605848285016144ef565b91505092915050565b60006020828403121561462057600080fd5b600061462e84828501614504565b91505092915050565b60006020828403121561464957600080fd5b600061465784828501614519565b91505092915050565b6146698161524f565b82525050565b614678816152a7565b82525050565b600061468b602d83615129565b915061469682615329565b604082019050919050565b60006146ae602d83615129565b91506146b982615378565b604082019050919050565b60006146d1602f83615129565b91506146dc826153c7565b604082019050919050565b60006146f4602483615129565b91506146ff82615416565b604082019050919050565b6000614717602f83615129565b915061472282615465565b604082019050919050565b600061473a602683615129565b9150614745826154b4565b604082019050919050565b600061475d601e83615129565b915061476882615503565b602082019050919050565b6000614780602683615129565b915061478b8261552c565b604082019050919050565b60006147a3602c83615129565b91506147ae8261557b565b604082019050919050565b60006147c6603a83615129565b91506147d1826155ca565b604082019050919050565b60006147e9603483615129565b91506147f482615619565b604082019050919050565b600061480c601e83615129565b915061481782615668565b602082019050919050565b600061482f602483615129565b915061483a82615691565b604082019050919050565b6000614852602083615129565b915061485d826156e0565b602082019050919050565b6000614875602483615129565b915061488082615709565b604082019050919050565b6000614898602d83615129565b91506148a382615758565b604082019050919050565b60006148bb602483615129565b91506148c6826157a7565b604082019050919050565b60006148de602c83615129565b91506148e9826157f6565b604082019050919050565b6000614901602083615129565b915061490c82615845565b602082019050919050565b6000614924602683615129565b915061492f8261586e565b604082019050919050565b6000614947603883615129565b9150614952826158bd565b604082019050919050565b600061496a602f83615129565b91506149758261590c565b604082019050919050565b600061498d602683615129565b91506149988261595b565b604082019050919050565b60006149b0602c83615129565b91506149bb826159aa565b604082019050919050565b60006149d3602483615129565b91506149de826159f9565b604082019050919050565b60006149f6602483615129565b9150614a0182615a48565b604082019050919050565b6000614a19602683615129565b9150614a2482615a97565b604082019050919050565b6000614a3c602083615129565b9150614a4782615ae6565b602082019050919050565b6000614a5f602c83615129565b9150614a6a82615b0f565b604082019050919050565b6000614a82602683615129565b9150614a8d82615b5e565b604082019050919050565b6000614aa5602483615129565b9150614ab082615bad565b604082019050919050565b6000614ac8602f83615129565b9150614ad382615bfc565b604082019050919050565b6000614aeb602d83615129565b9150614af682615c4b565b604082019050919050565b6000614b0e601e83615129565b9150614b1982615c9a565b602082019050919050565b614b2d8161528d565b82525050565b614b3c81615297565b82525050565b6000602082019050614b576000830184614660565b92915050565b6000604082019050614b726000830185614660565b614b7f6020830184614660565b9392505050565b6000604082019050614b9b6000830185614660565b614ba86020830184614b24565b9392505050565b6000602082019050614bc4600083018461466f565b92915050565b60006020820190508181036000830152614be38161467e565b9050919050565b60006020820190508181036000830152614c03816146a1565b9050919050565b60006020820190508181036000830152614c23816146c4565b9050919050565b60006020820190508181036000830152614c43816146e7565b9050919050565b60006020820190508181036000830152614c638161470a565b9050919050565b60006020820190508181036000830152614c838161472d565b9050919050565b60006020820190508181036000830152614ca381614750565b9050919050565b60006020820190508181036000830152614cc381614773565b9050919050565b60006020820190508181036000830152614ce381614796565b9050919050565b60006020820190508181036000830152614d03816147b9565b9050919050565b60006020820190508181036000830152614d23816147dc565b9050919050565b60006020820190508181036000830152614d43816147ff565b9050919050565b60006020820190508181036000830152614d6381614822565b9050919050565b60006020820190508181036000830152614d8381614845565b9050919050565b60006020820190508181036000830152614da381614868565b9050919050565b60006020820190508181036000830152614dc38161488b565b9050919050565b60006020820190508181036000830152614de3816148ae565b9050919050565b60006020820190508181036000830152614e03816148d1565b9050919050565b60006020820190508181036000830152614e23816148f4565b9050919050565b60006020820190508181036000830152614e4381614917565b9050919050565b60006020820190508181036000830152614e638161493a565b9050919050565b60006020820190508181036000830152614e838161495d565b9050919050565b60006020820190508181036000830152614ea381614980565b9050919050565b60006020820190508181036000830152614ec3816149a3565b9050919050565b60006020820190508181036000830152614ee3816149c6565b9050919050565b60006020820190508181036000830152614f03816149e9565b9050919050565b60006020820190508181036000830152614f2381614a0c565b9050919050565b60006020820190508181036000830152614f4381614a2f565b9050919050565b60006020820190508181036000830152614f6381614a52565b9050919050565b60006020820190508181036000830152614f8381614a75565b9050919050565b60006020820190508181036000830152614fa381614a98565b9050919050565b60006020820190508181036000830152614fc381614abb565b9050919050565b60006020820190508181036000830152614fe381614ade565b9050919050565b6000602082019050818103600083015261500381614b01565b9050919050565b600060208201905061501f6000830184614b24565b92915050565b600060408201905061503a6000830185614b24565b6150476020830184614660565b9392505050565b60006060820190506150636000830186614b24565b6150706020830185614660565b61507d6040830184614b24565b949350505050565b600060408201905061509a6000830185614b24565b6150a76020830184614b24565b9392505050565b60006060820190506150c36000830186614b24565b6150d06020830185614b24565b6150dd6040830184614b24565b949350505050565b60006040820190506150fa6000830185614b24565b6151076020830184614b33565b9392505050565b60006020820190506151236000830184614b33565b92915050565b600082825260208201905092915050565b60006151458261528d565b91506151508361528d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615185576151846152cb565b5b828201905092915050565b600061519b8261528d565b91506151a68361528d565b9250826151b6576151b56152fa565b5b828204905092915050565b60006151cc8261528d565b91506151d78361528d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156152105761520f6152cb565b5b828202905092915050565b60006152268261528d565b91506152318361528d565b925082821015615244576152436152cb565b5b828203905092915050565b600061525a8261526d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60006152b2826152b9565b9050919050565b60006152c48261526d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4d696e6572733a3a616363657074534d3a2070726f706f73616c20657461206e60008201527f6f74207965742070617373656400000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a616363657074504c3a2070726f706f73616c20657461206e60008201527f6f74207965742070617373656400000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a6163636570744275726e3a2070726f706f73616c2065746160008201527f206e6f7420796574207061737365640000000000000000000000000000000000602082015250565b7f4d696e6572733a3a616363657074534d3a206e6f206163746976652070726f7060008201527f6f73616c00000000000000000000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a63616e63656c57616974696e67506572696f643a206e6f2060008201527f6163746976652070726f706f73616c0000000000000000000000000000000000602082015250565b7f4d696e6572733a3a63616e63656c4d696e743a206e6f2061637469766520707260008201527f6f706f73616c0000000000000000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a6163636570744d433a20756e7375636365737366756c0000600082015250565b7f4d696e6572733a3a6163636570744d696e743a206e6f2061637469766520707260008201527f6f706f73616c0000000000000000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a70726f706f73654d696e743a20616d6f756e74206578636560008201527f656473206d696e74206361700000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a70726f706f73654275726e3a2063616e6e6f74207472616e60008201527f736665722066726f6d20746865207a65726f2061646472657373000000000000602082015250565b7f4d696e6572733a3a70726f706f73654275726e3a20737570706c794d616e616760008201527f657220617070726f76616c203c20616d6f756e74000000000000000000000000602082015250565b7f4d696e6572733a3a616363657074534d3a20756e7375636365737366756c0000600082015250565b7f4d696e6572733a3a616363657074504c3a206e6f206163746976652070726f7060008201527f6f73616c00000000000000000000000000000000000000000000000000000000602082015250565b7f43726f776e3a3a6f6e6c795468654b696e673a206e6f7420746865206b696e67600082015250565b7f4d696e6572733a3a63616e63656c534d3a206e6f206163746976652070726f7060008201527f6f73616c00000000000000000000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a61636365707457503a2070726f706f73616c20657461206e60008201527f6f74207965742070617373656400000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a63616e63656c4d433a206e6f206163746976652070726f7060008201527f6f73616c00000000000000000000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a70726f706f7365504c3a206c656e677468206d757374206260008201527f65203e3d206d696e696d756d0000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a6163636570744275726e3a20756e7375636365737366756c600082015250565b7f4d696e6572733a3a6163636570744b696e673a206e6f2061637469766520707260008201527f6f706f73616c0000000000000000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a70726f706f73654d696e743a2063616e6e6f74207472616e60008201527f7366657220746f20746865207a65726f20616464726573730000000000000000602082015250565b7f4d696e6572733a3a6163636570744b696e673a2070726f706f73616c2065746160008201527f206e6f7420796574207061737365640000000000000000000000000000000000602082015250565b7f4d696e6572733a3a63616e63656c4275726e3a206e6f2061637469766520707260008201527f6f706f73616c0000000000000000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a70726f706f73654275726e3a206275726e696e67206e6f7460008201527f20616c6c6f776564207965740000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a61636365707457503a206e6f206163746976652070726f7060008201527f6f73616c00000000000000000000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a6163636570744d433a206e6f206163746976652070726f7060008201527f6f73616c00000000000000000000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a6163636570744275726e3a206e6f2061637469766520707260008201527f6f706f73616c0000000000000000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a6163636570744d696e743a20756e7375636365737366756c600082015250565b7f4d696e6572733a3a70726f706f73654d696e743a206d696e74696e67206e6f7460008201527f20616c6c6f776564207965740000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a63616e63656c4b696e673a206e6f2061637469766520707260008201527f6f706f73616c0000000000000000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a63616e63656c504c3a206e6f206163746976652070726f7060008201527f6f73616c00000000000000000000000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a6163636570744d696e743a2070726f706f73616c2065746160008201527f206e6f7420796574207061737365640000000000000000000000000000000000602082015250565b7f4d696e6572733a3a6163636570744d433a2070726f706f73616c20657461206e60008201527f6f74207965742070617373656400000000000000000000000000000000000000602082015250565b7f4d696e6572733a3a61636365707457503a20756e7375636365737366756c0000600082015250565b615ccc8161524f565b8114615cd757600080fd5b50565b615ce381615261565b8114615cee57600080fd5b50565b615cfa8161528d565b8114615d0557600080fd5b50565b615d1181615297565b8114615d1c57600080fd5b5056fea2646970667358221220d68eba5a1b5ea39e4636009ecf46427ca6fdeb4d40b6c3b3ebf1eb95f3511f8d64736f6c63430008020033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Collective responsible for enacting decisions related to Crown governance token supply",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_king": "The king account for this contract",
          "_token": "The address for the token"
        }
      },
      "proposeBurn(address,uint256)": {
        "params": {
          "amount": "The number of tokens to be burned",
          "src": "The address of the account that will burn tokens"
        }
      },
      "proposeKing(address)": {
        "params": {
          "newKing": "The address of the new king"
        }
      },
      "proposeMiners(address)": {
        "params": {
          "newMiners": "new supply manager address"
        }
      },
      "proposeMint(address,uint256)": {
        "params": {
          "amount": "The number of tokens to be minted",
          "dst": "The address of the destination account"
        }
      },
      "proposeMintCap(uint32)": {
        "params": {
          "newCap": "The new mint cap in bips (10,000 bips = 1% of totalSupply)"
        }
      },
      "proposeNewProposalLength(uint32)": {
        "params": {
          "newLength": "new proposal length"
        }
      },
      "proposeSupplyChangeWaitingPeriod(uint32)": {
        "params": {
          "newPeriod": "new waiting period"
        }
      }
    },
    "title": "Miners (prev. SupplyManager)",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BurnAccepted(uint256,address,uint256,uint256)": {
        "notice": "An event that's emitted when a new burn is accepted"
      },
      "BurnCanceled(uint256,address)": {
        "notice": "An event that's emitted when a burn proposal is canceled"
      },
      "BurnProposed(uint256,address,uint256,uint256,uint256)": {
        "notice": "An event that's emitted when a new burn is proposed"
      },
      "KingAccepted(address,address)": {
        "notice": "An event that's emitted when a new king is accepted"
      },
      "KingCanceled(address)": {
        "notice": "An event that's emitted when an king proposal is canceled"
      },
      "KingProposed(address,address,uint256)": {
        "notice": "An event that's emitted when a new king is proposed"
      },
      "MinersAccepted(address,address)": {
        "notice": "An event that's emitted when a new supply manager is accepted"
      },
      "MinersCanceled(address)": {
        "notice": "An event that's emitted when a supply manager proposal is canceled"
      },
      "MinersProposed(address,address,uint256)": {
        "notice": "An event that's emitted when a new supply manager is proposed"
      },
      "MintAccepted(uint256,address,uint256,uint256)": {
        "notice": "An event that's emitted when a new mint is accepted"
      },
      "MintCanceled(uint256,address)": {
        "notice": "An event that's emitted when a mint proposal is canceled"
      },
      "MintCapAccepted(uint32,uint32)": {
        "notice": "An event that's emitted when a new mint cap is accepted"
      },
      "MintCapCanceled(uint32)": {
        "notice": "An event that's emitted when a mint cap proposal is canceled"
      },
      "MintCapProposed(uint32,uint32,uint256)": {
        "notice": "An event that's emitted when a new mint cap is proposed"
      },
      "MintProposed(uint256,address,uint256,uint256,uint256)": {
        "notice": "An event that's emitted when a new mint is proposed"
      },
      "ProposalLengthAccepted(uint32,uint32)": {
        "notice": "An event that's emitted when a new proposal length is accepted"
      },
      "ProposalLengthCanceled(uint32)": {
        "notice": "An event that's emitted when a proposal length proposal is canceled"
      },
      "ProposalLengthProposed(uint32,uint32,uint256)": {
        "notice": "An event that's emitted when a new proposal length is proposed"
      },
      "WaitingPeriodAccepted(uint32,uint32)": {
        "notice": "An event that's emitted when a new waiting period is accepted"
      },
      "WaitingPeriodCanceled(uint32)": {
        "notice": "An event that's emitted when a waiting period proposal is canceled"
      },
      "WaitingPeriodProposed(uint32,uint32,uint256)": {
        "notice": "An event that's emitted when a new waiting period is proposed"
      }
    },
    "kind": "user",
    "methods": {
      "acceptBurn()": {
        "notice": "Accept proposed token burn"
      },
      "acceptKing()": {
        "notice": "Accept proposed king"
      },
      "acceptMiners()": {
        "notice": "Accept change to the supplyManager address"
      },
      "acceptMint()": {
        "notice": "Accept proposed token mint"
      },
      "acceptMintCap()": {
        "notice": "Accept change to the maximum amount of tokens that can be minted at once"
      },
      "acceptProposalLength()": {
        "notice": "Accept change to the proposal length"
      },
      "acceptSupplyChangeWaitingPeriod()": {
        "notice": "Accept change to the supply change waiting period"
      },
      "cancelBurn()": {
        "notice": "Cancel proposed token burn"
      },
      "cancelKing()": {
        "notice": "Cancel proposed king change"
      },
      "cancelMiners()": {
        "notice": "Cancel proposed supply manager update"
      },
      "cancelMint()": {
        "notice": "Cancel proposed token mint"
      },
      "cancelMintCap()": {
        "notice": "Cancel proposed mint cap"
      },
      "cancelProposalLength()": {
        "notice": "Cancel proposed update to proposal length"
      },
      "cancelWaitingPeriod()": {
        "notice": "Cancel proposed waiting period"
      },
      "changeAllowedAfter()": {
        "notice": "The timestamp after which a change may occur"
      },
      "constructor": {
        "notice": "Construct a new supply manager"
      },
      "king()": {
        "notice": "Address which may make changes the token supply by calling provided functions"
      },
      "pendingBurn()": {
        "notice": "Current pending burn proposal"
      },
      "pendingKing()": {
        "notice": "Current pending king proposal"
      },
      "pendingMiners()": {
        "notice": "Current pending supply manager proposal"
      },
      "pendingMint()": {
        "notice": "Current pending mint proposal"
      },
      "pendingMintCap()": {
        "notice": "Current pending mint cap proposal"
      },
      "pendingProposalLength()": {
        "notice": "Current pending proposal length proposal"
      },
      "pendingWaitingPeriod()": {
        "notice": "Current pending waiting period proposal"
      },
      "proposalLength()": {
        "notice": "The current time between proposal and acceptance"
      },
      "proposalLengthMinimum()": {
        "notice": "The minimum time between proposal and acceptance"
      },
      "proposeBurn(address,uint256)": {
        "notice": "Propose a new token burn"
      },
      "proposeKing(address)": {
        "notice": "Propose a new king"
      },
      "proposeMiners(address)": {
        "notice": "Propose change to the supplyManager address"
      },
      "proposeMint(address,uint256)": {
        "notice": "Propose a new token mint"
      },
      "proposeMintCap(uint32)": {
        "notice": "Propose change to the maximum amount of tokens that can be minted at once"
      },
      "proposeNewProposalLength(uint32)": {
        "notice": "Propose change to the proposal length"
      },
      "proposeSupplyChangeWaitingPeriod(uint32)": {
        "notice": "Propose change to the supply change waiting period"
      },
      "token()": {
        "notice": "Crown Governance token"
      }
    },
    "notice": "Decisions are made via a timelocked propose/accept schemeInitial proposal length (timelock) is 30 days",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6293,
        "contract": "contracts/governance/Miners.sol:Miners",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ICrownGovernanceToken)10584"
      },
      {
        "astId": 6296,
        "contract": "contracts/governance/Miners.sol:Miners",
        "label": "king",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6299,
        "contract": "contracts/governance/Miners.sol:Miners",
        "label": "changeAllowedAfter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6305,
        "contract": "contracts/governance/Miners.sol:Miners",
        "label": "proposalLength",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 6311,
        "contract": "contracts/governance/Miners.sol:Miners",
        "label": "proposalLengthMinimum",
        "offset": 4,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 6354,
        "contract": "contracts/governance/Miners.sol:Miners",
        "label": "pendingKing",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(RoyalDecree)6316_storage"
      },
      {
        "astId": 6358,
        "contract": "contracts/governance/Miners.sol:Miners",
        "label": "pendingMint",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(MintProposal)6323_storage"
      },
      {
        "astId": 6362,
        "contract": "contracts/governance/Miners.sol:Miners",
        "label": "pendingBurn",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(BurnProposal)6330_storage"
      },
      {
        "astId": 6366,
        "contract": "contracts/governance/Miners.sol:Miners",
        "label": "pendingMintCap",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(MintCapProposal)6335_storage"
      },
      {
        "astId": 6370,
        "contract": "contracts/governance/Miners.sol:Miners",
        "label": "pendingWaitingPeriod",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(WaitingPeriodProposal)6340_storage"
      },
      {
        "astId": 6374,
        "contract": "contracts/governance/Miners.sol:Miners",
        "label": "pendingMiners",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(MinersProposal)6345_storage"
      },
      {
        "astId": 6378,
        "contract": "contracts/governance/Miners.sol:Miners",
        "label": "pendingProposalLength",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(ProposalLengthProposal)6350_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICrownGovernanceToken)10584": {
        "encoding": "inplace",
        "label": "contract ICrownGovernanceToken",
        "numberOfBytes": "20"
      },
      "t_struct(BurnProposal)6330_storage": {
        "encoding": "inplace",
        "label": "struct Miners.BurnProposal",
        "members": [
          {
            "astId": 6325,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "eta",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6327,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "source",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6329,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(MinersProposal)6345_storage": {
        "encoding": "inplace",
        "label": "struct Miners.MinersProposal",
        "members": [
          {
            "astId": 6342,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "eta",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6344,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "newMiners",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MintCapProposal)6335_storage": {
        "encoding": "inplace",
        "label": "struct Miners.MintCapProposal",
        "members": [
          {
            "astId": 6332,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "eta",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6334,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "newCap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MintProposal)6323_storage": {
        "encoding": "inplace",
        "label": "struct Miners.MintProposal",
        "members": [
          {
            "astId": 6318,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "eta",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6320,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "destination",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6322,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProposalLengthProposal)6350_storage": {
        "encoding": "inplace",
        "label": "struct Miners.ProposalLengthProposal",
        "members": [
          {
            "astId": 6347,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "eta",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6349,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "newLength",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoyalDecree)6316_storage": {
        "encoding": "inplace",
        "label": "struct Miners.RoyalDecree",
        "members": [
          {
            "astId": 6313,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "eta",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6315,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "newKing",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(WaitingPeriodProposal)6340_storage": {
        "encoding": "inplace",
        "label": "struct Miners.WaitingPeriodProposal",
        "members": [
          {
            "astId": 6337,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "eta",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6339,
            "contract": "contracts/governance/Miners.sol:Miners",
            "label": "newPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}