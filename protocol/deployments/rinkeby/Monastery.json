{
  "address": "0xEa73Be3B294804Db0e6e2636968696c6b8f21541",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newChurch",
          "type": "address"
        }
      ],
      "name": "ApostolicSuccession",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newContract",
          "type": "address"
        }
      ],
      "name": "ChangedVotingPower",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "vestingDurationInDays",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "vestingCliffInDays",
          "type": "uint16"
        }
      ],
      "name": "GrantAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "GrantTokensClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "vestingDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "vestingCliffInDays",
          "type": "uint16"
        }
      ],
      "name": "addTokenGrant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "calculateGrantClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimVestedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clergy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newChurch",
          "type": "address"
        }
      ],
      "name": "conversion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getTokenGrant",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "vestingDuration",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "vestingCliff",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "totalClaimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Monastery.Grant",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newContract",
          "type": "address"
        }
      ],
      "name": "setVotingPowerContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ICrownGovernanceToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenGrants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "vestingDuration",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "vestingCliff",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "tokensVestedPerDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "vestedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPower",
      "outputs": [
        {
          "internalType": "contract IVotingPower",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3ba3eb60752eb82251181d3ce6520233f3631a0a41fda74d2cf2bca60af2def",
  "receipt": {
    "to": null,
    "from": "0xfEeDc0DE1EBE0A72f52590Df786101e1c3944545",
    "contractAddress": "0xEa73Be3B294804Db0e6e2636968696c6b8f21541",
    "transactionIndex": 1,
    "gasUsed": "2104757",
    "logsBloom": "0x
    "blockHash": "0x214edea13a8de6167575ba7493482bbb5c25b712aa60d8adb2f66f45532db264",
    "transactionHash": "0xe3ba3eb60752eb82251181d3ce6520233f3631a0a41fda74d2cf2bca60af2def",
    "logs": [],
    "blockNumber": 8229051,
    "cumulativeGasUsed": "2309237",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1aBB9e038819c9Cc6BdB34848b0De193D7c3D00a"
  ],
  "solcInputHash": "d86583ef9eed485af7fc3875009d17ed",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.92b52cbf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newChurch\",\"type\":\"address\"}],\"name\":\"ApostolicSuccession\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ChangedVotingPower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"vestingCliffInDays\",\"type\":\"uint16\"}],\"name\":\"GrantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"GrantTokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vestingCliffInDays\",\"type\":\"uint16\"}],\"name\":\"addTokenGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"calculateGrantClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clergy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newChurch\",\"type\":\"address\"}],\"name\":\"conversion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getTokenGrant\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vestingCliff\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Monastery.Grant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"setVotingPowerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ICrownGovernanceToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenGrants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vestingCliff\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"tokensVestedPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"vestedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"contract IVotingPower\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The vesting contract for the initial KING token distribution\",\"kind\":\"dev\",\"methods\":{\"addTokenGrant(address,uint256,uint256,uint16,uint16)\":{\"params\":{\"amount\":\"The amount of tokens being granted\",\"recipient\":\"The address that is receiving the grant\",\"startTime\":\"The unix timestamp when the grant will start\",\"vestingCliffInDays\":\"The vesting cliff duration in days\",\"vestingDurationInDays\":\"The vesting period in days\"}},\"calculateGrantClaim(address)\":{\"details\":\"Due to rounding errors once grant duration is reached, returns the entire left grant amountReturns 0 if cliff has not been reached\",\"params\":{\"recipient\":\"The address that has a grant\"},\"returns\":{\"_0\":\"The amount recipient can claim\"}},\"claimVestedTokens(address)\":{\"details\":\"Errors if no tokens have vestedIt is advised recipients check they are entitled to claim via `calculateGrantClaim` before calling this\",\"params\":{\"recipient\":\"The address that has a grant\"}},\"claimedBalance(address)\":{\"params\":{\"recipient\":\"The address that has a grant\"},\"returns\":{\"_0\":\"the number of claimed tokens by `recipient`\"}},\"constructor\":{\"params\":{\"_token\":\"Address of KING token\"}},\"conversion(address)\":{\"params\":{\"newChurch\":\"New clergy address\"}},\"getTokenGrant(address)\":{\"params\":{\"recipient\":\"The address that has a grant\"},\"returns\":{\"_0\":\"the grant\"}},\"setVotingPowerContract(address)\":{\"params\":{\"newContract\":\"New voting power contract address\"}},\"tokensVestedPerDay(address)\":{\"params\":{\"recipient\":\"The address that has a grant\"},\"returns\":{\"_0\":\"Number of tokens that will vest per day\"}},\"vestedBalance(address)\":{\"details\":\"Returns 0 if cliff has not been reached\",\"params\":{\"recipient\":\"The address that has a grant\"},\"returns\":{\"_0\":\"Total vested balance (claimed + unclaimed)\"}}},\"stateVariables\":{\"MAX_GRANT_CLIFF_DAYS\":{\"details\":\"Used to limit cliff periods specified in days\"},\"MAX_GRANT_VESTING_DAYS\":{\"details\":\"Used to limit vesting periods specified in days\"},\"SECONDS_PER_DAY\":{\"details\":\"Used to translate vesting periods specified in days to seconds\"}},\"title\":\"Monastery (prev. Vesting)\",\"version\":1},\"userdoc\":{\"events\":{\"ApostolicSuccession(address,address)\":{\"notice\":\"Event emitted when the clergy of the vesting contract is updated\"},\"ChangedVotingPower(address,address)\":{\"notice\":\"Event emitted when the voting power contract referenced by the vesting contract is updated\"},\"GrantAdded(address,uint256,uint256,uint16,uint16)\":{\"notice\":\"Event emitted when a new grant is created\"},\"GrantTokensClaimed(address,uint256)\":{\"notice\":\"Event emitted when tokens are claimed by a recipient from a grant\"}},\"kind\":\"user\",\"methods\":{\"addTokenGrant(address,uint256,uint256,uint16,uint16)\":{\"notice\":\"Add a new token grant\"},\"calculateGrantClaim(address)\":{\"notice\":\"Calculate the vested and unclaimed tokens available for `recipient` to claim\"},\"claimVestedTokens(address)\":{\"notice\":\"Allows a grant recipient to claim their vested tokens\"},\"claimedBalance(address)\":{\"notice\":\"The balance claimed by `recipient`\"},\"clergy()\":{\"notice\":\"Current clergy of this contract\"},\"constructor\":{\"notice\":\"Construct a new Vesting contract\"},\"conversion(address)\":{\"notice\":\"Change clergy of vesting contract\"},\"getTokenGrant(address)\":{\"notice\":\"Get token grant for recipient\"},\"setVotingPowerContract(address)\":{\"notice\":\"Set voting power contract address\"},\"token()\":{\"notice\":\"Crown Governance token\"},\"tokenGrants(address)\":{\"notice\":\"Mapping of recipient address > token grant\"},\"tokensVestedPerDay(address)\":{\"notice\":\"Calculate the number of tokens that will vest per day for the given recipient\"},\"vestedBalance(address)\":{\"notice\":\"Calculate the vested (claimed + unclaimed) tokens for `recipient`\"},\"votingPower()\":{\"notice\":\"Voting power contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Monastery.sol\":\"Monastery\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x44300341eb97e8790e56e0823e8c3d09695fc2ee80555a83a9585f307381f324\",\"license\":\"MIT\"},\"contracts/governance/Monastery.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n        _\\n       ///-._\\n      ////////-._\\n     /////////////-.\\n    ////////////////`.\\n   //////////////// .'`.\\n  //////////////// . '.'`.\\n '|`'//////////// . .'.::|`\\n  :    `'///////   . '.':|\\n  |  .   . `'//  ' _|- ::|\\n  |.  .-._  . | .   | .'::\\n  |   |:|:|   |  ' ' '.::|\\n  |   |:|:|   :.  . .'.':|\\n  | . |:|:| . |    .._.:::\\n  :    `':|   |  ' ////-:|\\n  |.    .     |  '/////////-._\\n  |   .     . : .//////////////-._\\n  :           : ///////////////////-._\\n  |.          |////////////////////////-._\\n  |    .  .   :`'//////////////////////////-._\\n  | .       _.-\\\\\\\\\\\\\\\\``'//////////////////////////-._\\n  |        /\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\..``'//////////////////////////\\\".\\n  :  .  . /. \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\.  .``'///////////////////// .'`.\\n  :      /  _ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\.      ``'//////////////// .  .'`.\\n  | .   /  (@) \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\.  . .    ``'/////////// .  '.'::|.\\n {`)._ '|  _`  .\\\\\\\\\\\\\\\\\\\\\\\\\\\\-`:|#|  .  .   ``'//////   '. .'.:|\\n  `-{_/`| ||::.  \\\\\\\\'`.:|:.|#| |#|  .      ``'/  ' .##:':::\\n      `-| |||||  |`.'::|::|#| |#| |#|  .  . '| . .|##|'.:|\\n        | |||||  : .'::|:.'#| |#| |#| |#|    |    |##|'::|\\n        | ||||| .| .'.:|::.'' '#| |#| |#| .  :  ' |##|'.:|\\n       {`\\\\:||||  : .'::|:_.:.  .  '#| |#|    |   .|##|':::\\n        `-{_/'|_ |_.-'/}_/'-._        '#|    :.   |##:'.:|\\n           `'{._('}_)-'  `-}_}(-._ .    .    |  ' '` .'::|\\n                `-'          `-.} /-._    .  :   .'.'_:-'\\\\\\n                                 `-}_}(-._   | . _.-')_(-'\\n                                     `-/_)`-.:.-{ \\\\{-'\\n                                         `-{_'_)-''\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"../interfaces/governance/IVotingPower.sol\\\";\\nimport \\\"../interfaces/governance/ICrownGovernanceToken.sol\\\";\\n\\n/**\\n * @title Monastery (prev. Vesting)\\n * @dev The vesting contract for the initial KING token distribution\\n */\\ncontract Monastery {\\n\\t/// @notice Grant definition\\n\\tstruct Grant {\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 amount;\\n\\t\\tuint16 vestingDuration;\\n\\t\\tuint16 vestingCliff;\\n\\t\\tuint256 totalClaimed;\\n\\t}\\n\\n\\t/// @dev Used to translate vesting periods specified in days to seconds\\n\\tuint256 internal constant SECONDS_PER_DAY = 86400;\\n\\n\\t/// @dev Used to limit vesting periods specified in days\\n\\tuint16 internal constant MAX_GRANT_VESTING_DAYS = 9 * 365;\\n\\n\\t/// @dev Used to limit cliff periods specified in days\\n\\tuint16 internal constant MAX_GRANT_CLIFF_DAYS = 1 * 365;\\n\\n\\t/// @notice Crown Governance token\\n\\tICrownGovernanceToken public token;\\n\\n\\t/// @notice Voting power contract\\n\\tIVotingPower public votingPower;\\n\\n\\t/// @notice Mapping of recipient address > token grant\\n\\tmapping(address => Grant) public tokenGrants;\\n\\n\\t/// @notice Current clergy of this contract\\n\\taddress public clergy;\\n\\n\\t/// @notice only clergy can call function\\n\\tmodifier onlyChurch {\\n\\t\\trequire(msg.sender == clergy, \\\"Monastery::onlyChurch: not clergy\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Event emitted when a new grant is created\\n\\tevent GrantAdded(\\n\\t\\taddress indexed recipient,\\n\\t\\tuint256 indexed amount,\\n\\t\\tuint256 startTime,\\n\\t\\tuint16 vestingDurationInDays,\\n\\t\\tuint16 vestingCliffInDays\\n\\t);\\n\\n\\t/// @notice Event emitted when tokens are claimed by a recipient from a grant\\n\\tevent GrantTokensClaimed(address indexed recipient, uint256 indexed amountClaimed);\\n\\n\\t/// @notice Event emitted when the clergy of the vesting contract is updated\\n\\tevent ApostolicSuccession(address indexed oldOwner, address indexed newChurch);\\n\\n\\t/// @notice Event emitted when the voting power contract referenced by the vesting contract is updated\\n\\tevent ChangedVotingPower(address indexed oldContract, address indexed newContract);\\n\\n\\t/**\\n\\t * @notice Construct a new Vesting contract\\n\\t * @param _token Address of KING token\\n\\t */\\n\\tconstructor(address _token) {\\n\\t\\trequire(_token != address(0), \\\"Monastery::constructor: must be valid token address\\\");\\n\\t\\ttoken = ICrownGovernanceToken(_token);\\n\\t\\tclergy = msg.sender;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add a new token grant\\n\\t * @param recipient The address that is receiving the grant\\n\\t * @param startTime The unix timestamp when the grant will start\\n\\t * @param amount The amount of tokens being granted\\n\\t * @param vestingDurationInDays The vesting period in days\\n\\t * @param vestingCliffInDays The vesting cliff duration in days\\n\\t */\\n\\tfunction addTokenGrant(\\n\\t\\taddress recipient,\\n\\t\\tuint256 startTime,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 vestingDurationInDays,\\n\\t\\tuint16 vestingCliffInDays\\n\\t) external onlyChurch {\\n\\t\\trequire(address(votingPower) != address(0), \\\"Monastery::addTokenGrant: Set Voting Power contract first\\\");\\n\\t\\trequire(vestingCliffInDays <= MAX_GRANT_CLIFF_DAYS, \\\"Monastery::addTokenGrant: cliff more than 1 year\\\");\\n\\t\\trequire(vestingDurationInDays > 0, \\\"Monastery::addTokenGrant: duration must be > 0\\\");\\n\\t\\trequire(vestingDurationInDays <= MAX_GRANT_VESTING_DAYS, \\\"Monastery::addTokenGrant: duration more than 9 years\\\");\\n\\t\\trequire(vestingDurationInDays >= vestingCliffInDays, \\\"Monastery::addTokenGrant: duration < cliff\\\");\\n\\t\\trequire(tokenGrants[recipient].amount == 0, \\\"Monastery::addTokenGrant: grant already exists for account\\\");\\n\\n\\t\\tuint256 amountVestedPerDay = amount / vestingDurationInDays;\\n\\t\\trequire(amountVestedPerDay > 0, \\\"Monastery::addTokenGrant: amountVestedPerDay > 0\\\");\\n\\n\\t\\t// Transfer the grant tokens into the vesting contract\\n\\t\\trequire(token.transferFrom(clergy, address(this), amount), \\\"Monastery::addTokenGrant: transfer failed\\\");\\n\\n\\t\\tuint256 grantStartTime = startTime == 0 ? block.timestamp : startTime;\\n\\n\\t\\tGrant memory grant =\\n\\t\\t\\tGrant({\\n\\t\\t\\t\\tstartTime: grantStartTime,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tvestingDuration: vestingDurationInDays,\\n\\t\\t\\t\\tvestingCliff: vestingCliffInDays,\\n\\t\\t\\t\\ttotalClaimed: 0\\n\\t\\t\\t});\\n\\t\\ttokenGrants[recipient] = grant;\\n\\t\\temit GrantAdded(recipient, amount, grantStartTime, vestingDurationInDays, vestingCliffInDays);\\n\\t\\tvotingPower.addVotingPowerForVestingTokens(recipient, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get token grant for recipient\\n\\t * @param recipient The address that has a grant\\n\\t * @return the grant\\n\\t */\\n\\tfunction getTokenGrant(address recipient) public view returns (Grant memory) {\\n\\t\\treturn tokenGrants[recipient];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculate the vested and unclaimed tokens available for `recipient` to claim\\n\\t * @dev Due to rounding errors once grant duration is reached, returns the entire left grant amount\\n\\t * @dev Returns 0 if cliff has not been reached\\n\\t * @param recipient The address that has a grant\\n\\t * @return The amount recipient can claim\\n\\t */\\n\\tfunction calculateGrantClaim(address recipient) public view returns (uint256) {\\n\\t\\tGrant storage tokenGrant = tokenGrants[recipient];\\n\\n\\t\\t// For grants created with a future start date, that hasn't been reached, return 0, 0\\n\\t\\tif (block.timestamp < tokenGrant.startTime) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t// Check cliff was reached\\n\\t\\tuint256 elapsedTime = block.timestamp - tokenGrant.startTime;\\n\\t\\tuint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n\\n\\t\\tif (elapsedDays < tokenGrant.vestingCliff) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t// If over vesting duration, all tokens vested\\n\\t\\tif (elapsedDays >= tokenGrant.vestingDuration) {\\n\\t\\t\\tuint256 remainingGrant = tokenGrant.amount - tokenGrant.totalClaimed;\\n\\t\\t\\treturn remainingGrant;\\n\\t\\t} else {\\n\\t\\t\\tuint256 vestingDurationInSecs = uint256(tokenGrant.vestingDuration) * SECONDS_PER_DAY;\\n\\t\\t\\tuint256 vestingAmountPerSec = tokenGrant.amount / vestingDurationInSecs;\\n\\t\\t\\tuint256 amountVested = vestingAmountPerSec * elapsedTime;\\n\\t\\t\\tuint256 claimableAmount = amountVested - tokenGrant.totalClaimed;\\n\\t\\t\\treturn claimableAmount;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculate the vested (claimed + unclaimed) tokens for `recipient`\\n\\t * @dev Returns 0 if cliff has not been reached\\n\\t * @param recipient The address that has a grant\\n\\t * @return Total vested balance (claimed + unclaimed)\\n\\t */\\n\\tfunction vestedBalance(address recipient) external view returns (uint256) {\\n\\t\\tGrant storage tokenGrant = tokenGrants[recipient];\\n\\n\\t\\t// For grants created with a future start date, that hasn't been reached, return 0, 0\\n\\t\\tif (block.timestamp < tokenGrant.startTime) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t// Check cliff was reached\\n\\t\\tuint256 elapsedTime = block.timestamp - tokenGrant.startTime;\\n\\t\\tuint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n\\n\\t\\tif (elapsedDays < tokenGrant.vestingCliff) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t// If over vesting duration, all tokens vested\\n\\t\\tif (elapsedDays >= tokenGrant.vestingDuration) {\\n\\t\\t\\treturn tokenGrant.amount;\\n\\t\\t} else {\\n\\t\\t\\tuint256 vestingDurationInSecs = uint256(tokenGrant.vestingDuration) * SECONDS_PER_DAY;\\n\\t\\t\\tuint256 vestingAmountPerSec = tokenGrant.amount / vestingDurationInSecs;\\n\\t\\t\\tuint256 amountVested = vestingAmountPerSec * elapsedTime;\\n\\t\\t\\treturn amountVested;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice The balance claimed by `recipient`\\n\\t * @param recipient The address that has a grant\\n\\t * @return the number of claimed tokens by `recipient`\\n\\t */\\n\\tfunction claimedBalance(address recipient) external view returns (uint256) {\\n\\t\\tGrant storage tokenGrant = tokenGrants[recipient];\\n\\t\\treturn tokenGrant.totalClaimed;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows a grant recipient to claim their vested tokens\\n\\t * @dev Errors if no tokens have vested\\n\\t * @dev It is advised recipients check they are entitled to claim via `calculateGrantClaim` before calling this\\n\\t * @param recipient The address that has a grant\\n\\t */\\n\\tfunction claimVestedTokens(address recipient) external {\\n\\t\\tuint256 amountVested = calculateGrantClaim(recipient);\\n\\t\\trequire(amountVested > 0, \\\"Monastery::claimVested: amountVested is 0\\\");\\n\\t\\tvotingPower.removeVotingPowerForClaimedTokens(recipient, amountVested);\\n\\n\\t\\tGrant storage tokenGrant = tokenGrants[recipient];\\n\\t\\ttokenGrant.totalClaimed = uint256(tokenGrant.totalClaimed + amountVested);\\n\\n\\t\\trequire(token.transfer(recipient, amountVested), \\\"Monastery::claimVested: transfer failed\\\");\\n\\t\\temit GrantTokensClaimed(recipient, amountVested);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculate the number of tokens that will vest per day for the given recipient\\n\\t * @param recipient The address that has a grant\\n\\t * @return Number of tokens that will vest per day\\n\\t */\\n\\tfunction tokensVestedPerDay(address recipient) public view returns (uint256) {\\n\\t\\tGrant storage tokenGrant = tokenGrants[recipient];\\n\\t\\treturn tokenGrant.amount / uint256(tokenGrant.vestingDuration);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set voting power contract address\\n\\t * @param newContract New voting power contract address\\n\\t */\\n\\tfunction setVotingPowerContract(address newContract) external onlyChurch {\\n\\t\\trequire(\\n\\t\\t\\tnewContract != address(0) && newContract != address(this) && newContract != address(token),\\n\\t\\t\\t\\\"Monastery::setVotingPowerContract: not valid contract\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tIVotingPower(newContract).govToken() == address(token),\\n\\t\\t\\t\\\"Monastery::setVotingPowerContract: voting power not initialized\\\"\\n\\t\\t);\\n\\n\\t\\taddress oldContract = address(votingPower);\\n\\t\\tvotingPower = IVotingPower(newContract);\\n\\t\\temit ChangedVotingPower(oldContract, newContract);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Change clergy of vesting contract\\n\\t * @param newChurch New clergy address\\n\\t */\\n\\tfunction conversion(address newChurch) external onlyChurch {\\n\\t\\trequire(\\n\\t\\t\\tnewChurch != address(0) && newChurch != address(this) && newChurch != address(token),\\n\\t\\t\\t\\\"Monastery::conversion: not valid address\\\"\\n\\t\\t);\\n\\n\\t\\taddress oldOwner = clergy;\\n\\t\\tclergy = newChurch;\\n\\t\\temit ApostolicSuccession(oldOwner, newChurch);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc72abfeb5f275a6cf1e16a40e91b700c54084747de17324f1dc2c7338a0c11a6\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/ICrownGovernanceToken.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\ninterface ICrownGovernanceToken is IERC20, IERC20Permit {\\n\\t/// @notice An event that's emitted when the mintCap is changed\\n\\tevent MintCapChanged(uint32 indexed oldMintCap, uint32 indexed newMintCap);\\n\\t/// @notice An event that's emitted when the supplyManager address is changed\\n\\tevent SupplyManagerChanged(address indexed oldManager, address indexed newManager);\\n\\t/// @notice An event that's emitted when the supplyChangeWaitingPeriod is changed\\n\\tevent SupplyChangeWaitingPeriodChanged(uint32 indexed oldWaitingPeriod, uint32 indexed newWaitingPeriod);\\n\\t/// @notice An event that's emitted when the metadataManager address is changed\\n\\tevent MetadataManagerChanged(address indexed oldManager, address indexed newManager);\\n\\t/// @notice An event that's emitted when the token name and symbol are changed\\n\\tevent TokenMetaUpdated(string indexed name, string indexed symbol);\\n\\t/// @notice An event that's emitted whenever an authorized transfer occurs\\n\\tevent AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n\\n\\tfunction name() external view returns (string memory);\\n\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction mint(address dst, uint256 amount) external returns (bool);\\n\\n\\tfunction burn(address src, uint256 amount) external returns (bool);\\n\\n\\tfunction updateTokenMetadata(string memory tokenName, string memory tokenSymbol) external returns (bool);\\n\\n\\tfunction supplyManager() external view returns (address);\\n\\n\\tfunction metadataManager() external view returns (address);\\n\\n\\tfunction supplyChangeAllowedAfter() external view returns (uint256);\\n\\n\\tfunction supplyChangeWaitingPeriod() external view returns (uint32);\\n\\n\\tfunction supplyChangeWaitingPeriodMinimum() external view returns (uint32);\\n\\n\\tfunction mintCap() external view returns (uint32);\\n\\n\\tfunction setSupplyManager(address newSupplyManager) external returns (bool);\\n\\n\\tfunction setMetadataManager(address newMetadataManager) external returns (bool);\\n\\n\\tfunction setSupplyChangeWaitingPeriod(uint32 period) external returns (bool);\\n\\n\\tfunction setMintCap(uint32 newCap) external returns (bool);\\n}\\n\",\"keccak256\":\"0x73a898a087796b408d2e6a686a8ab0680bab932f048e4825c67e8c89da88c3d7\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/IVotingPower.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../libraries/governance/PrismProxy.sol\\\";\\n\\ninterface IVotingPower {\\n\\tstruct Stake {\\n\\t\\tuint256 amount;\\n\\t\\tuint256 votingPower;\\n\\t}\\n\\n\\tevent NewPendingImplementation(address indexed oldPendingImplementation, address indexed newPendingImplementation);\\n\\tevent NewImplementation(address indexed oldImplementation, address indexed newImplementation);\\n\\tevent NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);\\n\\tevent NewAdmin(address indexed oldAdmin, address indexed newAdmin);\\n\\t// TODO: should be able to trim around here, if used as Facet in a Diamond\\n\\tevent Staked(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\tevent Withdrawn(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\tevent VotingPowerChanged(address indexed voter, uint256 indexed previousBalance, uint256 indexed newBalance);\\n\\n\\tfunction setPendingProxyImplementation(address newPendingImplementation) external returns (bool);\\n\\n\\tfunction acceptProxyImplementation() external returns (bool);\\n\\n\\tfunction setPendingProxyAdmin(address newPendingAdmin) external returns (bool);\\n\\n\\tfunction acceptProxyAdmin() external returns (bool);\\n\\n\\tfunction proxyAdmin() external view returns (address);\\n\\n\\tfunction pendingProxyAdmin() external view returns (address);\\n\\n\\tfunction proxyImplementation() external view returns (address);\\n\\n\\tfunction pendingProxyImplementation() external view returns (address);\\n\\n\\tfunction proxyImplementationVersion() external view returns (uint8);\\n\\n\\tfunction become(PrismProxy prism) external;\\n\\n\\t// TODO: should be able to trim around here, if used as Facet in a Diamond\\n\\tfunction initialize(address _govToken, address _vestingContract) external;\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction govToken() external view returns (address);\\n\\n\\tfunction vestingContract() external view returns (address);\\n\\n\\tfunction tokenRegistry() external view returns (address);\\n\\n\\tfunction lockManager() external view returns (address);\\n\\n\\tfunction changeOwner(address newOwner) external;\\n\\n\\tfunction setTokenRegistry(address registry) external;\\n\\n\\tfunction setLockManager(address newLockManager) external;\\n\\n\\tfunction stake(uint256 amount) external;\\n\\n\\tfunction stakeWithPermit(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tfunction withdraw(uint256 amount) external;\\n\\n\\tfunction addVotingPowerForVestingTokens(address account, uint256 amount) external;\\n\\n\\tfunction removeVotingPowerForClaimedTokens(address account, uint256 amount) external;\\n\\n\\tfunction addVotingPowerForLockedTokens(address account, uint256 amount) external;\\n\\n\\tfunction removeVotingPowerForUnlockedTokens(address account, uint256 amount) external;\\n\\n\\tfunction getCrownTokenAmountStaked(address staker) external view returns (uint256);\\n\\n\\tfunction getAmountStaked(address staker, address stakedToken) external view returns (uint256);\\n\\n\\tfunction getCrownTokenStake(address staker) external view returns (Stake memory);\\n\\n\\tfunction getStake(address staker, address stakedToken) external view returns (Stake memory);\\n\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\tfunction balanceOfAt(address account, uint256 blockNumber) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3577d55b604c0010effb26f2813ef08f3ab0c8735182d4c42177d3ffed5183fe\",\"license\":\"Apache-2.0\"},\"contracts/libraries/governance/PrismProxy.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\n/**\\n * Older proxy implementation\\n */\\ncontract PrismProxy {\\n\\t/// @notice Proxy admin and implementation storage variables\\n\\tstruct ProxyStorage {\\n\\t\\t// Administrator for this contract\\n\\t\\taddress admin;\\n\\t\\t// Pending administrator for this contract\\n\\t\\taddress pendingAdmin;\\n\\t\\t// Active implementation of this contract\\n\\t\\taddress implementation;\\n\\t\\t// Pending implementation of this contract\\n\\t\\taddress pendingImplementation;\\n\\t\\t// Implementation version of this contract\\n\\t\\tuint8 version;\\n\\t}\\n\\n\\t/// @dev Position in contract storage where prism ProxyStorage struct will be stored\\n\\tbytes32 constant PRISM_PROXY_STORAGE_POSITION = keccak256(\\\"prism.proxy.storage\\\");\\n\\n\\t/// @notice Emitted when pendingImplementation is changed\\n\\tevent NewPendingImplementation(address indexed oldPendingImplementation, address indexed newPendingImplementation);\\n\\n\\t/// @notice Emitted when pendingImplementation is accepted, which means implementation is updated\\n\\tevent NewImplementation(address indexed oldImplementation, address indexed newImplementation);\\n\\n\\t/// @notice Emitted when pendingAdmin is changed\\n\\tevent NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);\\n\\n\\t/// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n\\tevent NewAdmin(address indexed oldAdmin, address indexed newAdmin);\\n\\n\\t/**\\n\\t * @notice Load proxy storage struct from specified PRISM_PROXY_STORAGE_POSITION\\n\\t * @return ps ProxyStorage struct\\n\\t */\\n\\tfunction proxyStorage() internal pure returns (ProxyStorage storage ps) {\\n\\t\\tbytes32 position = PRISM_PROXY_STORAGE_POSITION;\\n\\t\\tassembly {\\n\\t\\t\\tps.slot := position\\n\\t\\t}\\n\\t}\\n\\n\\t// Admin Functions //\\n\\n\\t/**\\n\\t * @notice Create new pending implementation for prism. msg.sender must be admin\\n\\t * @dev Admin function for proposing new implementation contract\\n\\t * @return boolean indicating success of operation\\n\\t */\\n\\tfunction setPendingProxyImplementation(address newPendingImplementation) public returns (bool) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\trequire(msg.sender == s.admin, \\\"Prism::setPendingProxyImp: caller must be admin\\\");\\n\\n\\t\\taddress oldPendingImplementation = s.pendingImplementation;\\n\\n\\t\\ts.pendingImplementation = newPendingImplementation;\\n\\n\\t\\temit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accepts new implementation for prism. msg.sender must be pendingImplementation\\n\\t * @dev Admin function for new implementation to accept it's role as implementation\\n\\t * @return boolean indicating success of operation\\n\\t */\\n\\tfunction acceptProxyImplementation() public returns (bool) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\t// Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == s.pendingImplementation && s.pendingImplementation != address(0),\\n\\t\\t\\t\\\"Prism::acceptProxyImp: caller must be pending implementation\\\"\\n\\t\\t);\\n\\n\\t\\t// Save current values for inclusion in log\\n\\t\\taddress oldImplementation = s.implementation;\\n\\t\\taddress oldPendingImplementation = s.pendingImplementation;\\n\\n\\t\\ts.implementation = s.pendingImplementation;\\n\\n\\t\\ts.pendingImplementation = address(0);\\n\\t\\ts.version++;\\n\\n\\t\\temit NewImplementation(oldImplementation, s.implementation);\\n\\t\\temit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Begins transfer of admin rights. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n\\t * @dev Admin function to begin change of admin. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n\\t * @param newPendingAdmin New pending admin.\\n\\t * @return boolean indicating success of operation\\n\\t */\\n\\tfunction setPendingProxyAdmin(address newPendingAdmin) public returns (bool) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\t// Check caller = admin\\n\\t\\trequire(msg.sender == s.admin, \\\"Prism::setPendingProxyAdmin: caller must be admin\\\");\\n\\n\\t\\t// Save current value, if any, for inclusion in log\\n\\t\\taddress oldPendingAdmin = s.pendingAdmin;\\n\\n\\t\\t// Store pendingAdmin with value newPendingAdmin\\n\\t\\ts.pendingAdmin = newPendingAdmin;\\n\\n\\t\\t// Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n\\t\\temit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n\\t * @dev Admin function for pending admin to accept role and update admin\\n\\t * @return boolean indicating success of operation\\n\\t */\\n\\tfunction acceptProxyAdmin() public returns (bool) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\t// Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == s.pendingAdmin && msg.sender != address(0),\\n\\t\\t\\t\\\"Prism::acceptProxyAdmin: caller must be pending admin\\\"\\n\\t\\t);\\n\\n\\t\\t// Save current values for inclusion in log\\n\\t\\taddress oldAdmin = s.admin;\\n\\t\\taddress oldPendingAdmin = s.pendingAdmin;\\n\\n\\t\\t// Store admin with value pendingAdmin\\n\\t\\ts.admin = s.pendingAdmin;\\n\\n\\t\\t// Clear the pending value\\n\\t\\ts.pendingAdmin = address(0);\\n\\n\\t\\temit NewAdmin(oldAdmin, s.admin);\\n\\t\\temit NewPendingAdmin(oldPendingAdmin, s.pendingAdmin);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get current admin for prism proxy\\n\\t * @return admin address\\n\\t */\\n\\tfunction proxyAdmin() public view returns (address) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.admin;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get pending admin for prism proxy\\n\\t * @return admin address\\n\\t */\\n\\tfunction pendingProxyAdmin() public view returns (address) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.pendingAdmin;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address of implementation contract\\n\\t * @return implementation address\\n\\t */\\n\\tfunction proxyImplementation() public view returns (address) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.implementation;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address of pending implementation contract\\n\\t * @return pending implementation address\\n\\t */\\n\\tfunction pendingProxyImplementation() public view returns (address) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.pendingImplementation;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Current implementation version for proxy\\n\\t * @return version number\\n\\t */\\n\\tfunction proxyImplementationVersion() public view returns (uint8) {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\treturn s.version;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Delegates execution to an implementation contract.\\n\\t * @dev Returns to the external caller whatever the implementation returns or forwards reverts\\n\\t */\\n\\tfunction _forwardToImplementation() internal {\\n\\t\\tProxyStorage storage s = proxyStorage();\\n\\t\\t// delegate all other functions to current implementation\\n\\t\\t(bool success, ) = s.implementation.delegatecall(msg.data);\\n\\n\\t\\tassembly {\\n\\t\\t\\tlet free_mem_ptr := mload(0x40)\\n\\t\\t\\treturndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n\\t\\t\\tswitch success\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\trevert(free_mem_ptr, returndatasize())\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\treturn(free_mem_ptr, returndatasize())\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x2b90b5c4069439820bb805f734fc8f8272fbe8962b433f74b51e833f6bf1053e\",\"license\":\"Apache-2.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620026d8380380620026d8833981810160405281019062000037919062000149565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a1906200019c565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200026c565b600081519050620001438162000252565b92915050565b6000602082840312156200015c57600080fd5b60006200016c8482850162000132565b91505092915050565b600062000184603383620001be565b9150620001918262000203565b604082019050919050565b60006020820190508181036000830152620001b78162000175565b9050919050565b600082825260208201905092915050565b6000620001dc82620001e3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4d6f6e6173746572793a3a636f6e7374727563746f723a206d7573742062652060008201527f76616c696420746f6b656e206164647265737300000000000000000000000000602082015250565b6200025d81620001cf565b81146200026957600080fd5b50565b61245c806200027c6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806398f3b12d1161008c578063e04c64d211610066578063e04c64d21461024c578063f77bbada14610268578063fc0c546a14610284578063fd75b8d4146102a2576100df565b806398f3b12d146101de578063b81a4d8f146101fa578063cff5df401461022e576100df565b806377174f85116100bd57806377174f85146101605780639114557e1461017e5780639886c2a5146101ae576100df565b8063376d3b8f146100e45780635ca2fc53146101145780636087349c14610130575b600080fd5b6100fe60048036038101906100f99190611678565b6102d2565b60405161010b9190611c96565b60405180910390f35b61012e600480360381019061012991906116ca565b610389565b005b61014a60048036038101906101459190611678565b61099d565b6040516101579190611cb1565b60405180910390f35b610168610a0f565b6040516101759190611abb565b60405180910390f35b61019860048036038101906101939190611678565b610a35565b6040516101a59190611cb1565b60405180910390f35b6101c860048036038101906101c39190611678565b610b68565b6040516101d59190611cb1565b60405180910390f35b6101f860048036038101906101f39190611678565b610bb9565b005b610214600480360381019061020f9190611678565b610e28565b604051610225959493929190611d03565b60405180910390f35b610236610e7a565b6040516102439190611a25565b60405180910390f35b61026660048036038101906102619190611678565b610ea0565b005b610282600480360381019061027d9190611678565b611201565b005b61028c611457565b6040516102999190611aa0565b60405180910390f35b6102bc60048036038101906102b79190611678565b61147b565b6040516102c99190611cb1565b60405180910390f35b6102da6115d8565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a900461ffff1661ffff1661ffff1681526020016002820160029054906101000a900461ffff1661ffff1661ffff1681526020016003820154815250509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041090611bb6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156104ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a290611bd6565b60405180910390fd5b61016d61ffff168161ffff1611156104f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ef90611b76565b60405180910390fd5b60008261ffff161161053f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053690611c36565b60405180910390fd5b610cd561ffff168261ffff16111561058c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058390611b36565b60405180910390fd5b8061ffff168261ffff1610156105d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90611c16565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541461065c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065390611ad6565b60405180910390fd5b60008261ffff168461066e9190611dbd565b9050600081116106b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106aa90611b56565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630876040518463ffffffff1660e01b815260040161073293929190611a40565b602060405180830381600087803b15801561074c57600080fd5b505af1158015610760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107849190611741565b6107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90611c56565b60405180910390fd5b60008086146107d257856107d4565b425b905060006040518060a001604052808381526020018781526020018661ffff1681526020018561ffff1681526020016000815250905080600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548161ffff021916908361ffff16021790555060608201518160020160026101000a81548161ffff021916908361ffff16021790555060808201518160030155905050858873ffffffffffffffffffffffffffffffffffffffff167f289b4a3bfb88b0c05450910f26d440c9e13127d17a232782f02184d45606bd538488886040516108fc93929190611ccc565b60405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b92ac4a89886040518363ffffffff1660e01b8152600401610961929190611a77565b600060405180830381600087803b15801561097b57600080fd5b505af115801561098f573d6000803e3d6000fd5b505050505050505050505050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900461ffff1661ffff168160010154610a079190611dbd565b915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000154421015610a8f576000915050610b63565b6000816000015442610aa19190611e48565b905060006201518082610ab49190611dbd565b90508260020160029054906101000a900461ffff1661ffff16811015610ae05760009350505050610b63565b8260020160009054906101000a900461ffff1661ffff168110610b0c5782600101549350505050610b63565b6000620151808460020160009054906101000a900461ffff1661ffff16610b339190611dee565b90506000818560010154610b479190611dbd565b905060008482610b579190611dee565b90508096505050505050505b919050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060030154915050919050565b6000610bc48261147b565b905060008111610c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0090611c76565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631efaa44283836040518363ffffffff1660e01b8152600401610c66929190611a77565b600060405180830381600087803b158015610c8057600080fd5b505af1158015610c94573d6000803e3d6000fd5b505050506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160030154610ceb9190611d67565b816003018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401610d4e929190611a77565b602060405180830381600087803b158015610d6857600080fd5b505af1158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da09190611741565b610ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd690611b96565b60405180910390fd5b818373ffffffffffffffffffffffffffffffffffffffff167fc6cbb4aa8681b18644bf64921eea8f2b9f44cbd58d64fc07a110bfccc203829660405160405180910390a3505050565b60026020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900461ffff16908060020160029054906101000a900461ffff16908060030154905085565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2790611bb6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610f9957503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015610ff1575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b611030576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102790611bf6565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff166305268cff6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ad57600080fd5b505afa1580156110c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e591906116a1565b73ffffffffffffffffffffffffffffffffffffffff161461113b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113290611af6565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fd5ebd1c28f18d0ac07c2bde08a54c730dce59088921d8ca0c1b92bd9f2e8903860405160405180910390a35050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611291576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128890611bb6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156112fa57503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611352575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b611391576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138890611b16565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c0de6e34b662f136e368cd892a4b29eaaa21e939a7763d8dad8f7a787b6888660405160405180910390a35050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600001544210156114d55760009150506115d3565b60008160000154426114e79190611e48565b9050600062015180826114fa9190611dbd565b90508260020160029054906101000a900461ffff1661ffff1681101561152657600093505050506115d3565b8260020160009054906101000a900461ffff1661ffff168110611567576000836003015484600101546115599190611e48565b9050809450505050506115d3565b6000620151808460020160009054906101000a900461ffff1661ffff1661158e9190611dee565b905060008185600101546115a29190611dbd565b9050600084826115b29190611dee565b905060008660030154826115c69190611e48565b9050809750505050505050505b919050565b6040518060a001604052806000815260200160008152602001600061ffff168152602001600061ffff168152602001600081525090565b60008135905061161e816123ca565b92915050565b600081519050611633816123ca565b92915050565b600081519050611648816123e1565b92915050565b60008135905061165d816123f8565b92915050565b6000813590506116728161240f565b92915050565b60006020828403121561168a57600080fd5b60006116988482850161160f565b91505092915050565b6000602082840312156116b357600080fd5b60006116c184828501611624565b91505092915050565b600080600080600060a086880312156116e257600080fd5b60006116f08882890161160f565b955050602061170188828901611663565b945050604061171288828901611663565b93505060606117238882890161164e565b92505060806117348882890161164e565b9150509295509295909350565b60006020828403121561175357600080fd5b600061176184828501611639565b91505092915050565b61177381611e7c565b82525050565b61178281611ed2565b82525050565b61179181611ef6565b82525050565b60006117a4603a83611d56565b91506117af82611f78565b604082019050919050565b60006117c7603f83611d56565b91506117d282611fc7565b604082019050919050565b60006117ea602883611d56565b91506117f582612016565b604082019050919050565b600061180d603483611d56565b915061181882612065565b604082019050919050565b6000611830603083611d56565b915061183b826120b4565b604082019050919050565b6000611853603083611d56565b915061185e82612103565b604082019050919050565b6000611876602783611d56565b915061188182612152565b604082019050919050565b6000611899602183611d56565b91506118a4826121a1565b604082019050919050565b60006118bc603983611d56565b91506118c7826121f0565b604082019050919050565b60006118df603583611d56565b91506118ea8261223f565b604082019050919050565b6000611902602a83611d56565b915061190d8261228e565b604082019050919050565b6000611925602e83611d56565b9150611930826122dd565b604082019050919050565b6000611948602983611d56565b91506119538261232c565b604082019050919050565b600061196b602983611d56565b91506119768261237b565b604082019050919050565b60a0820160008201516119976000850182611a07565b5060208201516119aa6020850182611a07565b5060408201516119bd60408501826119e9565b5060608201516119d060608501826119e9565b5060808201516119e36080850182611a07565b50505050565b6119f281611e9a565b82525050565b611a0181611e9a565b82525050565b611a1081611ec8565b82525050565b611a1f81611ec8565b82525050565b6000602082019050611a3a600083018461176a565b92915050565b6000606082019050611a55600083018661176a565b611a62602083018561176a565b611a6f6040830184611a16565b949350505050565b6000604082019050611a8c600083018561176a565b611a996020830184611a16565b9392505050565b6000602082019050611ab56000830184611779565b92915050565b6000602082019050611ad06000830184611788565b92915050565b60006020820190508181036000830152611aef81611797565b9050919050565b60006020820190508181036000830152611b0f816117ba565b9050919050565b60006020820190508181036000830152611b2f816117dd565b9050919050565b60006020820190508181036000830152611b4f81611800565b9050919050565b60006020820190508181036000830152611b6f81611823565b9050919050565b60006020820190508181036000830152611b8f81611846565b9050919050565b60006020820190508181036000830152611baf81611869565b9050919050565b60006020820190508181036000830152611bcf8161188c565b9050919050565b60006020820190508181036000830152611bef816118af565b9050919050565b60006020820190508181036000830152611c0f816118d2565b9050919050565b60006020820190508181036000830152611c2f816118f5565b9050919050565b60006020820190508181036000830152611c4f81611918565b9050919050565b60006020820190508181036000830152611c6f8161193b565b9050919050565b60006020820190508181036000830152611c8f8161195e565b9050919050565b600060a082019050611cab6000830184611981565b92915050565b6000602082019050611cc66000830184611a16565b92915050565b6000606082019050611ce16000830186611a16565b611cee60208301856119f8565b611cfb60408301846119f8565b949350505050565b600060a082019050611d186000830188611a16565b611d256020830187611a16565b611d3260408301866119f8565b611d3f60608301856119f8565b611d4c6080830184611a16565b9695505050505050565b600082825260208201905092915050565b6000611d7282611ec8565b9150611d7d83611ec8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611db257611db1611f1a565b5b828201905092915050565b6000611dc882611ec8565b9150611dd383611ec8565b925082611de357611de2611f49565b5b828204905092915050565b6000611df982611ec8565b9150611e0483611ec8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611e3d57611e3c611f1a565b5b828202905092915050565b6000611e5382611ec8565b9150611e5e83611ec8565b925082821015611e7157611e70611f1a565b5b828203905092915050565b6000611e8782611ea8565b9050919050565b60008115159050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611edd82611ee4565b9050919050565b6000611eef82611ea8565b9050919050565b6000611f0182611f08565b9050919050565b6000611f1382611ea8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a206772616e742060008201527f616c72656164792065786973747320666f72206163636f756e74000000000000602082015250565b7f4d6f6e6173746572793a3a736574566f74696e67506f776572436f6e7472616360008201527f743a20766f74696e6720706f776572206e6f7420696e697469616c697a656400602082015250565b7f4d6f6e6173746572793a3a636f6e76657273696f6e3a206e6f742076616c696460008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a2064757261746960008201527f6f6e206d6f7265207468616e2039207965617273000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a20616d6f756e7460008201527f566573746564506572446179203e203000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a20636c6966662060008201527f6d6f7265207468616e2031207965617200000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a636c61696d5665737465643a207472616e7366657260008201527f206661696c656400000000000000000000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a6f6e6c794368757263683a206e6f7420636c65726760008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a2053657420566f60008201527f74696e6720506f77657220636f6e747261637420666972737400000000000000602082015250565b7f4d6f6e6173746572793a3a736574566f74696e67506f776572436f6e7472616360008201527f743a206e6f742076616c696420636f6e74726163740000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a2064757261746960008201527f6f6e203c20636c69666600000000000000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a2064757261746960008201527f6f6e206d757374206265203e2030000000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a207472616e736660008201527f6572206661696c65640000000000000000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a636c61696d5665737465643a20616d6f756e74566560008201527f7374656420697320300000000000000000000000000000000000000000000000602082015250565b6123d381611e7c565b81146123de57600080fd5b50565b6123ea81611e8e565b81146123f557600080fd5b50565b61240181611e9a565b811461240c57600080fd5b50565b61241881611ec8565b811461242357600080fd5b5056fea2646970667358221220d0836ba1d2afab5fad991fbf16fcd975fa7e45b24529aa00fea7b34f3b9b90a764736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c806398f3b12d1161008c578063e04c64d211610066578063e04c64d21461024c578063f77bbada14610268578063fc0c546a14610284578063fd75b8d4146102a2576100df565b806398f3b12d146101de578063b81a4d8f146101fa578063cff5df401461022e576100df565b806377174f85116100bd57806377174f85146101605780639114557e1461017e5780639886c2a5146101ae576100df565b8063376d3b8f146100e45780635ca2fc53146101145780636087349c14610130575b600080fd5b6100fe60048036038101906100f99190611678565b6102d2565b60405161010b9190611c96565b60405180910390f35b61012e600480360381019061012991906116ca565b610389565b005b61014a60048036038101906101459190611678565b61099d565b6040516101579190611cb1565b60405180910390f35b610168610a0f565b6040516101759190611abb565b60405180910390f35b61019860048036038101906101939190611678565b610a35565b6040516101a59190611cb1565b60405180910390f35b6101c860048036038101906101c39190611678565b610b68565b6040516101d59190611cb1565b60405180910390f35b6101f860048036038101906101f39190611678565b610bb9565b005b610214600480360381019061020f9190611678565b610e28565b604051610225959493929190611d03565b60405180910390f35b610236610e7a565b6040516102439190611a25565b60405180910390f35b61026660048036038101906102619190611678565b610ea0565b005b610282600480360381019061027d9190611678565b611201565b005b61028c611457565b6040516102999190611aa0565b60405180910390f35b6102bc60048036038101906102b79190611678565b61147b565b6040516102c99190611cb1565b60405180910390f35b6102da6115d8565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a900461ffff1661ffff1661ffff1681526020016002820160029054906101000a900461ffff1661ffff1661ffff1681526020016003820154815250509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041090611bb6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156104ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a290611bd6565b60405180910390fd5b61016d61ffff168161ffff1611156104f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ef90611b76565b60405180910390fd5b60008261ffff161161053f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053690611c36565b60405180910390fd5b610cd561ffff168261ffff16111561058c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058390611b36565b60405180910390fd5b8061ffff168261ffff1610156105d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90611c16565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541461065c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065390611ad6565b60405180910390fd5b60008261ffff168461066e9190611dbd565b9050600081116106b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106aa90611b56565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630876040518463ffffffff1660e01b815260040161073293929190611a40565b602060405180830381600087803b15801561074c57600080fd5b505af1158015610760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107849190611741565b6107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90611c56565b60405180910390fd5b60008086146107d257856107d4565b425b905060006040518060a001604052808381526020018781526020018661ffff1681526020018561ffff1681526020016000815250905080600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548161ffff021916908361ffff16021790555060608201518160020160026101000a81548161ffff021916908361ffff16021790555060808201518160030155905050858873ffffffffffffffffffffffffffffffffffffffff167f289b4a3bfb88b0c05450910f26d440c9e13127d17a232782f02184d45606bd538488886040516108fc93929190611ccc565b60405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b92ac4a89886040518363ffffffff1660e01b8152600401610961929190611a77565b600060405180830381600087803b15801561097b57600080fd5b505af115801561098f573d6000803e3d6000fd5b505050505050505050505050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900461ffff1661ffff168160010154610a079190611dbd565b915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000154421015610a8f576000915050610b63565b6000816000015442610aa19190611e48565b905060006201518082610ab49190611dbd565b90508260020160029054906101000a900461ffff1661ffff16811015610ae05760009350505050610b63565b8260020160009054906101000a900461ffff1661ffff168110610b0c5782600101549350505050610b63565b6000620151808460020160009054906101000a900461ffff1661ffff16610b339190611dee565b90506000818560010154610b479190611dbd565b905060008482610b579190611dee565b90508096505050505050505b919050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060030154915050919050565b6000610bc48261147b565b905060008111610c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0090611c76565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631efaa44283836040518363ffffffff1660e01b8152600401610c66929190611a77565b600060405180830381600087803b158015610c8057600080fd5b505af1158015610c94573d6000803e3d6000fd5b505050506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160030154610ceb9190611d67565b816003018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401610d4e929190611a77565b602060405180830381600087803b158015610d6857600080fd5b505af1158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da09190611741565b610ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd690611b96565b60405180910390fd5b818373ffffffffffffffffffffffffffffffffffffffff167fc6cbb4aa8681b18644bf64921eea8f2b9f44cbd58d64fc07a110bfccc203829660405160405180910390a3505050565b60026020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900461ffff16908060020160029054906101000a900461ffff16908060030154905085565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2790611bb6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610f9957503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015610ff1575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b611030576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102790611bf6565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff166305268cff6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ad57600080fd5b505afa1580156110c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e591906116a1565b73ffffffffffffffffffffffffffffffffffffffff161461113b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113290611af6565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fd5ebd1c28f18d0ac07c2bde08a54c730dce59088921d8ca0c1b92bd9f2e8903860405160405180910390a35050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611291576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128890611bb6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156112fa57503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611352575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b611391576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138890611b16565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c0de6e34b662f136e368cd892a4b29eaaa21e939a7763d8dad8f7a787b6888660405160405180910390a35050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600001544210156114d55760009150506115d3565b60008160000154426114e79190611e48565b9050600062015180826114fa9190611dbd565b90508260020160029054906101000a900461ffff1661ffff1681101561152657600093505050506115d3565b8260020160009054906101000a900461ffff1661ffff168110611567576000836003015484600101546115599190611e48565b9050809450505050506115d3565b6000620151808460020160009054906101000a900461ffff1661ffff1661158e9190611dee565b905060008185600101546115a29190611dbd565b9050600084826115b29190611dee565b905060008660030154826115c69190611e48565b9050809750505050505050505b919050565b6040518060a001604052806000815260200160008152602001600061ffff168152602001600061ffff168152602001600081525090565b60008135905061161e816123ca565b92915050565b600081519050611633816123ca565b92915050565b600081519050611648816123e1565b92915050565b60008135905061165d816123f8565b92915050565b6000813590506116728161240f565b92915050565b60006020828403121561168a57600080fd5b60006116988482850161160f565b91505092915050565b6000602082840312156116b357600080fd5b60006116c184828501611624565b91505092915050565b600080600080600060a086880312156116e257600080fd5b60006116f08882890161160f565b955050602061170188828901611663565b945050604061171288828901611663565b93505060606117238882890161164e565b92505060806117348882890161164e565b9150509295509295909350565b60006020828403121561175357600080fd5b600061176184828501611639565b91505092915050565b61177381611e7c565b82525050565b61178281611ed2565b82525050565b61179181611ef6565b82525050565b60006117a4603a83611d56565b91506117af82611f78565b604082019050919050565b60006117c7603f83611d56565b91506117d282611fc7565b604082019050919050565b60006117ea602883611d56565b91506117f582612016565b604082019050919050565b600061180d603483611d56565b915061181882612065565b604082019050919050565b6000611830603083611d56565b915061183b826120b4565b604082019050919050565b6000611853603083611d56565b915061185e82612103565b604082019050919050565b6000611876602783611d56565b915061188182612152565b604082019050919050565b6000611899602183611d56565b91506118a4826121a1565b604082019050919050565b60006118bc603983611d56565b91506118c7826121f0565b604082019050919050565b60006118df603583611d56565b91506118ea8261223f565b604082019050919050565b6000611902602a83611d56565b915061190d8261228e565b604082019050919050565b6000611925602e83611d56565b9150611930826122dd565b604082019050919050565b6000611948602983611d56565b91506119538261232c565b604082019050919050565b600061196b602983611d56565b91506119768261237b565b604082019050919050565b60a0820160008201516119976000850182611a07565b5060208201516119aa6020850182611a07565b5060408201516119bd60408501826119e9565b5060608201516119d060608501826119e9565b5060808201516119e36080850182611a07565b50505050565b6119f281611e9a565b82525050565b611a0181611e9a565b82525050565b611a1081611ec8565b82525050565b611a1f81611ec8565b82525050565b6000602082019050611a3a600083018461176a565b92915050565b6000606082019050611a55600083018661176a565b611a62602083018561176a565b611a6f6040830184611a16565b949350505050565b6000604082019050611a8c600083018561176a565b611a996020830184611a16565b9392505050565b6000602082019050611ab56000830184611779565b92915050565b6000602082019050611ad06000830184611788565b92915050565b60006020820190508181036000830152611aef81611797565b9050919050565b60006020820190508181036000830152611b0f816117ba565b9050919050565b60006020820190508181036000830152611b2f816117dd565b9050919050565b60006020820190508181036000830152611b4f81611800565b9050919050565b60006020820190508181036000830152611b6f81611823565b9050919050565b60006020820190508181036000830152611b8f81611846565b9050919050565b60006020820190508181036000830152611baf81611869565b9050919050565b60006020820190508181036000830152611bcf8161188c565b9050919050565b60006020820190508181036000830152611bef816118af565b9050919050565b60006020820190508181036000830152611c0f816118d2565b9050919050565b60006020820190508181036000830152611c2f816118f5565b9050919050565b60006020820190508181036000830152611c4f81611918565b9050919050565b60006020820190508181036000830152611c6f8161193b565b9050919050565b60006020820190508181036000830152611c8f8161195e565b9050919050565b600060a082019050611cab6000830184611981565b92915050565b6000602082019050611cc66000830184611a16565b92915050565b6000606082019050611ce16000830186611a16565b611cee60208301856119f8565b611cfb60408301846119f8565b949350505050565b600060a082019050611d186000830188611a16565b611d256020830187611a16565b611d3260408301866119f8565b611d3f60608301856119f8565b611d4c6080830184611a16565b9695505050505050565b600082825260208201905092915050565b6000611d7282611ec8565b9150611d7d83611ec8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611db257611db1611f1a565b5b828201905092915050565b6000611dc882611ec8565b9150611dd383611ec8565b925082611de357611de2611f49565b5b828204905092915050565b6000611df982611ec8565b9150611e0483611ec8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611e3d57611e3c611f1a565b5b828202905092915050565b6000611e5382611ec8565b9150611e5e83611ec8565b925082821015611e7157611e70611f1a565b5b828203905092915050565b6000611e8782611ea8565b9050919050565b60008115159050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611edd82611ee4565b9050919050565b6000611eef82611ea8565b9050919050565b6000611f0182611f08565b9050919050565b6000611f1382611ea8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a206772616e742060008201527f616c72656164792065786973747320666f72206163636f756e74000000000000602082015250565b7f4d6f6e6173746572793a3a736574566f74696e67506f776572436f6e7472616360008201527f743a20766f74696e6720706f776572206e6f7420696e697469616c697a656400602082015250565b7f4d6f6e6173746572793a3a636f6e76657273696f6e3a206e6f742076616c696460008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a2064757261746960008201527f6f6e206d6f7265207468616e2039207965617273000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a20616d6f756e7460008201527f566573746564506572446179203e203000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a20636c6966662060008201527f6d6f7265207468616e2031207965617200000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a636c61696d5665737465643a207472616e7366657260008201527f206661696c656400000000000000000000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a6f6e6c794368757263683a206e6f7420636c65726760008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a2053657420566f60008201527f74696e6720506f77657220636f6e747261637420666972737400000000000000602082015250565b7f4d6f6e6173746572793a3a736574566f74696e67506f776572436f6e7472616360008201527f743a206e6f742076616c696420636f6e74726163740000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a2064757261746960008201527f6f6e203c20636c69666600000000000000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a2064757261746960008201527f6f6e206d757374206265203e2030000000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a616464546f6b656e4772616e743a207472616e736660008201527f6572206661696c65640000000000000000000000000000000000000000000000602082015250565b7f4d6f6e6173746572793a3a636c61696d5665737465643a20616d6f756e74566560008201527f7374656420697320300000000000000000000000000000000000000000000000602082015250565b6123d381611e7c565b81146123de57600080fd5b50565b6123ea81611e8e565b81146123f557600080fd5b50565b61240181611e9a565b811461240c57600080fd5b50565b61241881611ec8565b811461242357600080fd5b5056fea2646970667358221220d0836ba1d2afab5fad991fbf16fcd975fa7e45b24529aa00fea7b34f3b9b90a764736f6c63430008020033",
  "devdoc": {
    "details": "The vesting contract for the initial KING token distribution",
    "kind": "dev",
    "methods": {
      "addTokenGrant(address,uint256,uint256,uint16,uint16)": {
        "params": {
          "amount": "The amount of tokens being granted",
          "recipient": "The address that is receiving the grant",
          "startTime": "The unix timestamp when the grant will start",
          "vestingCliffInDays": "The vesting cliff duration in days",
          "vestingDurationInDays": "The vesting period in days"
        }
      },
      "calculateGrantClaim(address)": {
        "details": "Due to rounding errors once grant duration is reached, returns the entire left grant amountReturns 0 if cliff has not been reached",
        "params": {
          "recipient": "The address that has a grant"
        },
        "returns": {
          "_0": "The amount recipient can claim"
        }
      },
      "claimVestedTokens(address)": {
        "details": "Errors if no tokens have vestedIt is advised recipients check they are entitled to claim via `calculateGrantClaim` before calling this",
        "params": {
          "recipient": "The address that has a grant"
        }
      },
      "claimedBalance(address)": {
        "params": {
          "recipient": "The address that has a grant"
        },
        "returns": {
          "_0": "the number of claimed tokens by `recipient`"
        }
      },
      "constructor": {
        "params": {
          "_token": "Address of KING token"
        }
      },
      "conversion(address)": {
        "params": {
          "newChurch": "New clergy address"
        }
      },
      "getTokenGrant(address)": {
        "params": {
          "recipient": "The address that has a grant"
        },
        "returns": {
          "_0": "the grant"
        }
      },
      "setVotingPowerContract(address)": {
        "params": {
          "newContract": "New voting power contract address"
        }
      },
      "tokensVestedPerDay(address)": {
        "params": {
          "recipient": "The address that has a grant"
        },
        "returns": {
          "_0": "Number of tokens that will vest per day"
        }
      },
      "vestedBalance(address)": {
        "details": "Returns 0 if cliff has not been reached",
        "params": {
          "recipient": "The address that has a grant"
        },
        "returns": {
          "_0": "Total vested balance (claimed + unclaimed)"
        }
      }
    },
    "stateVariables": {
      "MAX_GRANT_CLIFF_DAYS": {
        "details": "Used to limit cliff periods specified in days"
      },
      "MAX_GRANT_VESTING_DAYS": {
        "details": "Used to limit vesting periods specified in days"
      },
      "SECONDS_PER_DAY": {
        "details": "Used to translate vesting periods specified in days to seconds"
      }
    },
    "title": "Monastery (prev. Vesting)",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ApostolicSuccession(address,address)": {
        "notice": "Event emitted when the clergy of the vesting contract is updated"
      },
      "ChangedVotingPower(address,address)": {
        "notice": "Event emitted when the voting power contract referenced by the vesting contract is updated"
      },
      "GrantAdded(address,uint256,uint256,uint16,uint16)": {
        "notice": "Event emitted when a new grant is created"
      },
      "GrantTokensClaimed(address,uint256)": {
        "notice": "Event emitted when tokens are claimed by a recipient from a grant"
      }
    },
    "kind": "user",
    "methods": {
      "addTokenGrant(address,uint256,uint256,uint16,uint16)": {
        "notice": "Add a new token grant"
      },
      "calculateGrantClaim(address)": {
        "notice": "Calculate the vested and unclaimed tokens available for `recipient` to claim"
      },
      "claimVestedTokens(address)": {
        "notice": "Allows a grant recipient to claim their vested tokens"
      },
      "claimedBalance(address)": {
        "notice": "The balance claimed by `recipient`"
      },
      "clergy()": {
        "notice": "Current clergy of this contract"
      },
      "constructor": {
        "notice": "Construct a new Vesting contract"
      },
      "conversion(address)": {
        "notice": "Change clergy of vesting contract"
      },
      "getTokenGrant(address)": {
        "notice": "Get token grant for recipient"
      },
      "setVotingPowerContract(address)": {
        "notice": "Set voting power contract address"
      },
      "token()": {
        "notice": "Crown Governance token"
      },
      "tokenGrants(address)": {
        "notice": "Mapping of recipient address > token grant"
      },
      "tokensVestedPerDay(address)": {
        "notice": "Calculate the number of tokens that will vest per day for the given recipient"
      },
      "vestedBalance(address)": {
        "notice": "Calculate the vested (claimed + unclaimed) tokens for `recipient`"
      },
      "votingPower()": {
        "notice": "Voting power contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 150,
        "contract": "contracts/governance/Monastery.sol:Monastery",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ICrownGovernanceToken)934"
      },
      {
        "astId": 154,
        "contract": "contracts/governance/Monastery.sol:Monastery",
        "label": "votingPower",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVotingPower)1198"
      },
      {
        "astId": 160,
        "contract": "contracts/governance/Monastery.sol:Monastery",
        "label": "tokenGrants",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Grant)130_storage)"
      },
      {
        "astId": 163,
        "contract": "contracts/governance/Monastery.sol:Monastery",
        "label": "clergy",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICrownGovernanceToken)934": {
        "encoding": "inplace",
        "label": "contract ICrownGovernanceToken",
        "numberOfBytes": "20"
      },
      "t_contract(IVotingPower)1198": {
        "encoding": "inplace",
        "label": "contract IVotingPower",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Grant)130_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Monastery.Grant)",
        "numberOfBytes": "32",
        "value": "t_struct(Grant)130_storage"
      },
      "t_struct(Grant)130_storage": {
        "encoding": "inplace",
        "label": "struct Monastery.Grant",
        "members": [
          {
            "astId": 121,
            "contract": "contracts/governance/Monastery.sol:Monastery",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 123,
            "contract": "contracts/governance/Monastery.sol:Monastery",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 125,
            "contract": "contracts/governance/Monastery.sol:Monastery",
            "label": "vestingDuration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 127,
            "contract": "contracts/governance/Monastery.sol:Monastery",
            "label": "vestingCliff",
            "offset": 2,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 129,
            "contract": "contracts/governance/Monastery.sol:Monastery",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}