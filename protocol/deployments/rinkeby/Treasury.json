{
  "address": "0x800831DeD55dAd615aDD3512A18d4B6431a22Df3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "durationInDays",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "cliffInDays",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "LockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "oldDuration",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "newDuration",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldCliff",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newCliff",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        }
      ],
      "name": "LockExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPowerRemoved",
          "type": "uint256"
        }
      ],
      "name": "UnlockedTokensClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activeLockBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "vestingDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "votingPower",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IVault.Lock",
              "name": "lock",
              "type": "tuple"
            }
          ],
          "internalType": "struct IVault.LockBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activeLockIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activeLocks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "vestingDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.Lock[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActiveLockBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "vestingDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "votingPower",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IVault.Lock",
              "name": "lock",
              "type": "tuple"
            }
          ],
          "internalType": "struct IVault.LockBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActiveLockIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActiveLocks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "vestingDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.Lock[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "allLocks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "vestingDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.Lock[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "locks",
          "type": "uint256[]"
        }
      ],
      "name": "claimAllUnlockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "locks",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "claimUnlockedTokenAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "claimableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "vestingDaysToAdd",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "cliffDaysToAdd",
          "type": "uint16"
        }
      ],
      "name": "extendLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "lockBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "vestingDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "votingPower",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IVault.Lock",
              "name": "lock",
              "type": "tuple"
            }
          ],
          "internalType": "struct IVault.LockBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockManager",
      "outputs": [
        {
          "internalType": "contract ILockManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "vestingDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "grantVotingPower",
          "type": "bool"
        }
      ],
      "name": "lockTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "vestingDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "grantVotingRights",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "lockTokensWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numLocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "tokenBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.TokenBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenLocks",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint16",
          "name": "vestingDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalTokenBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.TokenBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b3533cebb4af9b4895aafc1f4c8fe78f50f0266a8c2627579bcbd275d7441f8",
  "receipt": {
    "to": null,
    "from": "0xfEeDc0DE1EBE0A72f52590Df786101e1c3944545",
    "contractAddress": "0x800831DeD55dAd615aDD3512A18d4B6431a22Df3",
    "transactionIndex": 1,
    "gasUsed": "5325421",
    "logsBloom": "0x
    "blockHash": "0x021fd0a55cc31fa41e8c8bc2e3273c5d5d95664fd65ba6aca5483c1017b3ff8b",
    "transactionHash": "0x8b3533cebb4af9b4895aafc1f4c8fe78f50f0266a8c2627579bcbd275d7441f8",
    "logs": [],
    "blockNumber": 8229074,
    "cumulativeGasUsed": "5647958",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x311aEABc6ddd19446b67A65ef33A0A016C136531"
  ],
  "solcInputHash": "e885469200b403bc2af39246669116fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.92b52cbf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"durationInDays\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"cliffInDays\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"LockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"oldDuration\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newDuration\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldCliff\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newCliff\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"}],\"name\":\"LockExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPowerRemoved\",\"type\":\"uint256\"}],\"name\":\"UnlockedTokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activeLockBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"internalType\":\"struct IVault.LockBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activeLockIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activeLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActiveLockBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"internalType\":\"struct IVault.LockBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActiveLockIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActiveLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"allLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"locks\",\"type\":\"uint256[]\"}],\"name\":\"claimAllUnlockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"locks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"claimUnlockedTokenAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"claimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDaysToAdd\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDaysToAdd\",\"type\":\"uint16\"}],\"name\":\"extendLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"lockBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"internalType\":\"struct IVault.LockBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockManager\",\"outputs\":[{\"internalType\":\"contract ILockManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"grantVotingPower\",\"type\":\"bool\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"grantVotingRights\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"lockTokensWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLocks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalTokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for locking up tokens for arbitrary time intervals, optionally providing voting power\",\"kind\":\"dev\",\"methods\":{\"activeLockBalances(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"_0\":\"the active lock balances\"}},\"activeLockIds(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"_0\":\"the active lock ids\"}},\"activeLocks(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"_0\":\"the locks\"}},\"allActiveLockBalances()\":{\"returns\":{\"_0\":\"the active lock balances\"}},\"allActiveLockIds()\":{\"returns\":{\"_0\":\"the lock ids\"}},\"allActiveLocks()\":{\"returns\":{\"_0\":\"the locks\"}},\"allLocks(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"_0\":\"the locks\"}},\"claimAllUnlockedTokens(uint256[])\":{\"details\":\"Errors if no tokens are claimableIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this\",\"params\":{\"locks\":\"The lock ids for unlocked token balances\"}},\"claimUnlockedTokenAmounts(uint256[],uint256[])\":{\"details\":\"Errors if token amounts provided are > claimable amountsIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this\",\"params\":{\"amounts\":\"The amount of each unlocked token to claim\",\"locks\":\"The lock ids for unlocked token balances\"}},\"claimableBalance(uint256)\":{\"details\":\"Returns 0 if cliff duration has not ended\",\"params\":{\"lockId\":\"The lock ID\"},\"returns\":{\"_0\":\"The amount that can be claimed\"}},\"extendLock(uint256,uint16,uint16)\":{\"params\":{\"cliffDaysToAdd\":\"The number of days to add to cliff duration\",\"lockId\":\"The lock id for a locked token balance\",\"vestingDaysToAdd\":\"The number of days to add to vesting duration\"}},\"lockBalance(uint256)\":{\"params\":{\"lockId\":\"The lock ID\"},\"returns\":{\"balance\":\"the lock balance\"}},\"lockTokens(address,address,address,uint48,uint256,uint16,uint16,bool)\":{\"params\":{\"amount\":\"The amount of tokens being locked\",\"cliffDurationInDays\":\"The cliff duration in days\",\"grantVotingPower\":\"if true, give user voting power from tokens\",\"locker\":\"The account that is locking tokens\",\"receiver\":\"The account that will be able to retrieve unlocked tokens\",\"startTime\":\"The unix timestamp when the lock period will start\",\"vestingDurationInDays\":\"The vesting period in days\"}},\"lockTokensWithPermit(address,address,address,uint48,uint256,uint16,uint16,bool,uint256,bytes)\":{\"details\":\"It is up to the frontend developer to ensure the token implements permit - **otherwise this will fail**\",\"params\":{\"amount\":\"The amount of tokens being locked\",\"cliffDurationInDays\":\"The lock cliff duration in days\",\"deadline\":\"The time at which to expire the signature\",\"grantVotingRights\":\"if true, give user voting power from tokens\",\"locker\":\"The account that is locking tokens\",\"receiver\":\"The account that will be able to retrieve unlocked tokens\",\"signature\":\"The `signature` that signed a hashed message (used to retrieve v,r,s separately and avoid\\t\\t  stack too deep errors\",\"startTime\":\"The unix timestamp when the lock period will start\",\"token\":\"Address of token to lock\",\"vestingDurationInDays\":\"The lock period in days\"}},\"tokenBalance(address,address)\":{\"params\":{\"receiver\":\"The address that has unlocked balances\",\"token\":\"The token to check\"},\"returns\":{\"balance\":\"the total active balance of `token` for `receiver`\"}},\"totalTokenBalance(address)\":{\"params\":{\"token\":\"The token to check\"},\"returns\":{\"balance\":\"the total active balance of `token`\"}}},\"stateVariables\":{\"SECONDS_PER_DAY\":{\"details\":\"Used to translate lock periods specified in days to seconds\"}},\"title\":\"Treasury (prev. Vault)\",\"version\":1},\"userdoc\":{\"events\":{\"LockCreated(address,address,address,uint256,uint256,uint48,uint16,uint16,uint256)\":{\"notice\":\"Event emitted when a new lock is created\"},\"LockExtended(uint256,uint16,uint16,uint16,uint16,uint48)\":{\"notice\":\"Event emitted when lock duration extended\"},\"UnlockedTokensClaimed(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are claimed by a receiver from an unlocked balance\"}},\"kind\":\"user\",\"methods\":{\"activeLockBalances(address)\":{\"notice\":\"Get all active token lock balances for receiver\"},\"activeLockIds(address)\":{\"notice\":\"Get all active token lock ids for receiver\"},\"activeLocks(address)\":{\"notice\":\"Get all active token locks for receiver\"},\"allActiveLockBalances()\":{\"notice\":\"Get all active token lock balances\"},\"allActiveLockIds()\":{\"notice\":\"Get all active token lock ids\"},\"allActiveLocks()\":{\"notice\":\"Get all active token locks\"},\"allLocks(address)\":{\"notice\":\"Get all token locks for receiver\"},\"claimAllUnlockedTokens(uint256[])\":{\"notice\":\"Allows receiver to claim all of their unlocked tokens for a set of locks\"},\"claimUnlockedTokenAmounts(uint256[],uint256[])\":{\"notice\":\"Allows receiver to claim a portion of their unlocked tokens for a given lock\"},\"claimableBalance(uint256)\":{\"notice\":\"Get claimable balance for a given lock id\"},\"constructor\":{\"notice\":\"Create a new Treasury contract\"},\"extendLock(uint256,uint16,uint16)\":{\"notice\":\"Allows receiver extend lock periods for a given lock\"},\"lockBalance(uint256)\":{\"notice\":\"Get lock balance for a given lock id\"},\"lockIds(address,uint256)\":{\"notice\":\"Mapping of address to lock id\"},\"lockManager()\":{\"notice\":\"lockManager contract\"},\"lockTokens(address,address,address,uint48,uint256,uint16,uint16,bool)\":{\"notice\":\"Lock tokens, optionally providing voting power\"},\"lockTokensWithPermit(address,address,address,uint48,uint256,uint16,uint16,bool,uint256,bytes)\":{\"notice\":\"Lock tokens, using permit for approval\"},\"numLocks()\":{\"notice\":\"Number of locks\"},\"tokenBalance(address,address)\":{\"notice\":\"Get token balance of receiver\"},\"tokenLocks(uint256)\":{\"notice\":\"Mapping of lock id > token locks\"},\"totalTokenBalance(address)\":{\"notice\":\"Get total token balance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x44300341eb97e8790e56e0823e8c3d09695fc2ee80555a83a9585f307381f324\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/governance/Treasury.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n                           .=\\\"\\\"_;=.\\n                       ,-\\\"_,=\\\"\\\"     `\\\"=.\\n                       \\\"=._o`\\\"-._        `\\\"=.\\n                           `\\\"=._o`\\\"=._      _`\\\"=._\\n                                :=._o \\\"=._.\\\"_.-=\\\"'\\\"=.\\n                         __.--\\\" , ; `\\\"=._o.\\\" ,-\\\"\\\"\\\"-._ \\\".\\n                      ._\\\"  ,. .` ` `` ,  `\\\"-._\\\"-._   \\\". '\\n                      |o`\\\"=._` , \\\"` `; .\\\". ,  \\\"-._\\\"-._; ;\\n                      | ;`-.o`\\\"=._; .\\\" ` '`.\\\"\\\\` . \\\"-._ /\\n                      |o;    `\\\"-.o`\\\"=._``  '` \\\" ,__.--o;\\n                      | ;     (#) `-.o `\\\"=.`_.--\\\"_o.-; ;\\n                      |o;._    \\\"      `\\\".o|o_.--\\\"    ;o;\\n                       \\\"=._o--._        ; | ;        ; ;\\n                            \\\"=._o--._   ;o|o;     _._;o;\\n                                 \\\"=._o._; | ;_.--\\\"o.--\\\"\\n                                      \\\"=.o|o_.--\\\"\\\"\\n\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/governance/ILockManager.sol\\\";\\nimport \\\"../interfaces/governance/IVault.sol\\\";\\n\\n/**\\n * @title Treasury (prev. Vault)\\n * @dev Contract for locking up tokens for arbitrary time intervals, optionally providing voting power\\n */\\ncontract Treasury is IVault {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @notice lockManager contract\\n\\tILockManager public lockManager;\\n\\n\\t/// @dev Used to translate lock periods specified in days to seconds\\n\\tuint256 internal constant SECONDS_PER_DAY = 86400;\\n\\n\\t/// @notice Mapping of lock id > token locks\\n\\tmapping(uint256 => Lock) public tokenLocks;\\n\\n\\t/// @notice Mapping of address to lock id\\n\\tmapping(address => uint256[]) public lockIds;\\n\\n\\t///@notice Number of locks\\n\\tuint256 public numLocks;\\n\\n\\t/// @notice Event emitted when a new lock is created\\n\\tevent LockCreated(\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed locker,\\n\\t\\taddress indexed receiver,\\n\\t\\tuint256 lockId,\\n\\t\\tuint256 amount,\\n\\t\\tuint48 startTime,\\n\\t\\tuint16 durationInDays,\\n\\t\\tuint16 cliffInDays,\\n\\t\\tuint256 votingPower\\n\\t);\\n\\n\\t/// @notice Event emitted when tokens are claimed by a receiver from an unlocked balance\\n\\tevent UnlockedTokensClaimed(\\n\\t\\taddress indexed receiver,\\n\\t\\taddress indexed token,\\n\\t\\tuint256 indexed lockId,\\n\\t\\tuint256 amountClaimed,\\n\\t\\tuint256 votingPowerRemoved\\n\\t);\\n\\n\\t/// @notice Event emitted when lock duration extended\\n\\tevent LockExtended(\\n\\t\\tuint256 indexed lockId,\\n\\t\\tuint16 indexed oldDuration,\\n\\t\\tuint16 indexed newDuration,\\n\\t\\tuint16 oldCliff,\\n\\t\\tuint16 newCliff,\\n\\t\\tuint48 startTime\\n\\t);\\n\\n\\t/**\\n\\t * @notice Create a new Treasury contract\\n\\t */\\n\\tconstructor(address _lockManager) {\\n\\t\\tlockManager = ILockManager(_lockManager);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Lock tokens, optionally providing voting power\\n\\t * @param locker The account that is locking tokens\\n\\t * @param receiver The account that will be able to retrieve unlocked tokens\\n\\t * @param startTime The unix timestamp when the lock period will start\\n\\t * @param amount The amount of tokens being locked\\n\\t * @param vestingDurationInDays The vesting period in days\\n\\t * @param cliffDurationInDays The cliff duration in days\\n\\t * @param grantVotingPower if true, give user voting power from tokens\\n\\t */\\n\\tfunction lockTokens(\\n\\t\\taddress token,\\n\\t\\taddress locker,\\n\\t\\taddress receiver,\\n\\t\\tuint48 startTime,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 vestingDurationInDays,\\n\\t\\tuint16 cliffDurationInDays,\\n\\t\\tbool grantVotingPower\\n\\t) external override {\\n\\t\\trequire(vestingDurationInDays > 0, \\\"Treasury::lockTokens: vesting duration must be > 0\\\");\\n\\t\\trequire(vestingDurationInDays <= 50 * 365, \\\"Treasury::lockTokens: vesting duration more than 50 years\\\");\\n\\t\\trequire(vestingDurationInDays >= cliffDurationInDays, \\\"Treasury::lockTokens: vesting duration < cliff\\\");\\n\\t\\trequire(amount > 0, \\\"Treasury::lockTokens: amount not > 0\\\");\\n\\n\\t\\t_lockTokens(\\n\\t\\t\\ttoken,\\n\\t\\t\\tlocker,\\n\\t\\t\\treceiver,\\n\\t\\t\\tstartTime,\\n\\t\\t\\tamount,\\n\\t\\t\\tvestingDurationInDays,\\n\\t\\t\\tcliffDurationInDays,\\n\\t\\t\\tgrantVotingPower\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Lock tokens, using permit for approval\\n\\t * @dev It is up to the frontend developer to ensure the token implements permit - **otherwise this will fail**\\n\\t * @param token Address of token to lock\\n\\t * @param locker The account that is locking tokens\\n\\t * @param receiver The account that will be able to retrieve unlocked tokens\\n\\t * @param startTime The unix timestamp when the lock period will start\\n\\t * @param amount The amount of tokens being locked\\n\\t * @param vestingDurationInDays The lock period in days\\n\\t * @param cliffDurationInDays The lock cliff duration in days\\n\\t * @param grantVotingRights if true, give user voting power from tokens\\n\\t * @param deadline The time at which to expire the signature\\n\\t * @param signature The `signature` that signed a hashed message (used to retrieve v,r,s separately and avoid\\n\\t *\\t\\t  stack too deep errors\\n\\t */\\n\\tfunction lockTokensWithPermit(\\n\\t\\taddress token,\\n\\t\\taddress locker,\\n\\t\\taddress receiver,\\n\\t\\tuint48 startTime,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 vestingDurationInDays,\\n\\t\\tuint16 cliffDurationInDays,\\n\\t\\tbool grantVotingRights,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory signature\\n\\t) external override {\\n\\t\\trequire(vestingDurationInDays > 0, \\\"Treasury::lockTokensWithPermit: vesting duration must be > 0\\\");\\n\\t\\trequire(vestingDurationInDays <= 50 * 365, \\\"Treasury::lockTokensWithPermit: vesting duration more than 50 years\\\");\\n\\t\\trequire(vestingDurationInDays >= cliffDurationInDays, \\\"Treasury::lockTokensWithPermit: duration < cliff\\\");\\n\\t\\trequire(amount > 0, \\\"Treasury::lockTokensWithPermit: amount not > 0\\\");\\n\\n\\t\\t// ecrecover takes the signature parameters, and the only way to get them currently is to use assembly\\n\\t\\tuint8 v;\\n\\t\\tbytes32 r;\\n\\t\\tbytes32 s;\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\tr := mload(add(signature, 0x20))\\n\\t\\t\\ts := mload(add(signature, 0x40))\\n\\t\\t\\tv := byte(0, mload(add(signature, 0x60)))\\n\\t\\t}\\n\\n\\t\\tIERC20Permit(token).permit(locker, address(this), amount, deadline, v, r, s);\\n\\t\\t_lockTokens(\\n\\t\\t\\ttoken,\\n\\t\\t\\tlocker,\\n\\t\\t\\treceiver,\\n\\t\\t\\tstartTime,\\n\\t\\t\\tamount,\\n\\t\\t\\tvestingDurationInDays,\\n\\t\\t\\tcliffDurationInDays,\\n\\t\\t\\tgrantVotingRights\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get all active token lock ids\\n\\t * @return the lock ids\\n\\t */\\n\\tfunction allActiveLockIds() external view override returns (uint256[] memory) {\\n\\t\\tuint256 activeCount;\\n\\n\\t\\t// Get number of active locks\\n\\t\\tfor (uint256 i; i < numLocks; i++) {\\n\\t\\t\\tLock memory lock = tokenLocks[i];\\n\\t\\t\\tif (lock.amount != lock.amountClaimed) {\\n\\t\\t\\t\\tactiveCount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Create result array of length `activeCount`\\n\\t\\tuint256[] memory result = new uint256[](activeCount);\\n\\t\\tuint256 j;\\n\\n\\t\\t// Populate result array\\n\\t\\tfor (uint256 i; i < numLocks; i++) {\\n\\t\\t\\tLock memory lock = tokenLocks[i];\\n\\t\\t\\tif (lock.amount != lock.amountClaimed) {\\n\\t\\t\\t\\tresult[j] = i;\\n\\t\\t\\t\\tj++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get all active token locks\\n\\t * @return the locks\\n\\t */\\n\\tfunction allActiveLocks() external view override returns (Lock[] memory) {\\n\\t\\tuint256 activeCount;\\n\\n\\t\\t// Get number of active locks\\n\\t\\tfor (uint256 i; i < numLocks; i++) {\\n\\t\\t\\tLock memory lock = tokenLocks[i];\\n\\t\\t\\tif (lock.amount != lock.amountClaimed) {\\n\\t\\t\\t\\tactiveCount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Create result array of length `activeCount`\\n\\t\\tLock[] memory result = new Lock[](activeCount);\\n\\t\\tuint256 j;\\n\\n\\t\\t// Populate result array\\n\\t\\tfor (uint256 i; i < numLocks; i++) {\\n\\t\\t\\tLock memory lock = tokenLocks[i];\\n\\t\\t\\tif (lock.amount != lock.amountClaimed) {\\n\\t\\t\\t\\tresult[j] = lock;\\n\\t\\t\\t\\tj++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get all active token lock balances\\n\\t * @return the active lock balances\\n\\t */\\n\\tfunction allActiveLockBalances() external view override returns (LockBalance[] memory) {\\n\\t\\tuint256 activeCount;\\n\\n\\t\\t// Get number of active locks\\n\\t\\tfor (uint256 i; i < numLocks; i++) {\\n\\t\\t\\tLock memory lock = tokenLocks[i];\\n\\t\\t\\tif (lock.amount != lock.amountClaimed) {\\n\\t\\t\\t\\tactiveCount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Create result array of length `activeCount`\\n\\t\\tLockBalance[] memory result = new LockBalance[](activeCount);\\n\\t\\tuint256 j;\\n\\n\\t\\t// Populate result array\\n\\t\\tfor (uint256 i; i < numLocks; i++) {\\n\\t\\t\\tLock memory lock = tokenLocks[i];\\n\\t\\t\\tif (lock.amount != lock.amountClaimed) {\\n\\t\\t\\t\\tresult[j] = lockBalance(i);\\n\\t\\t\\t\\tj++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get all active token lock ids for receiver\\n\\t * @param receiver The address that has locked balances\\n\\t * @return the active lock ids\\n\\t */\\n\\tfunction activeLockIds(address receiver) external view override returns (uint256[] memory) {\\n\\t\\tuint256 activeCount;\\n\\t\\tuint256[] memory receiverLockIds = lockIds[receiver];\\n\\n\\t\\t// Get number of active locks\\n\\t\\tfor (uint256 i; i < receiverLockIds.length; i++) {\\n\\t\\t\\tLock memory lock = tokenLocks[receiverLockIds[i]];\\n\\t\\t\\tif (lock.amount != lock.amountClaimed) {\\n\\t\\t\\t\\tactiveCount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Create result array of length `activeCount`\\n\\t\\tuint256[] memory result = new uint256[](activeCount);\\n\\t\\tuint256 j;\\n\\n\\t\\t// Populate result array\\n\\t\\tfor (uint256 i; i < receiverLockIds.length; i++) {\\n\\t\\t\\tLock memory lock = tokenLocks[receiverLockIds[i]];\\n\\t\\t\\tif (lock.amount != lock.amountClaimed) {\\n\\t\\t\\t\\tresult[j] = receiverLockIds[i];\\n\\t\\t\\t\\tj++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get all token locks for receiver\\n\\t * @param receiver The address that has locked balances\\n\\t * @return the locks\\n\\t */\\n\\tfunction allLocks(address receiver) external view override returns (Lock[] memory) {\\n\\t\\tuint256[] memory allLockIds = lockIds[receiver];\\n\\t\\tLock[] memory result = new Lock[](allLockIds.length);\\n\\t\\tfor (uint256 i; i < allLockIds.length; i++) {\\n\\t\\t\\tresult[i] = tokenLocks[allLockIds[i]];\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get all active token locks for receiver\\n\\t * @param receiver The address that has locked balances\\n\\t * @return the locks\\n\\t */\\n\\tfunction activeLocks(address receiver) external view override returns (Lock[] memory) {\\n\\t\\tuint256 activeCount;\\n\\t\\tuint256[] memory receiverLockIds = lockIds[receiver];\\n\\n\\t\\t// Get number of active locks\\n\\t\\tfor (uint256 i; i < receiverLockIds.length; i++) {\\n\\t\\t\\tLock memory lock = tokenLocks[receiverLockIds[i]];\\n\\t\\t\\tif (lock.amount != lock.amountClaimed) {\\n\\t\\t\\t\\tactiveCount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Create result array of length `activeCount`\\n\\t\\tLock[] memory result = new Lock[](activeCount);\\n\\t\\tuint256 j;\\n\\n\\t\\t// Populate result array\\n\\t\\tfor (uint256 i; i < receiverLockIds.length; i++) {\\n\\t\\t\\tLock memory lock = tokenLocks[receiverLockIds[i]];\\n\\t\\t\\tif (lock.amount != lock.amountClaimed) {\\n\\t\\t\\t\\tresult[j] = tokenLocks[receiverLockIds[i]];\\n\\t\\t\\t\\tj++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get all active token lock balances for receiver\\n\\t * @param receiver The address that has locked balances\\n\\t * @return the active lock balances\\n\\t */\\n\\tfunction activeLockBalances(address receiver) external view override returns (LockBalance[] memory) {\\n\\t\\tuint256 activeCount;\\n\\t\\tuint256[] memory receiverLockIds = lockIds[receiver];\\n\\n\\t\\t// Get number of active locks\\n\\t\\tfor (uint256 i; i < receiverLockIds.length; i++) {\\n\\t\\t\\tLock memory lock = tokenLocks[receiverLockIds[i]];\\n\\t\\t\\tif (lock.amount != lock.amountClaimed) {\\n\\t\\t\\t\\tactiveCount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Create result array of length `activeCount`\\n\\t\\tLockBalance[] memory result = new LockBalance[](activeCount);\\n\\t\\tuint256 j;\\n\\n\\t\\t// Populate result array\\n\\t\\tfor (uint256 i; i < receiverLockIds.length; i++) {\\n\\t\\t\\tLock memory lock = tokenLocks[receiverLockIds[i]];\\n\\t\\t\\tif (lock.amount != lock.amountClaimed) {\\n\\t\\t\\t\\tresult[j] = lockBalance(receiverLockIds[i]);\\n\\t\\t\\t\\tj++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get total token balance\\n\\t * @param token The token to check\\n\\t * @return balance the total active balance of `token`\\n\\t */\\n\\tfunction totalTokenBalance(address token) external view override returns (TokenBalance memory balance) {\\n\\t\\tfor (uint256 i; i < numLocks; i++) {\\n\\t\\t\\tLock memory tokenLock = tokenLocks[i];\\n\\t\\t\\tif (tokenLock.token == token && tokenLock.amount != tokenLock.amountClaimed) {\\n\\t\\t\\t\\tbalance.totalAmount = balance.totalAmount + tokenLock.amount;\\n\\t\\t\\t\\tbalance.votingPower = balance.votingPower + tokenLock.votingPower;\\n\\t\\t\\t\\tif (block.timestamp > tokenLock.startTime) {\\n\\t\\t\\t\\t\\tbalance.claimedAmount = balance.claimedAmount + tokenLock.amountClaimed;\\n\\n\\t\\t\\t\\t\\tuint256 elapsedTime = block.timestamp - tokenLock.startTime;\\n\\t\\t\\t\\t\\tuint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n\\n\\t\\t\\t\\t\\tif (elapsedDays >= tokenLock.cliffDurationInDays) {\\n\\t\\t\\t\\t\\t\\tif (elapsedDays >= tokenLock.vestingDurationInDays) {\\n\\t\\t\\t\\t\\t\\t\\tbalance.claimableAmount =\\n\\t\\t\\t\\t\\t\\t\\t\\tbalance.claimableAmount +\\n\\t\\t\\t\\t\\t\\t\\t\\ttokenLock.amount -\\n\\t\\t\\t\\t\\t\\t\\t\\ttokenLock.amountClaimed;\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tuint256 vestingDurationInSecs = uint256(tokenLock.vestingDurationInDays) * SECONDS_PER_DAY;\\n\\t\\t\\t\\t\\t\\t\\tuint256 vestingAmountPerSec = tokenLock.amount / vestingDurationInSecs;\\n\\t\\t\\t\\t\\t\\t\\tuint256 amountVested = vestingAmountPerSec * elapsedTime;\\n\\t\\t\\t\\t\\t\\t\\tbalance.claimableAmount = balance.claimableAmount + amountVested - tokenLock.amountClaimed;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get token balance of receiver\\n\\t * @param token The token to check\\n\\t * @param receiver The address that has unlocked balances\\n\\t * @return balance the total active balance of `token` for `receiver`\\n\\t */\\n\\tfunction tokenBalance(address token, address receiver) external view override returns (TokenBalance memory balance) {\\n\\t\\tuint256[] memory receiverLockIds = lockIds[receiver];\\n\\t\\tfor (uint256 i; i < receiverLockIds.length; i++) {\\n\\t\\t\\tLock memory receiverLock = tokenLocks[receiverLockIds[i]];\\n\\t\\t\\tif (receiverLock.token == token && receiverLock.amount != receiverLock.amountClaimed) {\\n\\t\\t\\t\\tbalance.totalAmount = balance.totalAmount + receiverLock.amount;\\n\\t\\t\\t\\tbalance.votingPower = balance.votingPower + receiverLock.votingPower;\\n\\t\\t\\t\\tif (block.timestamp > receiverLock.startTime) {\\n\\t\\t\\t\\t\\tbalance.claimedAmount = balance.claimedAmount + receiverLock.amountClaimed;\\n\\n\\t\\t\\t\\t\\tuint256 elapsedTime = block.timestamp - receiverLock.startTime;\\n\\t\\t\\t\\t\\tuint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n\\n\\t\\t\\t\\t\\tif (elapsedDays >= receiverLock.cliffDurationInDays) {\\n\\t\\t\\t\\t\\t\\tif (elapsedDays >= receiverLock.vestingDurationInDays) {\\n\\t\\t\\t\\t\\t\\t\\tbalance.claimableAmount =\\n\\t\\t\\t\\t\\t\\t\\t\\tbalance.claimableAmount +\\n\\t\\t\\t\\t\\t\\t\\t\\treceiverLock.amount -\\n\\t\\t\\t\\t\\t\\t\\t\\treceiverLock.amountClaimed;\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tuint256 vestingDurationInSecs = uint256(receiverLock.vestingDurationInDays) * SECONDS_PER_DAY;\\n\\t\\t\\t\\t\\t\\t\\tuint256 vestingAmountPerSec = receiverLock.amount / vestingDurationInSecs;\\n\\t\\t\\t\\t\\t\\t\\tuint256 amountVested = vestingAmountPerSec * elapsedTime;\\n\\t\\t\\t\\t\\t\\t\\tbalance.claimableAmount = balance.claimableAmount + amountVested - receiverLock.amountClaimed;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get lock balance for a given lock id\\n\\t * @param lockId The lock ID\\n\\t * @return balance the lock balance\\n\\t */\\n\\tfunction lockBalance(uint256 lockId) public view override returns (LockBalance memory balance) {\\n\\t\\tbalance.id = lockId;\\n\\t\\tbalance.claimableAmount = claimableBalance(lockId);\\n\\t\\tbalance.lock = tokenLocks[lockId];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get claimable balance for a given lock id\\n\\t * @dev Returns 0 if cliff duration has not ended\\n\\t * @param lockId The lock ID\\n\\t * @return The amount that can be claimed\\n\\t */\\n\\tfunction claimableBalance(uint256 lockId) public view override returns (uint256) {\\n\\t\\tLock storage lock = tokenLocks[lockId];\\n\\n\\t\\t// For locks created with a future start date, that hasn't been reached, return 0\\n\\t\\tif (block.timestamp < lock.startTime) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 elapsedTime = block.timestamp - lock.startTime;\\n\\t\\tuint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n\\n\\t\\tif (elapsedDays < lock.cliffDurationInDays) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tif (elapsedDays >= lock.vestingDurationInDays) {\\n\\t\\t\\treturn lock.amount - lock.amountClaimed;\\n\\t\\t} else {\\n\\t\\t\\tuint256 vestingDurationInSecs = uint256(lock.vestingDurationInDays) * SECONDS_PER_DAY;\\n\\t\\t\\tuint256 vestingAmountPerSec = lock.amount / vestingDurationInSecs;\\n\\t\\t\\tuint256 amountVested = vestingAmountPerSec * elapsedTime;\\n\\t\\t\\treturn amountVested - lock.amountClaimed;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows receiver to claim all of their unlocked tokens for a set of locks\\n\\t * @dev Errors if no tokens are claimable\\n\\t * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n\\t * @param locks The lock ids for unlocked token balances\\n\\t */\\n\\tfunction claimAllUnlockedTokens(uint256[] memory locks) external override {\\n\\t\\tfor (uint256 i = 0; i < locks.length; i++) {\\n\\t\\t\\tuint256 claimableAmount = claimableBalance(locks[i]);\\n\\t\\t\\trequire(claimableAmount > 0, \\\"Treasury::claimAllUnlockedTokens: claimableAmount is 0\\\");\\n\\t\\t\\t_claimTokens(locks[i], claimableAmount);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows receiver to claim a portion of their unlocked tokens for a given lock\\n\\t * @dev Errors if token amounts provided are > claimable amounts\\n\\t * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n\\t * @param locks The lock ids for unlocked token balances\\n\\t * @param amounts The amount of each unlocked token to claim\\n\\t */\\n\\tfunction claimUnlockedTokenAmounts(uint256[] memory locks, uint256[] memory amounts) external override {\\n\\t\\trequire(locks.length == amounts.length, \\\"Treasury::claimUnlockedTokenAmounts: arrays must be same length\\\");\\n\\n\\t\\tfor (uint256 i = 0; i < locks.length; i++) {\\n\\t\\t\\tuint256 claimableAmount = claimableBalance(locks[i]);\\n\\t\\t\\trequire(claimableAmount >= amounts[i], \\\"Treasury::claimUnlockedTokenAmounts: claimableAmount < amount\\\");\\n\\t\\t\\t_claimTokens(locks[i], amounts[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows receiver extend lock periods for a given lock\\n\\t * @param lockId The lock id for a locked token balance\\n\\t * @param vestingDaysToAdd The number of days to add to vesting duration\\n\\t * @param cliffDaysToAdd The number of days to add to cliff duration\\n\\t */\\n\\tfunction extendLock(\\n\\t\\tuint256 lockId,\\n\\t\\tuint16 vestingDaysToAdd,\\n\\t\\tuint16 cliffDaysToAdd\\n\\t) external override {\\n\\t\\tLock storage lock = tokenLocks[lockId];\\n\\t\\trequire(msg.sender == lock.receiver, \\\"Treasury::extendLock: msg.sender must be receiver\\\");\\n\\n\\t\\tuint16 oldVestingDuration = lock.vestingDurationInDays;\\n\\t\\tuint16 newVestingDuration =\\n\\t\\t\\t_add16(oldVestingDuration, vestingDaysToAdd, \\\"Treasury::extendLock: vesting max days exceeded\\\");\\n\\n\\t\\tuint16 oldCliffDuration = lock.cliffDurationInDays;\\n\\t\\tuint16 newCliffDuration =\\n\\t\\t\\t_add16(oldCliffDuration, cliffDaysToAdd, \\\"Treasury::extendLock: cliff max days exceeded\\\");\\n\\n\\t\\trequire(newVestingDuration >= newCliffDuration, \\\"Treasury::extendLock: duration < cliff\\\");\\n\\t\\trequire(newCliffDuration <= 10 * 365, \\\"Treasury::extendLock: cliff more than 10 years\\\");\\n\\t\\trequire(newVestingDuration <= 25 * 365, \\\"Treasury::extendLock: vesting duration more than 25 years\\\");\\n\\n\\t\\tlock.vestingDurationInDays = newVestingDuration;\\n\\n\\t\\temit LockExtended(\\n\\t\\t\\tlockId,\\n\\t\\t\\toldVestingDuration,\\n\\t\\t\\tnewVestingDuration,\\n\\t\\t\\toldCliffDuration,\\n\\t\\t\\tnewCliffDuration,\\n\\t\\t\\tlock.startTime\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Internal implementation of lockTokens\\n\\t * @param locker The account that is locking tokens\\n\\t * @param receiver The account that will be able to retrieve unlocked tokens\\n\\t * @param startTime The unix timestamp when the lock period will start\\n\\t * @param amount The amount of tokens being locked\\n\\t * @param vestingDurationInDays The vesting period in days\\n\\t * @param cliffDurationInDays The cliff duration in days\\n\\t * @param grantVotingPower if true, give user voting power from tokens\\n\\t */\\n\\tfunction _lockTokens(\\n\\t\\taddress token,\\n\\t\\taddress locker,\\n\\t\\taddress receiver,\\n\\t\\tuint48 startTime,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 vestingDurationInDays,\\n\\t\\tuint16 cliffDurationInDays,\\n\\t\\tbool grantVotingPower\\n\\t) internal {\\n\\t\\t// Transfer the tokens under the control of the vault contract\\n\\t\\tIERC20(token).safeTransferFrom(locker, address(this), amount);\\n\\n\\t\\tuint48 lockStartTime = startTime == 0 ? uint48(block.timestamp) : startTime;\\n\\t\\tuint256 votingPowerGranted;\\n\\n\\t\\t// Grant voting power, if specified\\n\\t\\tif (grantVotingPower) {\\n\\t\\t\\tvotingPowerGranted = lockManager.grantVotingPower(receiver, token, amount);\\n\\t\\t}\\n\\n\\t\\t// Create lock\\n\\t\\tLock memory lock =\\n\\t\\t\\tLock({\\n\\t\\t\\t\\ttoken: token,\\n\\t\\t\\t\\treceiver: receiver,\\n\\t\\t\\t\\tstartTime: lockStartTime,\\n\\t\\t\\t\\tvestingDurationInDays: vestingDurationInDays,\\n\\t\\t\\t\\tcliffDurationInDays: cliffDurationInDays,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tamountClaimed: 0,\\n\\t\\t\\t\\tvotingPower: votingPowerGranted\\n\\t\\t\\t});\\n\\n\\t\\ttokenLocks[numLocks] = lock;\\n\\t\\tlockIds[receiver].push(numLocks);\\n\\n\\t\\temit LockCreated(\\n\\t\\t\\ttoken,\\n\\t\\t\\tlocker,\\n\\t\\t\\treceiver,\\n\\t\\t\\tnumLocks,\\n\\t\\t\\tamount,\\n\\t\\t\\tlockStartTime,\\n\\t\\t\\tvestingDurationInDays,\\n\\t\\t\\tcliffDurationInDays,\\n\\t\\t\\tvotingPowerGranted\\n\\t\\t);\\n\\n\\t\\t// Increment lock id\\n\\t\\tnumLocks++;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Internal implementation of token claims\\n\\t * @param lockId The lock id for claim\\n\\t * @param claimAmount The amount to claim\\n\\t */\\n\\tfunction _claimTokens(uint256 lockId, uint256 claimAmount) internal {\\n\\t\\tLock storage lock = tokenLocks[lockId];\\n\\t\\tuint256 votingPowerRemoved;\\n\\n\\t\\t// Remove voting power, if exists\\n\\t\\tif (lock.votingPower > 0) {\\n\\t\\t\\tvotingPowerRemoved = lockManager.removeVotingPower(lock.receiver, lock.token, claimAmount);\\n\\t\\t\\tlock.votingPower = lock.votingPower - votingPowerRemoved;\\n\\t\\t}\\n\\n\\t\\t// Update claimed amount\\n\\t\\tlock.amountClaimed = lock.amountClaimed + claimAmount;\\n\\n\\t\\t// Release tokens\\n\\t\\tIERC20(lock.token).safeTransfer(lock.receiver, claimAmount);\\n\\t\\temit UnlockedTokensClaimed(lock.receiver, lock.token, lockId, claimAmount, votingPowerRemoved);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Adds uint16 to uint16 safely\\n\\t * @param a First number\\n\\t * @param b Second number\\n\\t * @param errorMessage Error message to use if numbers cannot be added\\n\\t * @return uint16 number\\n\\t */\\n\\tfunction _add16(\\n\\t\\tuint16 a,\\n\\t\\tuint16 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint16) {\\n\\t\\tunchecked {\\n\\t\\t\\tuint16 c = a + b;\\n\\t\\t\\trequire(c >= a, errorMessage);\\n\\t\\t\\treturn c;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x5bcd2ca204c9cbce611367c8e5304f25bd49cba6ec442cfdb35ca5ce9b2428b4\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/ILockManager.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface ILockManager {\\n\\tstruct LockedStake {\\n\\t\\tuint256 amount;\\n\\t\\tuint256 votingPower;\\n\\t}\\n\\n\\tfunction getAmountStaked(address staker, address stakedToken) external view returns (uint256);\\n\\n\\tfunction getStake(address staker, address stakedToken) external view returns (LockedStake memory);\\n\\n\\tfunction calculateVotingPower(address token, uint256 amount) external view returns (uint256);\\n\\n\\tfunction grantVotingPower(\\n\\t\\taddress receiver,\\n\\t\\taddress token,\\n\\t\\tuint256 tokenAmount\\n\\t) external returns (uint256 votingPowerGranted);\\n\\n\\tfunction removeVotingPower(\\n\\t\\taddress receiver,\\n\\t\\taddress token,\\n\\t\\tuint256 tokenAmount\\n\\t) external returns (uint256 votingPowerRemoved);\\n}\\n\",\"keccak256\":\"0xefc713b6d7ee8ebecf3f66e0ba93893a29f20dbfa5b4245069f80b50cbcb2645\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/governance/IVault.sol\":{\"content\":\"/*\\n\\n\\tCopyright (c) [2020] [Archer DAO]\\n    Copyright 2020-2021 ARM Finance LLC\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface IVault {\\n\\tstruct Lock {\\n\\t\\taddress token;\\n\\t\\taddress receiver;\\n\\t\\tuint48 startTime;\\n\\t\\tuint16 vestingDurationInDays;\\n\\t\\tuint16 cliffDurationInDays;\\n\\t\\tuint256 amount;\\n\\t\\tuint256 amountClaimed;\\n\\t\\tuint256 votingPower;\\n\\t}\\n\\n\\tstruct LockBalance {\\n\\t\\tuint256 id;\\n\\t\\tuint256 claimableAmount;\\n\\t\\tLock lock;\\n\\t}\\n\\n\\tstruct TokenBalance {\\n\\t\\tuint256 totalAmount;\\n\\t\\tuint256 claimableAmount;\\n\\t\\tuint256 claimedAmount;\\n\\t\\tuint256 votingPower;\\n\\t}\\n\\n\\tfunction lockTokens(\\n\\t\\taddress token,\\n\\t\\taddress locker,\\n\\t\\taddress receiver,\\n\\t\\tuint48 startTime,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 lockDurationInDays,\\n\\t\\tuint16 cliffDurationInDays,\\n\\t\\tbool grantVotingPower\\n\\t) external;\\n\\n\\tfunction lockTokensWithPermit(\\n\\t\\taddress token,\\n\\t\\taddress locker,\\n\\t\\taddress receiver,\\n\\t\\tuint48 startTime,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 lockDurationInDays,\\n\\t\\tuint16 cliffDurationInDays,\\n\\t\\tbool grantVotingPower,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory signature // Prevents CompilerError: Stack too deep when having more than 11 function parameters\\n\\t) external;\\n\\n\\tfunction claimUnlockedTokenAmounts(uint256[] memory lockIds, uint256[] memory amounts) external;\\n\\n\\tfunction claimAllUnlockedTokens(uint256[] memory lockIds) external;\\n\\n\\tfunction allActiveLockIds() external view returns (uint256[] memory);\\n\\n\\tfunction allActiveLocks() external view returns (Lock[] memory);\\n\\n\\tfunction allActiveLockBalances() external view returns (LockBalance[] memory);\\n\\n\\tfunction activeLockIds(address receiver) external view returns (uint256[] memory);\\n\\n\\tfunction allLocks(address receiver) external view returns (Lock[] memory);\\n\\n\\tfunction activeLocks(address receiver) external view returns (Lock[] memory);\\n\\n\\tfunction activeLockBalances(address receiver) external view returns (LockBalance[] memory);\\n\\n\\tfunction totalTokenBalance(address token) external view returns (TokenBalance memory balance);\\n\\n\\tfunction tokenBalance(address token, address receiver) external view returns (TokenBalance memory balance);\\n\\n\\tfunction lockBalance(uint256 lockId) external view returns (LockBalance memory);\\n\\n\\tfunction claimableBalance(uint256 lockId) external view returns (uint256);\\n\\n\\tfunction extendLock(\\n\\t\\tuint256 lockId,\\n\\t\\tuint16 vestingDaysToAdd,\\n\\t\\tuint16 cliffDaysToAdd\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xb1ba4cbb627f21b8a2aa2565de40215e2a7c154b956bcf4c13b5f79eb047414d\",\"license\":\"Apache-2.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200607238038062006072833981810160405281019062000037919062000095565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200010f565b6000815190506200008f81620000f5565b92915050565b600060208284031215620000a857600080fd5b6000620000b8848285016200007e565b91505092915050565b6000620000ce82620000d5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200010081620000c1565b81146200010c57600080fd5b50565b615f53806200011f6000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063946ca949116100cd578063d422cf5811610081578063eb3c64c411610066578063eb3c64c4146103fe578063f339c5041461041a578063f54659921461044a5761016c565b8063d422cf58146103c4578063d7da8bc2146103e25761016c565b8063ada748a5116100b2578063ada748a514610348578063ba4a051b14610364578063bed5df7c146103945761016c565b8063946ca949146102f3578063acca30a21461032a5761016c565b80634a176a4b11610124578063791ba92111610109578063791ba9211461027757806385d3374f146102a75780638f204998146102d75761016c565b80634a176a4b1461022957806354ac185e146102595761016c565b806319ac0d901161015557806319ac0d90146101bf5780631c1a4710146101db5780633c4926d41461020b5761016c565b80631049334f146101715780631091e807146101a1575b600080fd5b61018b600480360381019061018691906144fb565b61047a565b6040516101989190615358565b60405180910390f35b6101a961087a565b6040516101b6919061509d565b60405180910390f35b6101d960048036038101906101d49190614537565b610c72565b005b6101f560048036038101906101f091906146dc565b610daa565b60405161020291906153aa565b60405180910390f35b610213610ddb565b6040516102209190615059565b60405180910390f35b610243600480360381019061023e91906144d2565b6111e5565b6040516102509190615059565b60405180910390f35b610261611742565b60405161026e919061507b565b60405180910390f35b610291600480360381019061028c91906144d2565b611b44565b60405161029e919061507b565b60405180910390f35b6102c160048036038101906102bc91906147ee565b611e5a565b6040516102ce91906153aa565b60405180910390f35b6102f160048036038101906102ec9190614840565b611fb3565b005b61030d600480360381019061030891906147ee565b61223a565b604051610321989796959493929190614fb2565b60405180910390f35b6103326122f0565b60405161033f91906150bf565b60405180910390f35b610362600480360381019061035d9190614718565b612314565b005b61037e600480360381019061037991906144d2565b612412565b60405161038b919061507b565b60405180910390f35b6103ae60048036038101906103a991906144d2565b612abb565b6040516103bb919061509d565b60405180910390f35b6103cc613006565b6040516103d991906153aa565b60405180910390f35b6103fc60048036038101906103f79190614759565b61300c565b005b610418600480360381019061041391906145e9565b6131cf565b005b610434600480360381019061042f91906147ee565b6133a0565b604051610441919061533c565b60405180910390f35b610464600480360381019061045f91906144d2565b613526565b6040516104719190615358565b60405180910390f35b610482614271565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561050d57602002820191906000526020600020905b8154815260200190600101908083116104f9575b5050505050905060005b81518110156108725760006001600084848151811061055f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508573ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614801561070057508060c001518160a0015114155b1561085e578060a00151846000015161071991906155ae565b8460000181815250508060e00151846060015161073691906155ae565b846060018181525050806040015165ffffffffffff1642111561085d578060c00151846040015161076791906155ae565b8460400181815250506000816040015165ffffffffffff164261078a919061568f565b90506000620151808261079d9190615604565b9050826080015161ffff16811061085a57826060015161ffff1681106107ee578260c001518360a0015187602001516107d691906155ae565b6107e0919061568f565b866020018181525050610859565b600062015180846060015161ffff166108079190615635565b90506000818560a0015161081b9190615604565b90506000848261082b9190615635565b90508560c00151818a6020015161084291906155ae565b61084c919061568f565b8960200181815250505050505b5b50505b5b50808061086a906157d9565b915050610517565b505092915050565b60606000805b600354811015610a1557600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114610a015782806109fd906157d9565b9350505b508080610a0d906157d9565b915050610880565b5060008167ffffffffffffffff811115610a58577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a865781602001602082028036833780820191505090505b5090506000805b600354811015610c6857600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114610c545781848481518110610c39577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508280610c50906157d9565b9350505b508080610c60906157d9565b915050610a8d565b5081935050505090565b60008361ffff1611610cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb09061523c565b60405180910390fd5b61474a8361ffff161115610d02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf9906151fc565b60405180910390fd5b8161ffff168361ffff161015610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d44906151bc565b60405180910390fd5b60008411610d90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d879061517c565b60405180910390fd5b610da08888888888888888613853565b5050505050505050565b60026020528160005260406000208181548110610dc657600080fd5b90600052602060002001600091509150505481565b60606000805b600354811015610f7657600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114610f62578280610f5e906157d9565b9350505b508080610f6e906157d9565b915050610de1565b5060008167ffffffffffffffff811115610fb9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610ff257816020015b610fdf614299565b815260200190600190039081610fd75790505b5090506000805b6003548110156111db57600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a00151146111c757611174826133a0565b8484815181106111ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525082806111c3906157d9565b9350505b5080806111d3906157d9565b915050610ff9565b5081935050505090565b6060600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561127357602002820191906000526020600020905b81548152602001906001019080831161125f575b5050505050905060005b8151811015611451576000600160008484815181106112c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a001511461143d578380611439906157d9565b9450505b508080611449906157d9565b91505061127d565b5060008267ffffffffffffffff811115611494577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156114cd57816020015b6114ba614299565b8152602001906001900390816114b25790505b5090506000805b83518110156117355760006001600086848151811061151c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114611721576116ce8583815181106116c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516133a0565b848481518110611707577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250828061171d906157d9565b9350505b50808061172d906157d9565b9150506114d4565b5081945050505050919050565b60606000805b6003548110156118dd57600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a00151146118c95782806118c5906157d9565b9350505b5080806118d5906157d9565b915050611748565b5060008167ffffffffffffffff811115611920577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561195957816020015b6119466142c0565b81526020019060019003908161193e5790505b5090506000805b600354811015611b3a57600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114611b265780848481518110611b0c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508280611b22906157d9565b9350505b508080611b32906157d9565b915050611960565b5081935050505090565b60606000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611bd157602002820191906000526020600020905b815481526020019060010190808311611bbd575b505050505090506000815167ffffffffffffffff811115611c1b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611c5457816020015b611c416142c0565b815260200190600190039081611c395790505b50905060005b8251811015611e4f5760016000848381518110611ca0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff1681526020016002820154815260200160038201548152602001600482015481525050828281518110611e31577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508080611e47906157d9565b915050611c5a565b508092505050919050565b6000806001600084815260200190815260200160002090508060010160149054906101000a900465ffffffffffff1665ffffffffffff16421015611ea2576000915050611fae565b60008160010160149054906101000a900465ffffffffffff1665ffffffffffff1642611ece919061568f565b905060006201518082611ee19190615604565b905082600101601c9054906101000a900461ffff1661ffff16811015611f0d5760009350505050611fae565b82600101601a9054906101000a900461ffff1661ffff168110611f485782600301548360020154611f3e919061568f565b9350505050611fae565b60006201518084600101601a9054906101000a900461ffff1661ffff16611f6f9190615635565b90506000818560020154611f839190615604565b905060008482611f939190615635565b9050856003015481611fa5919061568f565b96505050505050505b919050565b60006001600085815260200190815260200160002090508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461205c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612053906151dc565b60405180910390fd5b600081600101601a9054906101000a900461ffff169050600061209882866040518060600160405280602f8152602001615eef602f9139613c1b565b9050600083600101601c9054906101000a900461ffff16905060006120d682876040518060600160405280602d8152602001615ec2602d9139613c1b565b90508061ffff168361ffff161015612123576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211a9061511c565b60405180910390fd5b610e428161ffff16111561216c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121639061531c565b60405180910390fd5b6123a58361ffff1611156121b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ac9061513c565b60405180910390fd5b8285600101601a6101000a81548161ffff021916908361ffff1602179055508261ffff168461ffff16897f230404042daed14abd1b9cba00060fea5fc11a5aad4f4a2efb7bf2de5d0f92bf85858a60010160149054906101000a900465ffffffffffff1660405161222893929190615373565b60405180910390a45050505050505050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900465ffffffffffff169080600101601a9054906101000a900461ffff169080600101601c9054906101000a900461ffff16908060020154908060030154908060040154905088565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005b815181101561240e57600061236b83838151811061235e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611e5a565b9050600081116123b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a79061521c565b60405180910390fd5b6123fa8383815181106123ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015182613c7d565b508080612406906157d9565b915050612317565b5050565b6060600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156124a057602002820191906000526020600020905b81548152602001906001019080831161248c575b5050505050905060005b815181101561267e576000600160008484815181106124f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a001511461266a578380612666906157d9565b9450505b508080612676906157d9565b9150506124aa565b5060008267ffffffffffffffff8111156126c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156126fa57816020015b6126e76142c0565b8152602001906001900390816126df5790505b5090506000805b8351811015612aae57600060016000868481518110612749577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114612a9a57600160008684815181106128ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff1681526020016002820154815260200160038201548152602001600482015481525050848481518110612a80577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508280612a96906157d9565b9350505b508080612aa6906157d9565b915050612701565b5081945050505050919050565b6060600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612b4957602002820191906000526020600020905b815481526020019060010190808311612b35575b5050505050905060005b8151811015612d2757600060016000848481518110612b9b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114612d13578380612d0f906157d9565b9450505b508080612d1f906157d9565b915050612b53565b5060008267ffffffffffffffff811115612d6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612d985781602001602082028036833780820191505090505b5090506000805b8351811015612ff957600060016000868481518110612de7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114612fe557848281518110612f89577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151848481518110612fca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508280612fe1906157d9565b9350505b508080612ff1906157d9565b915050612d9f565b5081945050505050919050565b60035481565b8051825114613050576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130479061527c565b60405180910390fd5b60005b82518110156131ca5760006130a784838151811061309a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611e5a565b90508282815181106130e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181101561312c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131239061529c565b60405180910390fd5b6131b6848381518110613168577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518484815181106131a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151613c7d565b5080806131c2906157d9565b915050613053565b505050565b60008561ffff1611613216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161320d9061525c565b60405180910390fd5b61474a8561ffff16111561325f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613256906150fc565b60405180910390fd5b8361ffff168561ffff1610156132aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132a19061515c565b60405180910390fd5b600086116132ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132e4906152fc565b60405180910390fd5b60008060006020840151915060408401519050606084015160001a92508c73ffffffffffffffffffffffffffffffffffffffff1663d505accf8d308c898888886040518863ffffffff1660e01b815260040161334f9796959493929190614f43565b600060405180830381600087803b15801561336957600080fd5b505af115801561337d573d6000803e3d6000fd5b505050506133918d8d8d8d8d8d8d8d613853565b50505050505050505050505050565b6133a8614299565b818160000181815250506133bb82611e5a565b81602001818152505060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff16815260200160028201548152602001600382015481526020016004820154815250508160400181905250919050565b61352e614271565b60005b60035481101561384d57600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161480156136db57508060c001518160a0015114155b15613839578060a0015183600001516136f491906155ae565b8360000181815250508060e00151836060015161371191906155ae565b836060018181525050806040015165ffffffffffff16421115613838578060c00151836040015161374291906155ae565b8360400181815250506000816040015165ffffffffffff1642613765919061568f565b9050600062015180826137789190615604565b9050826080015161ffff16811061383557826060015161ffff1681106137c9578260c001518360a0015186602001516137b191906155ae565b6137bb919061568f565b856020018181525050613834565b600062015180846060015161ffff166137e29190615635565b90506000818560a001516137f69190615604565b9050600084826138069190615635565b90508560c0015181896020015161381d91906155ae565b613827919061568f565b8860200181815250505050505b5b50505b5b508080613845906157d9565b915050613531565b50919050565b6138808730868b73ffffffffffffffffffffffffffffffffffffffff16613ef5909392919063ffffffff16565b6000808665ffffffffffff16146138975785613899565b425b9050600082156139555760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc61256e898c896040518463ffffffff1660e01b815260040161390093929190614f0c565b602060405180830381600087803b15801561391a57600080fd5b505af115801561392e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139529190614817565b90505b60006040518061010001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018465ffffffffffff1681526020018761ffff1681526020018661ffff168152602001888152602001600081526020018381525090508060016000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600101601a6101000a81548161ffff021916908361ffff160217905550608082015181600101601c6101000a81548161ffff021916908361ffff16021790555060a0820151816002015560c0820151816003015560e08201518160040155905050600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150558873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f61a86a91d761a7322a10c3ff0cda14501ac0d019f088b470cb222e5e94747e896003548b888c8c8a604051613bee969594939291906153ee565b60405180910390a460036000815480929190613c09906157d9565b91905055505050505050505050505050565b60008083850190508461ffff168161ffff1610158390613c71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c6891906150da565b60405180910390fd5b50809150509392505050565b600060016000848152602001908152602001600020905060008082600401541115613db45760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc3e1b7a8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b8152600401613d4793929190614f0c565b602060405180830381600087803b158015613d6157600080fd5b505af1158015613d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d999190614817565b9050808260040154613dab919061568f565b82600401819055505b828260030154613dc491906155ae565b8260030181905550613e3f8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613f7e9092919063ffffffff16565b838260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbac91588ea67037e676b74f37797bcae8524aab9a7ba7431a24a72e6f29bc1978685604051613ee79291906153c5565b60405180910390a450505050565b613f78846323b872dd60e01b858585604051602401613f1693929190614f0c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614004565b50505050565b613fff8363a9059cbb60e01b8484604051602401613f9d929190615030565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614004565b505050565b6000614066826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166140cb9092919063ffffffff16565b90506000815111156140c6578080602001905181019061408691906147c5565b6140c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016140bc906152dc565b60405180910390fd5b5b505050565b60606140da84846000856140e3565b90509392505050565b606082471015614128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161411f9061519c565b60405180910390fd5b614131856141f7565b614170576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614167906152bc565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516141999190614ef5565b60006040518083038185875af1925050503d80600081146141d6576040519150601f19603f3d011682016040523d82523d6000602084013e6141db565b606091505b50915091506141eb82828661420a565b92505050949350505050565b600080823b905060008111915050919050565b6060831561421a5782905061426a565b60008351111561422d5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161426191906150da565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b604051806060016040528060008152602001600081526020016142ba6142c0565b81525090565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600065ffffffffffff168152602001600061ffff168152602001600061ffff1681526020016000815260200160008152602001600081525090565b600061435461434f84615474565b61544f565b9050808382526020820190508285602086028201111561437357600080fd5b60005b858110156143a357816143898882614493565b845260208401935060208301925050600181019050614376565b5050509392505050565b60006143c06143bb846154a0565b61544f565b9050828152602081018484840111156143d857600080fd5b6143e3848285615766565b509392505050565b6000813590506143fa81615e4e565b92915050565b600082601f83011261441157600080fd5b8135614421848260208601614341565b91505092915050565b60008135905061443981615e65565b92915050565b60008151905061444e81615e65565b92915050565b600082601f83011261446557600080fd5b81356144758482602086016143ad565b91505092915050565b60008135905061448d81615e7c565b92915050565b6000813590506144a281615e93565b92915050565b6000815190506144b781615e93565b92915050565b6000813590506144cc81615eaa565b92915050565b6000602082840312156144e457600080fd5b60006144f2848285016143eb565b91505092915050565b6000806040838503121561450e57600080fd5b600061451c858286016143eb565b925050602061452d858286016143eb565b9150509250929050565b600080600080600080600080610100898b03121561455457600080fd5b60006145628b828c016143eb565b98505060206145738b828c016143eb565b97505060406145848b828c016143eb565b96505060606145958b828c016144bd565b95505060806145a68b828c01614493565b94505060a06145b78b828c0161447e565b93505060c06145c88b828c0161447e565b92505060e06145d98b828c0161442a565b9150509295985092959890939650565b6000806000806000806000806000806101408b8d03121561460957600080fd5b60006146178d828e016143eb565b9a505060206146288d828e016143eb565b99505060406146398d828e016143eb565b985050606061464a8d828e016144bd565b975050608061465b8d828e01614493565b96505060a061466c8d828e0161447e565b95505060c061467d8d828e0161447e565b94505060e061468e8d828e0161442a565b9350506101006146a08d828e01614493565b9250506101208b013567ffffffffffffffff8111156146be57600080fd5b6146ca8d828e01614454565b9150509295989b9194979a5092959850565b600080604083850312156146ef57600080fd5b60006146fd858286016143eb565b925050602061470e85828601614493565b9150509250929050565b60006020828403121561472a57600080fd5b600082013567ffffffffffffffff81111561474457600080fd5b61475084828501614400565b91505092915050565b6000806040838503121561476c57600080fd5b600083013567ffffffffffffffff81111561478657600080fd5b61479285828601614400565b925050602083013567ffffffffffffffff8111156147af57600080fd5b6147bb85828601614400565b9150509250929050565b6000602082840312156147d757600080fd5b60006147e58482850161443f565b91505092915050565b60006020828403121561480057600080fd5b600061480e84828501614493565b91505092915050565b60006020828403121561482957600080fd5b6000614837848285016144a8565b91505092915050565b60008060006060848603121561485557600080fd5b600061486386828701614493565b93505060206148748682870161447e565b92505060406148858682870161447e565b9150509250925092565b600061489b8383614d0f565b6101408301905092915050565b60006148b48383614d95565b6101008301905092915050565b60006148cd8383614eaa565b60208301905092915050565b6148e2816156c3565b82525050565b6148f1816156c3565b82525050565b600061490282615501565b61490c818561555f565b9350614917836154d1565b8060005b8381101561494857815161492f888261488f565b975061493a83615538565b92505060018101905061491b565b5085935050505092915050565b60006149608261550c565b61496a8185615570565b9350614975836154e1565b8060005b838110156149a657815161498d88826148a8565b975061499883615545565b925050600181019050614979565b5085935050505092915050565b60006149be82615517565b6149c88185615581565b93506149d3836154f1565b8060005b83811015614a045781516149eb88826148c1565b97506149f683615552565b9250506001810190506149d7565b5085935050505092915050565b614a1a816156e1565b82525050565b6000614a2b82615522565b614a358185615592565b9350614a45818560208601615775565b80840191505092915050565b614a5a81615742565b82525050565b6000614a6b8261552d565b614a75818561559d565b9350614a85818560208601615775565b614a8e816158af565b840191505092915050565b6000614aa660438361559d565b9150614ab1826158c0565b606082019050919050565b6000614ac960268361559d565b9150614ad482615935565b604082019050919050565b6000614aec60398361559d565b9150614af782615984565b604082019050919050565b6000614b0f60308361559d565b9150614b1a826159d3565b604082019050919050565b6000614b3260248361559d565b9150614b3d82615a22565b604082019050919050565b6000614b5560268361559d565b9150614b6082615a71565b604082019050919050565b6000614b78602e8361559d565b9150614b8382615ac0565b604082019050919050565b6000614b9b60318361559d565b9150614ba682615b0f565b604082019050919050565b6000614bbe60398361559d565b9150614bc982615b5e565b604082019050919050565b6000614be160368361559d565b9150614bec82615bad565b604082019050919050565b6000614c0460328361559d565b9150614c0f82615bfc565b604082019050919050565b6000614c27603c8361559d565b9150614c3282615c4b565b604082019050919050565b6000614c4a603f8361559d565b9150614c5582615c9a565b604082019050919050565b6000614c6d603d8361559d565b9150614c7882615ce9565b604082019050919050565b6000614c90601d8361559d565b9150614c9b82615d38565b602082019050919050565b6000614cb3602a8361559d565b9150614cbe82615d61565b604082019050919050565b6000614cd6602e8361559d565b9150614ce182615db0565b604082019050919050565b6000614cf9602e8361559d565b9150614d0482615dff565b604082019050919050565b61014082016000820151614d266000850182614eaa565b506020820151614d396020850182614eaa565b506040820151614d4c6040850182614d95565b50505050565b61014082016000820151614d696000850182614eaa565b506020820151614d7c6020850182614eaa565b506040820151614d8f6040850182614d95565b50505050565b61010082016000820151614dac60008501826148d9565b506020820151614dbf60208501826148d9565b506040820151614dd26040850182614ec8565b506060820151614de56060850182614e8c565b506080820151614df86080850182614e8c565b5060a0820151614e0b60a0850182614eaa565b5060c0820151614e1e60c0850182614eaa565b5060e0820151614e3160e0850182614eaa565b50505050565b608082016000820151614e4d6000850182614eaa565b506020820151614e606020850182614eaa565b506040820151614e736040850182614eaa565b506060820151614e866060850182614eaa565b50505050565b614e95816156eb565b82525050565b614ea4816156eb565b82525050565b614eb381615719565b82525050565b614ec281615719565b82525050565b614ed181615723565b82525050565b614ee081615723565b82525050565b614eef81615735565b82525050565b6000614f018284614a20565b915081905092915050565b6000606082019050614f2160008301866148e8565b614f2e60208301856148e8565b614f3b6040830184614eb9565b949350505050565b600060e082019050614f58600083018a6148e8565b614f6560208301896148e8565b614f726040830188614eb9565b614f7f6060830187614eb9565b614f8c6080830186614ee6565b614f9960a0830185614a11565b614fa660c0830184614a11565b98975050505050505050565b600061010082019050614fc8600083018b6148e8565b614fd5602083018a6148e8565b614fe26040830189614ed7565b614fef6060830188614e9b565b614ffc6080830187614e9b565b61500960a0830186614eb9565b61501660c0830185614eb9565b61502360e0830184614eb9565b9998505050505050505050565b600060408201905061504560008301856148e8565b6150526020830184614eb9565b9392505050565b6000602082019050818103600083015261507381846148f7565b905092915050565b600060208201905081810360008301526150958184614955565b905092915050565b600060208201905081810360008301526150b781846149b3565b905092915050565b60006020820190506150d46000830184614a51565b92915050565b600060208201905081810360008301526150f48184614a60565b905092915050565b6000602082019050818103600083015261511581614a99565b9050919050565b6000602082019050818103600083015261513581614abc565b9050919050565b6000602082019050818103600083015261515581614adf565b9050919050565b6000602082019050818103600083015261517581614b02565b9050919050565b6000602082019050818103600083015261519581614b25565b9050919050565b600060208201905081810360008301526151b581614b48565b9050919050565b600060208201905081810360008301526151d581614b6b565b9050919050565b600060208201905081810360008301526151f581614b8e565b9050919050565b6000602082019050818103600083015261521581614bb1565b9050919050565b6000602082019050818103600083015261523581614bd4565b9050919050565b6000602082019050818103600083015261525581614bf7565b9050919050565b6000602082019050818103600083015261527581614c1a565b9050919050565b6000602082019050818103600083015261529581614c3d565b9050919050565b600060208201905081810360008301526152b581614c60565b9050919050565b600060208201905081810360008301526152d581614c83565b9050919050565b600060208201905081810360008301526152f581614ca6565b9050919050565b6000602082019050818103600083015261531581614cc9565b9050919050565b6000602082019050818103600083015261533581614cec565b9050919050565b6000610140820190506153526000830184614d52565b92915050565b600060808201905061536d6000830184614e37565b92915050565b60006060820190506153886000830186614e9b565b6153956020830185614e9b565b6153a26040830184614ed7565b949350505050565b60006020820190506153bf6000830184614eb9565b92915050565b60006040820190506153da6000830185614eb9565b6153e76020830184614eb9565b9392505050565b600060c0820190506154036000830189614eb9565b6154106020830188614eb9565b61541d6040830187614ed7565b61542a6060830186614e9b565b6154376080830185614e9b565b61544460a0830184614eb9565b979650505050505050565b600061545961546a565b905061546582826157a8565b919050565b6000604051905090565b600067ffffffffffffffff82111561548f5761548e615880565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156154bb576154ba615880565b5b6154c4826158af565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006155b982615719565b91506155c483615719565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156155f9576155f8615822565b5b828201905092915050565b600061560f82615719565b915061561a83615719565b92508261562a57615629615851565b5b828204905092915050565b600061564082615719565b915061564b83615719565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561568457615683615822565b5b828202905092915050565b600061569a82615719565b91506156a583615719565b9250828210156156b8576156b7615822565b5b828203905092915050565b60006156ce826156f9565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600065ffffffffffff82169050919050565b600060ff82169050919050565b600061574d82615754565b9050919050565b600061575f826156f9565b9050919050565b82818337600083830152505050565b60005b83811015615793578082015181840152602081019050615778565b838111156157a2576000848401525b50505050565b6157b1826158af565b810181811067ffffffffffffffff821117156157d0576157cf615880565b5b80604052505050565b60006157e482615719565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561581757615816615822565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f54726561737572793a3a6c6f636b546f6b656e73576974685065726d69743a2060008201527f76657374696e67206475726174696f6e206d6f7265207468616e20353020796560208201527f6172730000000000000000000000000000000000000000000000000000000000604082015250565b7f54726561737572793a3a657874656e644c6f636b3a206475726174696f6e203c60008201527f20636c6966660000000000000000000000000000000000000000000000000000602082015250565b7f54726561737572793a3a657874656e644c6f636b3a2076657374696e6720647560008201527f726174696f6e206d6f7265207468616e20323520796561727300000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e73576974685065726d69743a2060008201527f6475726174696f6e203c20636c69666600000000000000000000000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e733a20616d6f756e74206e6f7460008201527f203e203000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e733a2076657374696e6720647560008201527f726174696f6e203c20636c696666000000000000000000000000000000000000602082015250565b7f54726561737572793a3a657874656e644c6f636b3a206d73672e73656e64657260008201527f206d757374206265207265636569766572000000000000000000000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e733a2076657374696e6720647560008201527f726174696f6e206d6f7265207468616e20353020796561727300000000000000602082015250565b7f54726561737572793a3a636c61696d416c6c556e6c6f636b6564546f6b656e7360008201527f3a20636c61696d61626c65416d6f756e74206973203000000000000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e733a2076657374696e6720647560008201527f726174696f6e206d757374206265203e20300000000000000000000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e73576974685065726d69743a2060008201527f76657374696e67206475726174696f6e206d757374206265203e203000000000602082015250565b7f54726561737572793a3a636c61696d556e6c6f636b6564546f6b656e416d6f7560008201527f6e74733a20617272617973206d7573742062652073616d65206c656e67746800602082015250565b7f54726561737572793a3a636c61696d556e6c6f636b6564546f6b656e416d6f7560008201527f6e74733a20636c61696d61626c65416d6f756e74203c20616d6f756e74000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e73576974685065726d69743a2060008201527f616d6f756e74206e6f74203e2030000000000000000000000000000000000000602082015250565b7f54726561737572793a3a657874656e644c6f636b3a20636c696666206d6f726560008201527f207468616e203130207965617273000000000000000000000000000000000000602082015250565b615e57816156c3565b8114615e6257600080fd5b50565b615e6e816156d5565b8114615e7957600080fd5b50565b615e85816156eb565b8114615e9057600080fd5b50565b615e9c81615719565b8114615ea757600080fd5b50565b615eb381615723565b8114615ebe57600080fd5b5056fe54726561737572793a3a657874656e644c6f636b3a20636c696666206d6178206461797320657863656564656454726561737572793a3a657874656e644c6f636b3a2076657374696e67206d61782064617973206578636565646564a2646970667358221220c64806ea2e743039f3e7a415a1b292656c8b976db13ab0374c02e18f11faf7ad64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c8063946ca949116100cd578063d422cf5811610081578063eb3c64c411610066578063eb3c64c4146103fe578063f339c5041461041a578063f54659921461044a5761016c565b8063d422cf58146103c4578063d7da8bc2146103e25761016c565b8063ada748a5116100b2578063ada748a514610348578063ba4a051b14610364578063bed5df7c146103945761016c565b8063946ca949146102f3578063acca30a21461032a5761016c565b80634a176a4b11610124578063791ba92111610109578063791ba9211461027757806385d3374f146102a75780638f204998146102d75761016c565b80634a176a4b1461022957806354ac185e146102595761016c565b806319ac0d901161015557806319ac0d90146101bf5780631c1a4710146101db5780633c4926d41461020b5761016c565b80631049334f146101715780631091e807146101a1575b600080fd5b61018b600480360381019061018691906144fb565b61047a565b6040516101989190615358565b60405180910390f35b6101a961087a565b6040516101b6919061509d565b60405180910390f35b6101d960048036038101906101d49190614537565b610c72565b005b6101f560048036038101906101f091906146dc565b610daa565b60405161020291906153aa565b60405180910390f35b610213610ddb565b6040516102209190615059565b60405180910390f35b610243600480360381019061023e91906144d2565b6111e5565b6040516102509190615059565b60405180910390f35b610261611742565b60405161026e919061507b565b60405180910390f35b610291600480360381019061028c91906144d2565b611b44565b60405161029e919061507b565b60405180910390f35b6102c160048036038101906102bc91906147ee565b611e5a565b6040516102ce91906153aa565b60405180910390f35b6102f160048036038101906102ec9190614840565b611fb3565b005b61030d600480360381019061030891906147ee565b61223a565b604051610321989796959493929190614fb2565b60405180910390f35b6103326122f0565b60405161033f91906150bf565b60405180910390f35b610362600480360381019061035d9190614718565b612314565b005b61037e600480360381019061037991906144d2565b612412565b60405161038b919061507b565b60405180910390f35b6103ae60048036038101906103a991906144d2565b612abb565b6040516103bb919061509d565b60405180910390f35b6103cc613006565b6040516103d991906153aa565b60405180910390f35b6103fc60048036038101906103f79190614759565b61300c565b005b610418600480360381019061041391906145e9565b6131cf565b005b610434600480360381019061042f91906147ee565b6133a0565b604051610441919061533c565b60405180910390f35b610464600480360381019061045f91906144d2565b613526565b6040516104719190615358565b60405180910390f35b610482614271565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561050d57602002820191906000526020600020905b8154815260200190600101908083116104f9575b5050505050905060005b81518110156108725760006001600084848151811061055f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508573ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614801561070057508060c001518160a0015114155b1561085e578060a00151846000015161071991906155ae565b8460000181815250508060e00151846060015161073691906155ae565b846060018181525050806040015165ffffffffffff1642111561085d578060c00151846040015161076791906155ae565b8460400181815250506000816040015165ffffffffffff164261078a919061568f565b90506000620151808261079d9190615604565b9050826080015161ffff16811061085a57826060015161ffff1681106107ee578260c001518360a0015187602001516107d691906155ae565b6107e0919061568f565b866020018181525050610859565b600062015180846060015161ffff166108079190615635565b90506000818560a0015161081b9190615604565b90506000848261082b9190615635565b90508560c00151818a6020015161084291906155ae565b61084c919061568f565b8960200181815250505050505b5b50505b5b50808061086a906157d9565b915050610517565b505092915050565b60606000805b600354811015610a1557600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114610a015782806109fd906157d9565b9350505b508080610a0d906157d9565b915050610880565b5060008167ffffffffffffffff811115610a58577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a865781602001602082028036833780820191505090505b5090506000805b600354811015610c6857600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114610c545781848481518110610c39577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508280610c50906157d9565b9350505b508080610c60906157d9565b915050610a8d565b5081935050505090565b60008361ffff1611610cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb09061523c565b60405180910390fd5b61474a8361ffff161115610d02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf9906151fc565b60405180910390fd5b8161ffff168361ffff161015610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d44906151bc565b60405180910390fd5b60008411610d90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d879061517c565b60405180910390fd5b610da08888888888888888613853565b5050505050505050565b60026020528160005260406000208181548110610dc657600080fd5b90600052602060002001600091509150505481565b60606000805b600354811015610f7657600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114610f62578280610f5e906157d9565b9350505b508080610f6e906157d9565b915050610de1565b5060008167ffffffffffffffff811115610fb9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610ff257816020015b610fdf614299565b815260200190600190039081610fd75790505b5090506000805b6003548110156111db57600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a00151146111c757611174826133a0565b8484815181106111ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525082806111c3906157d9565b9350505b5080806111d3906157d9565b915050610ff9565b5081935050505090565b6060600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561127357602002820191906000526020600020905b81548152602001906001019080831161125f575b5050505050905060005b8151811015611451576000600160008484815181106112c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a001511461143d578380611439906157d9565b9450505b508080611449906157d9565b91505061127d565b5060008267ffffffffffffffff811115611494577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156114cd57816020015b6114ba614299565b8152602001906001900390816114b25790505b5090506000805b83518110156117355760006001600086848151811061151c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114611721576116ce8583815181106116c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516133a0565b848481518110611707577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250828061171d906157d9565b9350505b50808061172d906157d9565b9150506114d4565b5081945050505050919050565b60606000805b6003548110156118dd57600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a00151146118c95782806118c5906157d9565b9350505b5080806118d5906157d9565b915050611748565b5060008167ffffffffffffffff811115611920577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561195957816020015b6119466142c0565b81526020019060019003908161193e5790505b5090506000805b600354811015611b3a57600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114611b265780848481518110611b0c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508280611b22906157d9565b9350505b508080611b32906157d9565b915050611960565b5081935050505090565b60606000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611bd157602002820191906000526020600020905b815481526020019060010190808311611bbd575b505050505090506000815167ffffffffffffffff811115611c1b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611c5457816020015b611c416142c0565b815260200190600190039081611c395790505b50905060005b8251811015611e4f5760016000848381518110611ca0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff1681526020016002820154815260200160038201548152602001600482015481525050828281518110611e31577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508080611e47906157d9565b915050611c5a565b508092505050919050565b6000806001600084815260200190815260200160002090508060010160149054906101000a900465ffffffffffff1665ffffffffffff16421015611ea2576000915050611fae565b60008160010160149054906101000a900465ffffffffffff1665ffffffffffff1642611ece919061568f565b905060006201518082611ee19190615604565b905082600101601c9054906101000a900461ffff1661ffff16811015611f0d5760009350505050611fae565b82600101601a9054906101000a900461ffff1661ffff168110611f485782600301548360020154611f3e919061568f565b9350505050611fae565b60006201518084600101601a9054906101000a900461ffff1661ffff16611f6f9190615635565b90506000818560020154611f839190615604565b905060008482611f939190615635565b9050856003015481611fa5919061568f565b96505050505050505b919050565b60006001600085815260200190815260200160002090508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461205c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612053906151dc565b60405180910390fd5b600081600101601a9054906101000a900461ffff169050600061209882866040518060600160405280602f8152602001615eef602f9139613c1b565b9050600083600101601c9054906101000a900461ffff16905060006120d682876040518060600160405280602d8152602001615ec2602d9139613c1b565b90508061ffff168361ffff161015612123576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211a9061511c565b60405180910390fd5b610e428161ffff16111561216c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121639061531c565b60405180910390fd5b6123a58361ffff1611156121b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ac9061513c565b60405180910390fd5b8285600101601a6101000a81548161ffff021916908361ffff1602179055508261ffff168461ffff16897f230404042daed14abd1b9cba00060fea5fc11a5aad4f4a2efb7bf2de5d0f92bf85858a60010160149054906101000a900465ffffffffffff1660405161222893929190615373565b60405180910390a45050505050505050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900465ffffffffffff169080600101601a9054906101000a900461ffff169080600101601c9054906101000a900461ffff16908060020154908060030154908060040154905088565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005b815181101561240e57600061236b83838151811061235e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611e5a565b9050600081116123b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a79061521c565b60405180910390fd5b6123fa8383815181106123ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015182613c7d565b508080612406906157d9565b915050612317565b5050565b6060600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156124a057602002820191906000526020600020905b81548152602001906001019080831161248c575b5050505050905060005b815181101561267e576000600160008484815181106124f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a001511461266a578380612666906157d9565b9450505b508080612676906157d9565b9150506124aa565b5060008267ffffffffffffffff8111156126c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156126fa57816020015b6126e76142c0565b8152602001906001900390816126df5790505b5090506000805b8351811015612aae57600060016000868481518110612749577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114612a9a57600160008684815181106128ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff1681526020016002820154815260200160038201548152602001600482015481525050848481518110612a80577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508280612a96906157d9565b9350505b508080612aa6906157d9565b915050612701565b5081945050505050919050565b6060600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612b4957602002820191906000526020600020905b815481526020019060010190808311612b35575b5050505050905060005b8151811015612d2757600060016000848481518110612b9b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114612d13578380612d0f906157d9565b9450505b508080612d1f906157d9565b915050612b53565b5060008267ffffffffffffffff811115612d6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612d985781602001602082028036833780820191505090505b5090506000805b8351811015612ff957600060016000868481518110612de7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508060c001518160a0015114612fe557848281518110612f89577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151848481518110612fca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508280612fe1906157d9565b9350505b508080612ff1906157d9565b915050612d9f565b5081945050505050919050565b60035481565b8051825114613050576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130479061527c565b60405180910390fd5b60005b82518110156131ca5760006130a784838151811061309a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611e5a565b90508282815181106130e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181101561312c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131239061529c565b60405180910390fd5b6131b6848381518110613168577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518484815181106131a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151613c7d565b5080806131c2906157d9565b915050613053565b505050565b60008561ffff1611613216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161320d9061525c565b60405180910390fd5b61474a8561ffff16111561325f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613256906150fc565b60405180910390fd5b8361ffff168561ffff1610156132aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132a19061515c565b60405180910390fd5b600086116132ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132e4906152fc565b60405180910390fd5b60008060006020840151915060408401519050606084015160001a92508c73ffffffffffffffffffffffffffffffffffffffff1663d505accf8d308c898888886040518863ffffffff1660e01b815260040161334f9796959493929190614f43565b600060405180830381600087803b15801561336957600080fd5b505af115801561337d573d6000803e3d6000fd5b505050506133918d8d8d8d8d8d8d8d613853565b50505050505050505050505050565b6133a8614299565b818160000181815250506133bb82611e5a565b81602001818152505060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff16815260200160028201548152602001600382015481526020016004820154815250508160400181905250919050565b61352e614271565b60005b60035481101561384d57600060016000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff16815260200160018201601c9054906101000a900461ffff1661ffff1661ffff168152602001600282015481526020016003820154815260200160048201548152505090508373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161480156136db57508060c001518160a0015114155b15613839578060a0015183600001516136f491906155ae565b8360000181815250508060e00151836060015161371191906155ae565b836060018181525050806040015165ffffffffffff16421115613838578060c00151836040015161374291906155ae565b8360400181815250506000816040015165ffffffffffff1642613765919061568f565b9050600062015180826137789190615604565b9050826080015161ffff16811061383557826060015161ffff1681106137c9578260c001518360a0015186602001516137b191906155ae565b6137bb919061568f565b856020018181525050613834565b600062015180846060015161ffff166137e29190615635565b90506000818560a001516137f69190615604565b9050600084826138069190615635565b90508560c0015181896020015161381d91906155ae565b613827919061568f565b8860200181815250505050505b5b50505b5b508080613845906157d9565b915050613531565b50919050565b6138808730868b73ffffffffffffffffffffffffffffffffffffffff16613ef5909392919063ffffffff16565b6000808665ffffffffffff16146138975785613899565b425b9050600082156139555760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc61256e898c896040518463ffffffff1660e01b815260040161390093929190614f0c565b602060405180830381600087803b15801561391a57600080fd5b505af115801561392e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139529190614817565b90505b60006040518061010001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018465ffffffffffff1681526020018761ffff1681526020018661ffff168152602001888152602001600081526020018381525090508060016000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600101601a6101000a81548161ffff021916908361ffff160217905550608082015181600101601c6101000a81548161ffff021916908361ffff16021790555060a0820151816002015560c0820151816003015560e08201518160040155905050600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150558873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f61a86a91d761a7322a10c3ff0cda14501ac0d019f088b470cb222e5e94747e896003548b888c8c8a604051613bee969594939291906153ee565b60405180910390a460036000815480929190613c09906157d9565b91905055505050505050505050505050565b60008083850190508461ffff168161ffff1610158390613c71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c6891906150da565b60405180910390fd5b50809150509392505050565b600060016000848152602001908152602001600020905060008082600401541115613db45760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc3e1b7a8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b8152600401613d4793929190614f0c565b602060405180830381600087803b158015613d6157600080fd5b505af1158015613d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d999190614817565b9050808260040154613dab919061568f565b82600401819055505b828260030154613dc491906155ae565b8260030181905550613e3f8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613f7e9092919063ffffffff16565b838260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbac91588ea67037e676b74f37797bcae8524aab9a7ba7431a24a72e6f29bc1978685604051613ee79291906153c5565b60405180910390a450505050565b613f78846323b872dd60e01b858585604051602401613f1693929190614f0c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614004565b50505050565b613fff8363a9059cbb60e01b8484604051602401613f9d929190615030565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614004565b505050565b6000614066826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166140cb9092919063ffffffff16565b90506000815111156140c6578080602001905181019061408691906147c5565b6140c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016140bc906152dc565b60405180910390fd5b5b505050565b60606140da84846000856140e3565b90509392505050565b606082471015614128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161411f9061519c565b60405180910390fd5b614131856141f7565b614170576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614167906152bc565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516141999190614ef5565b60006040518083038185875af1925050503d80600081146141d6576040519150601f19603f3d011682016040523d82523d6000602084013e6141db565b606091505b50915091506141eb82828661420a565b92505050949350505050565b600080823b905060008111915050919050565b6060831561421a5782905061426a565b60008351111561422d5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161426191906150da565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b604051806060016040528060008152602001600081526020016142ba6142c0565b81525090565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600065ffffffffffff168152602001600061ffff168152602001600061ffff1681526020016000815260200160008152602001600081525090565b600061435461434f84615474565b61544f565b9050808382526020820190508285602086028201111561437357600080fd5b60005b858110156143a357816143898882614493565b845260208401935060208301925050600181019050614376565b5050509392505050565b60006143c06143bb846154a0565b61544f565b9050828152602081018484840111156143d857600080fd5b6143e3848285615766565b509392505050565b6000813590506143fa81615e4e565b92915050565b600082601f83011261441157600080fd5b8135614421848260208601614341565b91505092915050565b60008135905061443981615e65565b92915050565b60008151905061444e81615e65565b92915050565b600082601f83011261446557600080fd5b81356144758482602086016143ad565b91505092915050565b60008135905061448d81615e7c565b92915050565b6000813590506144a281615e93565b92915050565b6000815190506144b781615e93565b92915050565b6000813590506144cc81615eaa565b92915050565b6000602082840312156144e457600080fd5b60006144f2848285016143eb565b91505092915050565b6000806040838503121561450e57600080fd5b600061451c858286016143eb565b925050602061452d858286016143eb565b9150509250929050565b600080600080600080600080610100898b03121561455457600080fd5b60006145628b828c016143eb565b98505060206145738b828c016143eb565b97505060406145848b828c016143eb565b96505060606145958b828c016144bd565b95505060806145a68b828c01614493565b94505060a06145b78b828c0161447e565b93505060c06145c88b828c0161447e565b92505060e06145d98b828c0161442a565b9150509295985092959890939650565b6000806000806000806000806000806101408b8d03121561460957600080fd5b60006146178d828e016143eb565b9a505060206146288d828e016143eb565b99505060406146398d828e016143eb565b985050606061464a8d828e016144bd565b975050608061465b8d828e01614493565b96505060a061466c8d828e0161447e565b95505060c061467d8d828e0161447e565b94505060e061468e8d828e0161442a565b9350506101006146a08d828e01614493565b9250506101208b013567ffffffffffffffff8111156146be57600080fd5b6146ca8d828e01614454565b9150509295989b9194979a5092959850565b600080604083850312156146ef57600080fd5b60006146fd858286016143eb565b925050602061470e85828601614493565b9150509250929050565b60006020828403121561472a57600080fd5b600082013567ffffffffffffffff81111561474457600080fd5b61475084828501614400565b91505092915050565b6000806040838503121561476c57600080fd5b600083013567ffffffffffffffff81111561478657600080fd5b61479285828601614400565b925050602083013567ffffffffffffffff8111156147af57600080fd5b6147bb85828601614400565b9150509250929050565b6000602082840312156147d757600080fd5b60006147e58482850161443f565b91505092915050565b60006020828403121561480057600080fd5b600061480e84828501614493565b91505092915050565b60006020828403121561482957600080fd5b6000614837848285016144a8565b91505092915050565b60008060006060848603121561485557600080fd5b600061486386828701614493565b93505060206148748682870161447e565b92505060406148858682870161447e565b9150509250925092565b600061489b8383614d0f565b6101408301905092915050565b60006148b48383614d95565b6101008301905092915050565b60006148cd8383614eaa565b60208301905092915050565b6148e2816156c3565b82525050565b6148f1816156c3565b82525050565b600061490282615501565b61490c818561555f565b9350614917836154d1565b8060005b8381101561494857815161492f888261488f565b975061493a83615538565b92505060018101905061491b565b5085935050505092915050565b60006149608261550c565b61496a8185615570565b9350614975836154e1565b8060005b838110156149a657815161498d88826148a8565b975061499883615545565b925050600181019050614979565b5085935050505092915050565b60006149be82615517565b6149c88185615581565b93506149d3836154f1565b8060005b83811015614a045781516149eb88826148c1565b97506149f683615552565b9250506001810190506149d7565b5085935050505092915050565b614a1a816156e1565b82525050565b6000614a2b82615522565b614a358185615592565b9350614a45818560208601615775565b80840191505092915050565b614a5a81615742565b82525050565b6000614a6b8261552d565b614a75818561559d565b9350614a85818560208601615775565b614a8e816158af565b840191505092915050565b6000614aa660438361559d565b9150614ab1826158c0565b606082019050919050565b6000614ac960268361559d565b9150614ad482615935565b604082019050919050565b6000614aec60398361559d565b9150614af782615984565b604082019050919050565b6000614b0f60308361559d565b9150614b1a826159d3565b604082019050919050565b6000614b3260248361559d565b9150614b3d82615a22565b604082019050919050565b6000614b5560268361559d565b9150614b6082615a71565b604082019050919050565b6000614b78602e8361559d565b9150614b8382615ac0565b604082019050919050565b6000614b9b60318361559d565b9150614ba682615b0f565b604082019050919050565b6000614bbe60398361559d565b9150614bc982615b5e565b604082019050919050565b6000614be160368361559d565b9150614bec82615bad565b604082019050919050565b6000614c0460328361559d565b9150614c0f82615bfc565b604082019050919050565b6000614c27603c8361559d565b9150614c3282615c4b565b604082019050919050565b6000614c4a603f8361559d565b9150614c5582615c9a565b604082019050919050565b6000614c6d603d8361559d565b9150614c7882615ce9565b604082019050919050565b6000614c90601d8361559d565b9150614c9b82615d38565b602082019050919050565b6000614cb3602a8361559d565b9150614cbe82615d61565b604082019050919050565b6000614cd6602e8361559d565b9150614ce182615db0565b604082019050919050565b6000614cf9602e8361559d565b9150614d0482615dff565b604082019050919050565b61014082016000820151614d266000850182614eaa565b506020820151614d396020850182614eaa565b506040820151614d4c6040850182614d95565b50505050565b61014082016000820151614d696000850182614eaa565b506020820151614d7c6020850182614eaa565b506040820151614d8f6040850182614d95565b50505050565b61010082016000820151614dac60008501826148d9565b506020820151614dbf60208501826148d9565b506040820151614dd26040850182614ec8565b506060820151614de56060850182614e8c565b506080820151614df86080850182614e8c565b5060a0820151614e0b60a0850182614eaa565b5060c0820151614e1e60c0850182614eaa565b5060e0820151614e3160e0850182614eaa565b50505050565b608082016000820151614e4d6000850182614eaa565b506020820151614e606020850182614eaa565b506040820151614e736040850182614eaa565b506060820151614e866060850182614eaa565b50505050565b614e95816156eb565b82525050565b614ea4816156eb565b82525050565b614eb381615719565b82525050565b614ec281615719565b82525050565b614ed181615723565b82525050565b614ee081615723565b82525050565b614eef81615735565b82525050565b6000614f018284614a20565b915081905092915050565b6000606082019050614f2160008301866148e8565b614f2e60208301856148e8565b614f3b6040830184614eb9565b949350505050565b600060e082019050614f58600083018a6148e8565b614f6560208301896148e8565b614f726040830188614eb9565b614f7f6060830187614eb9565b614f8c6080830186614ee6565b614f9960a0830185614a11565b614fa660c0830184614a11565b98975050505050505050565b600061010082019050614fc8600083018b6148e8565b614fd5602083018a6148e8565b614fe26040830189614ed7565b614fef6060830188614e9b565b614ffc6080830187614e9b565b61500960a0830186614eb9565b61501660c0830185614eb9565b61502360e0830184614eb9565b9998505050505050505050565b600060408201905061504560008301856148e8565b6150526020830184614eb9565b9392505050565b6000602082019050818103600083015261507381846148f7565b905092915050565b600060208201905081810360008301526150958184614955565b905092915050565b600060208201905081810360008301526150b781846149b3565b905092915050565b60006020820190506150d46000830184614a51565b92915050565b600060208201905081810360008301526150f48184614a60565b905092915050565b6000602082019050818103600083015261511581614a99565b9050919050565b6000602082019050818103600083015261513581614abc565b9050919050565b6000602082019050818103600083015261515581614adf565b9050919050565b6000602082019050818103600083015261517581614b02565b9050919050565b6000602082019050818103600083015261519581614b25565b9050919050565b600060208201905081810360008301526151b581614b48565b9050919050565b600060208201905081810360008301526151d581614b6b565b9050919050565b600060208201905081810360008301526151f581614b8e565b9050919050565b6000602082019050818103600083015261521581614bb1565b9050919050565b6000602082019050818103600083015261523581614bd4565b9050919050565b6000602082019050818103600083015261525581614bf7565b9050919050565b6000602082019050818103600083015261527581614c1a565b9050919050565b6000602082019050818103600083015261529581614c3d565b9050919050565b600060208201905081810360008301526152b581614c60565b9050919050565b600060208201905081810360008301526152d581614c83565b9050919050565b600060208201905081810360008301526152f581614ca6565b9050919050565b6000602082019050818103600083015261531581614cc9565b9050919050565b6000602082019050818103600083015261533581614cec565b9050919050565b6000610140820190506153526000830184614d52565b92915050565b600060808201905061536d6000830184614e37565b92915050565b60006060820190506153886000830186614e9b565b6153956020830185614e9b565b6153a26040830184614ed7565b949350505050565b60006020820190506153bf6000830184614eb9565b92915050565b60006040820190506153da6000830185614eb9565b6153e76020830184614eb9565b9392505050565b600060c0820190506154036000830189614eb9565b6154106020830188614eb9565b61541d6040830187614ed7565b61542a6060830186614e9b565b6154376080830185614e9b565b61544460a0830184614eb9565b979650505050505050565b600061545961546a565b905061546582826157a8565b919050565b6000604051905090565b600067ffffffffffffffff82111561548f5761548e615880565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156154bb576154ba615880565b5b6154c4826158af565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006155b982615719565b91506155c483615719565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156155f9576155f8615822565b5b828201905092915050565b600061560f82615719565b915061561a83615719565b92508261562a57615629615851565b5b828204905092915050565b600061564082615719565b915061564b83615719565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561568457615683615822565b5b828202905092915050565b600061569a82615719565b91506156a583615719565b9250828210156156b8576156b7615822565b5b828203905092915050565b60006156ce826156f9565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600065ffffffffffff82169050919050565b600060ff82169050919050565b600061574d82615754565b9050919050565b600061575f826156f9565b9050919050565b82818337600083830152505050565b60005b83811015615793578082015181840152602081019050615778565b838111156157a2576000848401525b50505050565b6157b1826158af565b810181811067ffffffffffffffff821117156157d0576157cf615880565b5b80604052505050565b60006157e482615719565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561581757615816615822565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f54726561737572793a3a6c6f636b546f6b656e73576974685065726d69743a2060008201527f76657374696e67206475726174696f6e206d6f7265207468616e20353020796560208201527f6172730000000000000000000000000000000000000000000000000000000000604082015250565b7f54726561737572793a3a657874656e644c6f636b3a206475726174696f6e203c60008201527f20636c6966660000000000000000000000000000000000000000000000000000602082015250565b7f54726561737572793a3a657874656e644c6f636b3a2076657374696e6720647560008201527f726174696f6e206d6f7265207468616e20323520796561727300000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e73576974685065726d69743a2060008201527f6475726174696f6e203c20636c69666600000000000000000000000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e733a20616d6f756e74206e6f7460008201527f203e203000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e733a2076657374696e6720647560008201527f726174696f6e203c20636c696666000000000000000000000000000000000000602082015250565b7f54726561737572793a3a657874656e644c6f636b3a206d73672e73656e64657260008201527f206d757374206265207265636569766572000000000000000000000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e733a2076657374696e6720647560008201527f726174696f6e206d6f7265207468616e20353020796561727300000000000000602082015250565b7f54726561737572793a3a636c61696d416c6c556e6c6f636b6564546f6b656e7360008201527f3a20636c61696d61626c65416d6f756e74206973203000000000000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e733a2076657374696e6720647560008201527f726174696f6e206d757374206265203e20300000000000000000000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e73576974685065726d69743a2060008201527f76657374696e67206475726174696f6e206d757374206265203e203000000000602082015250565b7f54726561737572793a3a636c61696d556e6c6f636b6564546f6b656e416d6f7560008201527f6e74733a20617272617973206d7573742062652073616d65206c656e67746800602082015250565b7f54726561737572793a3a636c61696d556e6c6f636b6564546f6b656e416d6f7560008201527f6e74733a20636c61696d61626c65416d6f756e74203c20616d6f756e74000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f54726561737572793a3a6c6f636b546f6b656e73576974685065726d69743a2060008201527f616d6f756e74206e6f74203e2030000000000000000000000000000000000000602082015250565b7f54726561737572793a3a657874656e644c6f636b3a20636c696666206d6f726560008201527f207468616e203130207965617273000000000000000000000000000000000000602082015250565b615e57816156c3565b8114615e6257600080fd5b50565b615e6e816156d5565b8114615e7957600080fd5b50565b615e85816156eb565b8114615e9057600080fd5b50565b615e9c81615719565b8114615ea757600080fd5b50565b615eb381615723565b8114615ebe57600080fd5b5056fe54726561737572793a3a657874656e644c6f636b3a20636c696666206d6178206461797320657863656564656454726561737572793a3a657874656e644c6f636b3a2076657374696e67206d61782064617973206578636565646564a2646970667358221220c64806ea2e743039f3e7a415a1b292656c8b976db13ab0374c02e18f11faf7ad64736f6c63430008020033",
  "devdoc": {
    "details": "Contract for locking up tokens for arbitrary time intervals, optionally providing voting power",
    "kind": "dev",
    "methods": {
      "activeLockBalances(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "_0": "the active lock balances"
        }
      },
      "activeLockIds(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "_0": "the active lock ids"
        }
      },
      "activeLocks(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "_0": "the locks"
        }
      },
      "allActiveLockBalances()": {
        "returns": {
          "_0": "the active lock balances"
        }
      },
      "allActiveLockIds()": {
        "returns": {
          "_0": "the lock ids"
        }
      },
      "allActiveLocks()": {
        "returns": {
          "_0": "the locks"
        }
      },
      "allLocks(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "_0": "the locks"
        }
      },
      "claimAllUnlockedTokens(uint256[])": {
        "details": "Errors if no tokens are claimableIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this",
        "params": {
          "locks": "The lock ids for unlocked token balances"
        }
      },
      "claimUnlockedTokenAmounts(uint256[],uint256[])": {
        "details": "Errors if token amounts provided are > claimable amountsIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this",
        "params": {
          "amounts": "The amount of each unlocked token to claim",
          "locks": "The lock ids for unlocked token balances"
        }
      },
      "claimableBalance(uint256)": {
        "details": "Returns 0 if cliff duration has not ended",
        "params": {
          "lockId": "The lock ID"
        },
        "returns": {
          "_0": "The amount that can be claimed"
        }
      },
      "extendLock(uint256,uint16,uint16)": {
        "params": {
          "cliffDaysToAdd": "The number of days to add to cliff duration",
          "lockId": "The lock id for a locked token balance",
          "vestingDaysToAdd": "The number of days to add to vesting duration"
        }
      },
      "lockBalance(uint256)": {
        "params": {
          "lockId": "The lock ID"
        },
        "returns": {
          "balance": "the lock balance"
        }
      },
      "lockTokens(address,address,address,uint48,uint256,uint16,uint16,bool)": {
        "params": {
          "amount": "The amount of tokens being locked",
          "cliffDurationInDays": "The cliff duration in days",
          "grantVotingPower": "if true, give user voting power from tokens",
          "locker": "The account that is locking tokens",
          "receiver": "The account that will be able to retrieve unlocked tokens",
          "startTime": "The unix timestamp when the lock period will start",
          "vestingDurationInDays": "The vesting period in days"
        }
      },
      "lockTokensWithPermit(address,address,address,uint48,uint256,uint16,uint16,bool,uint256,bytes)": {
        "details": "It is up to the frontend developer to ensure the token implements permit - **otherwise this will fail**",
        "params": {
          "amount": "The amount of tokens being locked",
          "cliffDurationInDays": "The lock cliff duration in days",
          "deadline": "The time at which to expire the signature",
          "grantVotingRights": "if true, give user voting power from tokens",
          "locker": "The account that is locking tokens",
          "receiver": "The account that will be able to retrieve unlocked tokens",
          "signature": "The `signature` that signed a hashed message (used to retrieve v,r,s separately and avoid\t\t  stack too deep errors",
          "startTime": "The unix timestamp when the lock period will start",
          "token": "Address of token to lock",
          "vestingDurationInDays": "The lock period in days"
        }
      },
      "tokenBalance(address,address)": {
        "params": {
          "receiver": "The address that has unlocked balances",
          "token": "The token to check"
        },
        "returns": {
          "balance": "the total active balance of `token` for `receiver`"
        }
      },
      "totalTokenBalance(address)": {
        "params": {
          "token": "The token to check"
        },
        "returns": {
          "balance": "the total active balance of `token`"
        }
      }
    },
    "stateVariables": {
      "SECONDS_PER_DAY": {
        "details": "Used to translate lock periods specified in days to seconds"
      }
    },
    "title": "Treasury (prev. Vault)",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LockCreated(address,address,address,uint256,uint256,uint48,uint16,uint16,uint256)": {
        "notice": "Event emitted when a new lock is created"
      },
      "LockExtended(uint256,uint16,uint16,uint16,uint16,uint48)": {
        "notice": "Event emitted when lock duration extended"
      },
      "UnlockedTokensClaimed(address,address,uint256,uint256,uint256)": {
        "notice": "Event emitted when tokens are claimed by a receiver from an unlocked balance"
      }
    },
    "kind": "user",
    "methods": {
      "activeLockBalances(address)": {
        "notice": "Get all active token lock balances for receiver"
      },
      "activeLockIds(address)": {
        "notice": "Get all active token lock ids for receiver"
      },
      "activeLocks(address)": {
        "notice": "Get all active token locks for receiver"
      },
      "allActiveLockBalances()": {
        "notice": "Get all active token lock balances"
      },
      "allActiveLockIds()": {
        "notice": "Get all active token lock ids"
      },
      "allActiveLocks()": {
        "notice": "Get all active token locks"
      },
      "allLocks(address)": {
        "notice": "Get all token locks for receiver"
      },
      "claimAllUnlockedTokens(uint256[])": {
        "notice": "Allows receiver to claim all of their unlocked tokens for a set of locks"
      },
      "claimUnlockedTokenAmounts(uint256[],uint256[])": {
        "notice": "Allows receiver to claim a portion of their unlocked tokens for a given lock"
      },
      "claimableBalance(uint256)": {
        "notice": "Get claimable balance for a given lock id"
      },
      "constructor": {
        "notice": "Create a new Treasury contract"
      },
      "extendLock(uint256,uint16,uint16)": {
        "notice": "Allows receiver extend lock periods for a given lock"
      },
      "lockBalance(uint256)": {
        "notice": "Get lock balance for a given lock id"
      },
      "lockIds(address,uint256)": {
        "notice": "Mapping of address to lock id"
      },
      "lockManager()": {
        "notice": "lockManager contract"
      },
      "lockTokens(address,address,address,uint48,uint256,uint16,uint16,bool)": {
        "notice": "Lock tokens, optionally providing voting power"
      },
      "lockTokensWithPermit(address,address,address,uint48,uint256,uint16,uint16,bool,uint256,bytes)": {
        "notice": "Lock tokens, using permit for approval"
      },
      "numLocks()": {
        "notice": "Number of locks"
      },
      "tokenBalance(address,address)": {
        "notice": "Get token balance of receiver"
      },
      "tokenLocks(uint256)": {
        "notice": "Mapping of lock id > token locks"
      },
      "totalTokenBalance(address)": {
        "notice": "Get total token balance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8429,
        "contract": "contracts/governance/Treasury.sol:Treasury",
        "label": "lockManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ILockManager)10642"
      },
      {
        "astId": 8439,
        "contract": "contracts/governance/Treasury.sol:Treasury",
        "label": "tokenLocks",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Lock)10776_storage)"
      },
      {
        "astId": 8445,
        "contract": "contracts/governance/Treasury.sol:Treasury",
        "label": "lockIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 8448,
        "contract": "contracts/governance/Treasury.sol:Treasury",
        "label": "numLocks",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(ILockManager)10642": {
        "encoding": "inplace",
        "label": "contract ILockManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Lock)10776_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IVault.Lock)",
        "numberOfBytes": "32",
        "value": "t_struct(Lock)10776_storage"
      },
      "t_struct(Lock)10776_storage": {
        "encoding": "inplace",
        "label": "struct IVault.Lock",
        "members": [
          {
            "astId": 10761,
            "contract": "contracts/governance/Treasury.sol:Treasury",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10763,
            "contract": "contracts/governance/Treasury.sol:Treasury",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10765,
            "contract": "contracts/governance/Treasury.sol:Treasury",
            "label": "startTime",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 10767,
            "contract": "contracts/governance/Treasury.sol:Treasury",
            "label": "vestingDurationInDays",
            "offset": 26,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 10769,
            "contract": "contracts/governance/Treasury.sol:Treasury",
            "label": "cliffDurationInDays",
            "offset": 28,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 10771,
            "contract": "contracts/governance/Treasury.sol:Treasury",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10773,
            "contract": "contracts/governance/Treasury.sol:Treasury",
            "label": "amountClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10775,
            "contract": "contracts/governance/Treasury.sol:Treasury",
            "label": "votingPower",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}